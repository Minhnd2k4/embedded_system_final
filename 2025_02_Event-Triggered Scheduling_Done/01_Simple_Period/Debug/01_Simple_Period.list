
01_Simple_Period.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800a7c8  0800a7c8  0001a7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb0  0800adb0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800adb0  0800adb0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adb0  0800adb0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb0  0800adb0  0001adb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adb4  0800adb4  0001adb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800adb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200001d4  0800af8c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0800af8c  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011669  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002979  00000000  00000000  000318a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00034228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7b  00000000  00000000  00035350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001955c  00000000  00000000  000360cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ae4  00000000  00000000  0004f627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ed21  00000000  00000000  0006410b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005da4  00000000  00000000  000f2e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f8bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a7b0 	.word	0x0800a7b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a7b0 	.word	0x0800a7b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <Task_ReadFrequency>:
//    	flag_5s  = 1;
//    }
//}

// Task đọc tần số
void Task_ReadFrequency(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    f1 = Frequency1_Read();
 8000df8:	f000 fffc 	bl	8001df4 <Frequency1_Read>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <Task_ReadFrequency+0x1c>)
 8000e00:	6013      	str	r3, [r2, #0]
    f2 = Frequency2_Read();
 8000e02:	f001 f801 	bl	8001e08 <Frequency2_Read>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a02      	ldr	r2, [pc, #8]	; (8000e14 <Task_ReadFrequency+0x20>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200003b4 	.word	0x200003b4
 8000e14:	200003b8 	.word	0x200003b8

08000e18 <Task_ReadDHT>:

// Task đọc nhiệt độ, độ ẩm
void Task_ReadDHT(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    dht_ok = DHT11_Read(&temp, &humi);
 8000e1c:	4904      	ldr	r1, [pc, #16]	; (8000e30 <Task_ReadDHT+0x18>)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <Task_ReadDHT+0x1c>)
 8000e20:	f000 ff76 	bl	8001d10 <DHT11_Read>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <Task_ReadDHT+0x20>)
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200003ac 	.word	0x200003ac
 8000e34:	200003b0 	.word	0x200003b0
 8000e38:	200003bc 	.word	0x200003bc

08000e3c <Task_LCD_Display>:

// Task hiển thị LCD
void Task_LCD_Display(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af02      	add	r7, sp, #8
    if (dht_ok) {
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <Task_LCD_Display+0x40>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d012      	beq.n	8000e70 <Task_LCD_Display+0x34>
        LCD_PrintFloat(0, 0, "Tem: ", temp, "C");
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <Task_LCD_Display+0x44>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <Task_LCD_Display+0x48>)
 8000e50:	9200      	str	r2, [sp, #0]
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <Task_LCD_Display+0x4c>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	2000      	movs	r0, #0
 8000e58:	f001 f964 	bl	8002124 <LCD_PrintFloat>
        LCD_PrintFloat(1, 0, "Hum: ", humi, "%");
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <Task_LCD_Display+0x50>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <Task_LCD_Display+0x54>)
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <Task_LCD_Display+0x58>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f001 f95b 	bl	8002124 <LCD_PrintFloat>
    } else {
        LCD_Send_String("DHT Error");
    }
}
 8000e6e:	e002      	b.n	8000e76 <Task_LCD_Display+0x3a>
        LCD_Send_String("DHT Error");
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <Task_LCD_Display+0x5c>)
 8000e72:	f001 f8fb 	bl	800206c <LCD_Send_String>
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200003bc 	.word	0x200003bc
 8000e80:	200003b0 	.word	0x200003b0
 8000e84:	0800a7d0 	.word	0x0800a7d0
 8000e88:	0800a7c8 	.word	0x0800a7c8
 8000e8c:	200003ac 	.word	0x200003ac
 8000e90:	0800a7dc 	.word	0x0800a7dc
 8000e94:	0800a7d4 	.word	0x0800a7d4
 8000e98:	0800a7e0 	.word	0x0800a7e0

08000e9c <Task_UART_Send>:

// Task gửi UART
void Task_UART_Send(void) {
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	b095      	sub	sp, #84	; 0x54
 8000ea0:	af04      	add	r7, sp, #16
    char msg[64];
    if (dht_ok) {
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <Task_UART_Send+0x6c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d01d      	beq.n	8000ee6 <Task_UART_Send+0x4a>
        sprintf(msg, "Temp: %.1f | Humi: %.1f | F1: %lu | F2: %lu\r\n", temp, humi, f1, f2);
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <Task_UART_Send+0x70>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff faba 	bl	8000428 <__aeabi_f2d>
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	460d      	mov	r5, r1
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <Task_UART_Send+0x74>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fab3 	bl	8000428 <__aeabi_f2d>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4913      	ldr	r1, [pc, #76]	; (8000f14 <Task_UART_Send+0x78>)
 8000ec8:	6809      	ldr	r1, [r1, #0]
 8000eca:	4813      	ldr	r0, [pc, #76]	; (8000f18 <Task_UART_Send+0x7c>)
 8000ecc:	6800      	ldr	r0, [r0, #0]
 8000ece:	463e      	mov	r6, r7
 8000ed0:	9003      	str	r0, [sp, #12]
 8000ed2:	9102      	str	r1, [sp, #8]
 8000ed4:	e9cd 2300 	strd	r2, r3, [sp]
 8000ed8:	4622      	mov	r2, r4
 8000eda:	462b      	mov	r3, r5
 8000edc:	490f      	ldr	r1, [pc, #60]	; (8000f1c <Task_UART_Send+0x80>)
 8000ede:	4630      	mov	r0, r6
 8000ee0:	f005 ffde 	bl	8006ea0 <siprintf>
 8000ee4:	e007      	b.n	8000ef6 <Task_UART_Send+0x5a>
    } else {
        sprintf(msg, "DHT11 Read Failed | F1: %lu | F2: %lu\r\n", f1, f2);
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <Task_UART_Send+0x78>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <Task_UART_Send+0x7c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4638      	mov	r0, r7
 8000ef0:	490b      	ldr	r1, [pc, #44]	; (8000f20 <Task_UART_Send+0x84>)
 8000ef2:	f005 ffd5 	bl	8006ea0 <siprintf>
    }
    UART_SendString(&huart2, msg);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480a      	ldr	r0, [pc, #40]	; (8000f24 <Task_UART_Send+0x88>)
 8000efc:	f001 f948 	bl	8002190 <UART_SendString>
}
 8000f00:	bf00      	nop
 8000f02:	3744      	adds	r7, #68	; 0x44
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f08:	200003bc 	.word	0x200003bc
 8000f0c:	200003b0 	.word	0x200003b0
 8000f10:	200003ac 	.word	0x200003ac
 8000f14:	200003b4 	.word	0x200003b4
 8000f18:	200003b8 	.word	0x200003b8
 8000f1c:	0800a7ec 	.word	0x0800a7ec
 8000f20:	0800a81c 	.word	0x0800a81c
 8000f24:	20000364 	.word	0x20000364

08000f28 <HandleEvent.0>:
  UART_StartReceive_IT();
  DHT11_Init(&htim4);
  LCD_Init(&hi2c2);


  void HandleEvent(EventType event) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	f8c7 c000 	str.w	ip, [r7]
      switch (event) {
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d826      	bhi.n	8000f8c <HandleEvent.0+0x64>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <HandleEvent.0+0x1c>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f55 	.word	0x08000f55
 8000f48:	08000f63 	.word	0x08000f63
 8000f4c:	08000f71 	.word	0x08000f71
 8000f50:	08000f7f 	.word	0x08000f7f
          case EVENT_UART:
              // Xử lý task UART ở đây
              UART_SendString(&huart2, "Handle UART task\r\n");
 8000f54:	4910      	ldr	r1, [pc, #64]	; (8000f98 <HandleEvent.0+0x70>)
 8000f56:	4811      	ldr	r0, [pc, #68]	; (8000f9c <HandleEvent.0+0x74>)
 8000f58:	f001 f91a 	bl	8002190 <UART_SendString>
              Task_UART_Send();
 8000f5c:	f7ff ff9e 	bl	8000e9c <Task_UART_Send>
              break;
 8000f60:	e015      	b.n	8000f8e <HandleEvent.0+0x66>
          case EVENT_LCD:
              // Xử lý task LCD ở đây
              UART_SendString(&huart2, "Handle LCD task\r\n");
 8000f62:	490f      	ldr	r1, [pc, #60]	; (8000fa0 <HandleEvent.0+0x78>)
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <HandleEvent.0+0x74>)
 8000f66:	f001 f913 	bl	8002190 <UART_SendString>
              Task_LCD_Display();
 8000f6a:	f7ff ff67 	bl	8000e3c <Task_LCD_Display>
              break;
 8000f6e:	e00e      	b.n	8000f8e <HandleEvent.0+0x66>
          case EVENT_TEMP:
              // Xử lý task nhiệt độ ở đây
              UART_SendString(&huart2, "Handle TEMP task\r\n");
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <HandleEvent.0+0x7c>)
 8000f72:	480a      	ldr	r0, [pc, #40]	; (8000f9c <HandleEvent.0+0x74>)
 8000f74:	f001 f90c 	bl	8002190 <UART_SendString>
              Task_ReadDHT();
 8000f78:	f7ff ff4e 	bl	8000e18 <Task_ReadDHT>
              break;
 8000f7c:	e007      	b.n	8000f8e <HandleEvent.0+0x66>
          case EVENT_FREQ:
              // Xử lý task tần số ở đây
              UART_SendString(&huart2, "Handle FREQ task\r\n");
 8000f7e:	490a      	ldr	r1, [pc, #40]	; (8000fa8 <HandleEvent.0+0x80>)
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <HandleEvent.0+0x74>)
 8000f82:	f001 f905 	bl	8002190 <UART_SendString>
              Task_ReadFrequency();
 8000f86:	f7ff ff35 	bl	8000df4 <Task_ReadFrequency>
              break;
 8000f8a:	e000      	b.n	8000f8e <HandleEvent.0+0x66>
          default:
              break;
 8000f8c:	bf00      	nop
      }
  }
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	0800a844 	.word	0x0800a844
 8000f9c:	20000364 	.word	0x20000364
 8000fa0:	0800a858 	.word	0x0800a858
 8000fa4:	0800a86c 	.word	0x0800a86c
 8000fa8:	0800a880 	.word	0x0800a880

08000fac <main>:
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
int main(void)
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8000fb8:	f001 fa1a 	bl	80023f0 <HAL_Init>
  SystemClock_Config();
 8000fbc:	f000 f842 	bl	8001044 <SystemClock_Config>
  MX_GPIO_Init();
 8000fc0:	f000 fa5c 	bl	800147c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000fc4:	f000 f884 	bl	80010d0 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000fc8:	f000 f9be 	bl	8001348 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000fcc:	f000 fa2c 	bl	8001428 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fd0:	f000 f8fe 	bl	80011d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fd4:	f000 f964 	bl	80012a0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000fd8:	f000 f8a8 	bl	800112c <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <main+0x80>)
 8000fde:	f002 ff47 	bl	8003e70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <main+0x84>)
 8000fe6:	f002 ffe5 	bl	8003fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000fea:	2104      	movs	r1, #4
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <main+0x84>)
 8000fee:	f002 ffe1 	bl	8003fb4 <HAL_TIM_PWM_Start>
  Frequency1_Init(&htim3); // HAL_TIM_IC_Start_IT
 8000ff2:	4810      	ldr	r0, [pc, #64]	; (8001034 <main+0x88>)
 8000ff4:	f000 fed6 	bl	8001da4 <Frequency1_Init>
  Frequency2_Init(&htim4);
 8000ff8:	480f      	ldr	r0, [pc, #60]	; (8001038 <main+0x8c>)
 8000ffa:	f000 fee7 	bl	8001dcc <Frequency2_Init>
  UART_StartReceive_IT();
 8000ffe:	f001 f8db 	bl	80021b8 <UART_StartReceive_IT>
  DHT11_Init(&htim4);
 8001002:	480d      	ldr	r0, [pc, #52]	; (8001038 <main+0x8c>)
 8001004:	f000 fd80 	bl	8001b08 <DHT11_Init>
  LCD_Init(&hi2c2);
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <main+0x90>)
 800100a:	f001 f869 	bl	80020e0 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    EventType event = event_queue_pop(&uart_event_queue);
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <main+0x94>)
 8001010:	f001 f918 	bl	8002244 <event_queue_pop>
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
    if (event != EVENT_NONE) {
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f7      	beq.n	800100e <main+0x62>
        HandleEvent(event);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	463a      	mov	r2, r7
 8001022:	4694      	mov	ip, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff7f 	bl	8000f28 <HandleEvent.0>
  {
 800102a:	e7f0      	b.n	800100e <main+0x62>
 800102c:	20000244 	.word	0x20000244
 8001030:	2000028c 	.word	0x2000028c
 8001034:	200002d4 	.word	0x200002d4
 8001038:	2000031c 	.word	0x2000031c
 800103c:	200001f0 	.word	0x200001f0
 8001040:	200003c0 	.word	0x200003c0

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b090      	sub	sp, #64	; 0x40
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f005 ff87 	bl	8006f66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	2302      	movs	r3, #2
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001082:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fa45 	bl	800351c <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001098:	f000 fa3c 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a0:	2302      	movs	r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2102      	movs	r1, #2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fcb2 	bl	8003a20 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010c2:	f000 fa27 	bl	8001514 <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3740      	adds	r7, #64	; 0x40
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2C2_Init+0x50>)
 80010d6:	4a13      	ldr	r2, [pc, #76]	; (8001124 <MX_I2C2_Init+0x54>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_I2C2_Init+0x50>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <MX_I2C2_Init+0x58>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_I2C2_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_I2C2_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_I2C2_Init+0x50>)
 80010ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_I2C2_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_I2C2_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_I2C2_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_I2C2_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_I2C2_Init+0x50>)
 800110e:	f001 fd69 	bl	8002be4 <HAL_I2C_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 f9fc 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200001f0 	.word	0x200001f0
 8001124:	40005800 	.word	0x40005800
 8001128:	000186a0 	.word	0x000186a0

0800112c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_TIM1_Init+0x9c>)
 800114a:	4a20      	ldr	r2, [pc, #128]	; (80011cc <MX_TIM1_Init+0xa0>)
 800114c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001150:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001154:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_TIM1_Init+0x9c>)
 800115e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001162:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_TIM1_Init+0x9c>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001178:	f002 fde0 	bl	8003d3c <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001182:	f000 f9c7 	bl	8001514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_TIM1_Init+0x9c>)
 8001194:	f003 fb5a 	bl	800484c <HAL_TIM_ConfigClockSource>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800119e:	f000 f9b9 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM1_Init+0x9c>)
 80011b0:	f004 f83a 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011ba:	f000 f9ab 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000244 	.word	0x20000244
 80011cc:	40012c00 	.word	0x40012c00

080011d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <MX_TIM2_Init+0xcc>)
 80011f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <MX_TIM2_Init+0xcc>)
 80011fc:	2247      	movs	r2, #71	; 0x47
 80011fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <MX_TIM2_Init+0xcc>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <MX_TIM2_Init+0xcc>)
 8001208:	f240 32e7 	movw	r2, #999	; 0x3e7
 800120c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <MX_TIM2_Init+0xcc>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_TIM2_Init+0xcc>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800121a:	4820      	ldr	r0, [pc, #128]	; (800129c <MX_TIM2_Init+0xcc>)
 800121c:	f002 fe7a 	bl	8003f14 <HAL_TIM_PWM_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001226:	f000 f975 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	4619      	mov	r1, r3
 8001238:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_TIM2_Init+0xcc>)
 800123a:	f003 fff5 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001244:	f000 f966 	bl	8001514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001248:	2360      	movs	r3, #96	; 0x60
 800124a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800124c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001250:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	480e      	ldr	r0, [pc, #56]	; (800129c <MX_TIM2_Init+0xcc>)
 8001262:	f003 fa31 	bl	80046c8 <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800126c:	f000 f952 	bl	8001514 <Error_Handler>
  }
  sConfigOC.Pulse = 300;
 8001270:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2204      	movs	r2, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM2_Init+0xcc>)
 800127e:	f003 fa23 	bl	80046c8 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001288:	f000 f944 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM2_Init+0xcc>)
 800128e:	f000 fa7d 	bl	800178c <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000028c 	.word	0x2000028c

080012a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012bc:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_TIM3_Init+0xa0>)
 80012be:	4a21      	ldr	r2, [pc, #132]	; (8001344 <MX_TIM3_Init+0xa4>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_TIM3_Init+0xa0>)
 80012c4:	2247      	movs	r2, #71	; 0x47
 80012c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_TIM3_Init+0xa0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_TIM3_Init+0xa0>)
 80012d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_TIM3_Init+0xa0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_TIM3_Init+0xa0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012e2:	4817      	ldr	r0, [pc, #92]	; (8001340 <MX_TIM3_Init+0xa0>)
 80012e4:	f002 ff08 	bl	80040f8 <HAL_TIM_IC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012ee:	f000 f911 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4619      	mov	r1, r3
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <MX_TIM3_Init+0xa0>)
 8001302:	f003 ff91 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800130c:	f000 f902 	bl	8001514 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001310:	2300      	movs	r3, #0
 8001312:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001314:	2301      	movs	r3, #1
 8001316:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_TIM3_Init+0xa0>)
 8001328:	f003 f932 	bl	8004590 <HAL_TIM_IC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001332:	f000 f8ef 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200002d4 	.word	0x200002d4
 8001344:	40000400 	.word	0x40000400

08001348 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_TIM4_Init+0xd8>)
 8001374:	4a2b      	ldr	r2, [pc, #172]	; (8001424 <MX_TIM4_Init+0xdc>)
 8001376:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_TIM4_Init+0xd8>)
 800137a:	2247      	movs	r2, #71	; 0x47
 800137c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_TIM4_Init+0xd8>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff - 1;
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_TIM4_Init+0xd8>)
 8001386:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800138a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_TIM4_Init+0xd8>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <MX_TIM4_Init+0xd8>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001398:	4821      	ldr	r0, [pc, #132]	; (8001420 <MX_TIM4_Init+0xd8>)
 800139a:	f002 fccf 	bl	8003d3c <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80013a4:	f000 f8b6 	bl	8001514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	4619      	mov	r1, r3
 80013b4:	481a      	ldr	r0, [pc, #104]	; (8001420 <MX_TIM4_Init+0xd8>)
 80013b6:	f003 fa49 	bl	800484c <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80013c0:	f000 f8a8 	bl	8001514 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80013c4:	4816      	ldr	r0, [pc, #88]	; (8001420 <MX_TIM4_Init+0xd8>)
 80013c6:	f002 fe97 	bl	80040f8 <HAL_TIM_IC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80013d0:	f000 f8a0 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	480f      	ldr	r0, [pc, #60]	; (8001420 <MX_TIM4_Init+0xd8>)
 80013e4:	f003 ff20 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80013ee:	f000 f891 	bl	8001514 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f6:	2301      	movs	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_TIM4_Init+0xd8>)
 800140a:	f003 f8c1 	bl	8004590 <HAL_TIM_IC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001414:	f000 f87e 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000031c 	.word	0x2000031c
 8001424:	40000800 	.word	0x40000800

08001428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <MX_USART2_UART_Init+0x50>)
 8001430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001460:	f003 ff52 	bl	8005308 <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800146a:	f000 f853 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000364 	.word	0x20000364
 8001478:	40004400 	.word	0x40004400

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_GPIO_Init+0x90>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <MX_GPIO_Init+0x90>)
 8001496:	f043 0320 	orr.w	r3, r3, #32
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_GPIO_Init+0x90>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0320 	and.w	r3, r3, #32
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_GPIO_Init+0x90>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <MX_GPIO_Init+0x90>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_GPIO_Init+0x90>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_GPIO_Init+0x90>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a11      	ldr	r2, [pc, #68]	; (800150c <MX_GPIO_Init+0x90>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_GPIO_Init+0x90>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_GPIO_Init+0x94>)
 80014e0:	f001 fb67 	bl	8002bb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80014e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_GPIO_Init+0x94>)
 80014fe:	f001 f9bd 	bl	800287c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	40010800 	.word	0x40010800

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_MspInit+0x5c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_MspInit+0x5c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_MspInit+0x5c>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_MspInit+0x5c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_MspInit+0x5c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_MspInit+0x5c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_MspInit+0x60>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_MspInit+0x60>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000

08001584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <HAL_I2C_MspInit+0x74>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d124      	bne.n	80015ee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_I2C_MspInit+0x78>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_I2C_MspInit+0x78>)
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_I2C_MspInit+0x78>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c2:	2312      	movs	r3, #18
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4619      	mov	r1, r3
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <HAL_I2C_MspInit+0x7c>)
 80015d2:	f001 f953 	bl	800287c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_I2C_MspInit+0x78>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_I2C_MspInit+0x78>)
 80015dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_I2C_MspInit+0x78>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40005800 	.word	0x40005800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010c00 	.word	0x40010c00

08001604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0318 	add.w	r3, r7, #24
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d114      	bne.n	800164e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_TIM_Base_MspInit+0xb8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a24      	ldr	r2, [pc, #144]	; (80016bc <HAL_TIM_Base_MspInit+0xb8>)
 800162a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_TIM_Base_MspInit+0xb8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2019      	movs	r0, #25
 8001642:	f001 f832 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001646:	2019      	movs	r0, #25
 8001648:	f001 f84b 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800164c:	e030      	b.n	80016b0 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM4)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_TIM_Base_MspInit+0xbc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d12b      	bne.n	80016b0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_TIM_Base_MspInit+0xb8>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_TIM_Base_MspInit+0xb8>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	61d3      	str	r3, [r2, #28]
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_TIM_Base_MspInit+0xb8>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_TIM_Base_MspInit+0xb8>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_TIM_Base_MspInit+0xb8>)
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_TIM_Base_MspInit+0xb8>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	4619      	mov	r1, r3
 800169a:	480a      	ldr	r0, [pc, #40]	; (80016c4 <HAL_TIM_Base_MspInit+0xc0>)
 800169c:	f001 f8ee 	bl	800287c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	201e      	movs	r0, #30
 80016a6:	f001 f800 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016aa:	201e      	movs	r0, #30
 80016ac:	f001 f819 	bl	80026e2 <HAL_NVIC_EnableIRQ>
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40012c00 	.word	0x40012c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40000800 	.word	0x40000800
 80016c4:	40010c00 	.word	0x40010c00

080016c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d10b      	bne.n	80016f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_TIM_PWM_MspInit+0x34>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_TIM_PWM_MspInit+0x34>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_TIM_PWM_MspInit+0x34>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a19      	ldr	r2, [pc, #100]	; (8001780 <HAL_TIM_IC_MspInit+0x80>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d12b      	bne.n	8001778 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_TIM_IC_MspInit+0x84>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a17      	ldr	r2, [pc, #92]	; (8001784 <HAL_TIM_IC_MspInit+0x84>)
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	61d3      	str	r3, [r2, #28]
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_TIM_IC_MspInit+0x84>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_TIM_IC_MspInit+0x84>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a11      	ldr	r2, [pc, #68]	; (8001784 <HAL_TIM_IC_MspInit+0x84>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_TIM_IC_MspInit+0x84>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001750:	2340      	movs	r3, #64	; 0x40
 8001752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <HAL_TIM_IC_MspInit+0x88>)
 8001764:	f001 f88a 	bl	800287c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	201d      	movs	r0, #29
 800176e:	f000 ff9c 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001772:	201d      	movs	r0, #29
 8001774:	f000 ffb5 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40000400 	.word	0x40000400
 8001784:	40021000 	.word	0x40021000
 8001788:	40010800 	.word	0x40010800

0800178c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017aa:	d117      	bne.n	80017dc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_TIM_MspPostInit+0x58>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <HAL_TIM_MspPostInit+0x58>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_TIM_MspPostInit+0x58>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c4:	2303      	movs	r3, #3
 80017c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4619      	mov	r1, r3
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <HAL_TIM_MspPostInit+0x5c>)
 80017d8:	f001 f850 	bl	800287c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010800 	.word	0x40010800

080017ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_UART_MspInit+0x98>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d137      	bne.n	800187c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_UART_MspInit+0x9c>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_UART_MspInit+0x9c>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001816:	61d3      	str	r3, [r2, #28]
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_UART_MspInit+0x9c>)
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_UART_MspInit+0x9c>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_UART_MspInit+0x9c>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_UART_MspInit+0x9c>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800183c:	2304      	movs	r3, #4
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <HAL_UART_MspInit+0xa0>)
 8001850:	f001 f814 	bl	800287c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001854:	2308      	movs	r3, #8
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <HAL_UART_MspInit+0xa0>)
 8001868:	f001 f808 	bl	800287c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2026      	movs	r0, #38	; 0x26
 8001872:	f000 ff1a 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001876:	2026      	movs	r0, #38	; 0x26
 8001878:	f000 ff33 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40004400 	.word	0x40004400
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001894:	e7fe      	b.n	8001894 <NMI_Handler+0x4>

08001896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <MemManage_Handler+0x4>

080018a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <UsageFault_Handler+0x4>

080018ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d6:	f000 fdd1 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM1_UP_IRQHandler+0x10>)
 80018e6:	f002 fd63 	bl	80043b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000244 	.word	0x20000244

080018f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM3_IRQHandler+0x10>)
 80018fa:	f002 fd59 	bl	80043b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002d4 	.word	0x200002d4

08001908 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM4_IRQHandler+0x10>)
 800190e:	f002 fd4f 	bl	80043b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000031c 	.word	0x2000031c

0800191c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <USART2_IRQHandler+0x10>)
 8001922:	f003 fdf1 	bl	8005508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000364 	.word	0x20000364

08001930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return 1;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <_kill>:

int _kill(int pid, int sig)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001948:	f005 fb72 	bl	8007030 <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	2216      	movs	r2, #22
 8001950:	601a      	str	r2, [r3, #0]
  return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_exit>:

void _exit (int status)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001966:	f04f 31ff 	mov.w	r1, #4294967295
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffe7 	bl	800193e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001970:	e7fe      	b.n	8001970 <_exit+0x12>

08001972 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e00a      	b.n	800199a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001984:	f3af 8000 	nop.w
 8001988:	4601      	mov	r1, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	60ba      	str	r2, [r7, #8]
 8001990:	b2ca      	uxtb	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbf0      	blt.n	8001984 <_read+0x12>
  }

  return len;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e009      	b.n	80019d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbf1      	blt.n	80019be <_write+0x12>
  }
  return len;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_close>:

int _close(int file)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <_isatty>:

int _isatty(int file)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f005 fadc 	bl	8007030 <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20005000 	.word	0x20005000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	200003cc 	.word	0x200003cc
 8001aac:	20000598 	.word	0x20000598

08001ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001abc:	f7ff fff8 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ac2:	490c      	ldr	r1, [pc, #48]	; (8001af4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ad8:	4c09      	ldr	r4, [pc, #36]	; (8001b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f005 faa9 	bl	800703c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aea:	f7ff fa5f 	bl	8000fac <main>
  bx lr
 8001aee:	4770      	bx	lr
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001af8:	0800adb8 	.word	0x0800adb8
  ldr r2, =_sbss
 8001afc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b00:	20000594 	.word	0x20000594

08001b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC1_2_IRQHandler>
	...

08001b08 <DHT11_Init>:
float Temperature = 0;
float Humidity = 0;

static TIM_HandleTypeDef *dht_timer = NULL;

void DHT11_Init(TIM_HandleTypeDef *htim) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
    dht_timer = htim;
 8001b10:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <DHT11_Init+0x20>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start(dht_timer);
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <DHT11_Init+0x20>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 f95e 	bl	8003ddc <HAL_TIM_Base_Start>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200003d0 	.word	0x200003d0

08001b2c <delay_us>:

static void delay_us(uint16_t time) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(dht_timer, 0);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <delay_us+0x30>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(dht_timer) < time);
 8001b40:	bf00      	nop
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <delay_us+0x30>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d3f8      	bcc.n	8001b42 <delay_us+0x16>
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	200003d0 	.word	0x200003d0

08001b60 <Set_Pin_Output>:

static void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2302      	movs	r3, #2
 8001b84:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fe75 	bl	800287c <HAL_GPIO_Init>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <Set_Pin_Input>:

static void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fe58 	bl	800287c <HAL_GPIO_Init>
}
 8001bcc:	bf00      	nop
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <DHT11_Start>:

void DHT11_Start(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 8001bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <DHT11_Start+0x40>)
 8001bde:	f7ff ffbf 	bl	8001b60 <Set_Pin_Output>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <DHT11_Start+0x40>)
 8001bea:	f000 ffe2 	bl	8002bb2 <HAL_GPIO_WritePin>
    HAL_Delay(18);
 8001bee:	2012      	movs	r0, #18
 8001bf0:	f000 fc60 	bl	80024b4 <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <DHT11_Start+0x40>)
 8001bfc:	f000 ffd9 	bl	8002bb2 <HAL_GPIO_WritePin>
    delay_us(20);
 8001c00:	2014      	movs	r0, #20
 8001c02:	f7ff ff93 	bl	8001b2c <delay_us>
    Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8001c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0a:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DHT11_Start+0x40>)
 8001c0c:	f7ff ffc5 	bl	8001b9a <Set_Pin_Input>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40010800 	.word	0x40010800

08001c18 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]
    delay_us(40);
 8001c22:	2028      	movs	r0, #40	; 0x28
 8001c24:	f7ff ff82 	bl	8001b2c <delay_us>
    if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 8001c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2c:	4810      	ldr	r0, [pc, #64]	; (8001c70 <DHT11_Check_Response+0x58>)
 8001c2e:	f000 ffa9 	bl	8002b84 <HAL_GPIO_ReadPin>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10c      	bne.n	8001c52 <DHT11_Check_Response+0x3a>
        delay_us(80);
 8001c38:	2050      	movs	r0, #80	; 0x50
 8001c3a:	f7ff ff77 	bl	8001b2c <delay_us>
        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) response = 1;
 8001c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <DHT11_Check_Response+0x58>)
 8001c44:	f000 ff9e 	bl	8002b84 <HAL_GPIO_ReadPin>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <DHT11_Check_Response+0x3a>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	71fb      	strb	r3, [r7, #7]
    }
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8001c52:	bf00      	nop
 8001c54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c58:	4805      	ldr	r0, [pc, #20]	; (8001c70 <DHT11_Check_Response+0x58>)
 8001c5a:	f000 ff93 	bl	8002b84 <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f7      	bne.n	8001c54 <DHT11_Check_Response+0x3c>
    return response;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40010800 	.word	0x40010800

08001c74 <DHT11_Read_Byte>:

uint8_t DHT11_Read_Byte(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
    uint8_t i, data = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8001c7e:	2300      	movs	r3, #0
 8001c80:	71fb      	strb	r3, [r7, #7]
 8001c82:	e03a      	b.n	8001cfa <DHT11_Read_Byte+0x86>
        while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8001c84:	bf00      	nop
 8001c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8a:	4820      	ldr	r0, [pc, #128]	; (8001d0c <DHT11_Read_Byte+0x98>)
 8001c8c:	f000 ff7a 	bl	8002b84 <HAL_GPIO_ReadPin>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f7      	beq.n	8001c86 <DHT11_Read_Byte+0x12>
        delay_us(40);
 8001c96:	2028      	movs	r0, #40	; 0x28
 8001c98:	f7ff ff48 	bl	8001b2c <delay_us>
        if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca0:	481a      	ldr	r0, [pc, #104]	; (8001d0c <DHT11_Read_Byte+0x98>)
 8001ca2:	f000 ff6f 	bl	8002b84 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10e      	bne.n	8001cca <DHT11_Read_Byte+0x56>
            data &= ~(1 << (7 - i));
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	b25a      	sxtb	r2, r3
 8001cbe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	71bb      	strb	r3, [r7, #6]
 8001cc8:	e014      	b.n	8001cf4 <DHT11_Read_Byte+0x80>
        else {
            data |= (1 << (7 - i));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f1c3 0307 	rsb	r3, r3, #7
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	b25a      	sxtb	r2, r3
 8001cd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	71bb      	strb	r3, [r7, #6]
            while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8001ce2:	bf00      	nop
 8001ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <DHT11_Read_Byte+0x98>)
 8001cea:	f000 ff4b 	bl	8002b84 <HAL_GPIO_ReadPin>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f7      	bne.n	8001ce4 <DHT11_Read_Byte+0x70>
    for (i = 0; i < 8; i++) {
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	2b07      	cmp	r3, #7
 8001cfe:	d9c1      	bls.n	8001c84 <DHT11_Read_Byte+0x10>
        }
    }
    return data;
 8001d00:	79bb      	ldrb	r3, [r7, #6]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40010800 	.word	0x40010800

08001d10 <DHT11_Read>:

bool DHT11_Read(float *temperature, float *humidity)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    uint8_t rh1, rh2, temp1, temp2, sum;

    DHT11_Start();
 8001d1a:	f7ff ff5b 	bl	8001bd4 <DHT11_Start>
    if (DHT11_Check_Response()) {
 8001d1e:	f7ff ff7b 	bl	8001c18 <DHT11_Check_Response>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d02d      	beq.n	8001d84 <DHT11_Read+0x74>
        rh1 = DHT11_Read_Byte();
 8001d28:	f7ff ffa4 	bl	8001c74 <DHT11_Read_Byte>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]
        rh2 = DHT11_Read_Byte();
 8001d30:	f7ff ffa0 	bl	8001c74 <DHT11_Read_Byte>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73bb      	strb	r3, [r7, #14]
        temp1 = DHT11_Read_Byte();
 8001d38:	f7ff ff9c 	bl	8001c74 <DHT11_Read_Byte>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	737b      	strb	r3, [r7, #13]
        temp2 = DHT11_Read_Byte();
 8001d40:	f7ff ff98 	bl	8001c74 <DHT11_Read_Byte>
 8001d44:	4603      	mov	r3, r0
 8001d46:	733b      	strb	r3, [r7, #12]
        sum = DHT11_Read_Byte();
 8001d48:	f7ff ff94 	bl	8001c74 <DHT11_Read_Byte>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	72fb      	strb	r3, [r7, #11]

        if (sum == (rh1 + rh2 + temp1 + temp2)) {
 8001d50:	7afa      	ldrb	r2, [r7, #11]
 8001d52:	7bf9      	ldrb	r1, [r7, #15]
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	4419      	add	r1, r3
 8001d58:	7b7b      	ldrb	r3, [r7, #13]
 8001d5a:	4419      	add	r1, r3
 8001d5c:	7b3b      	ldrb	r3, [r7, #12]
 8001d5e:	440b      	add	r3, r1
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d10f      	bne.n	8001d84 <DHT11_Read+0x74>
            *temperature = (float)temp1;
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ffb4 	bl	8000cd4 <__aeabi_ui2f>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
            *humidity = (float)rh1;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe ffad 	bl	8000cd4 <__aeabi_ui2f>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	601a      	str	r2, [r3, #0]
            return true;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e006      	b.n	8001d92 <DHT11_Read+0x82>
        }
    }

    *temperature = -100.0f;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <DHT11_Read+0x8c>)
 8001d88:	601a      	str	r2, [r3, #0]
    *humidity = -1.0f;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <DHT11_Read+0x90>)
 8001d8e:	601a      	str	r2, [r3, #0]
    return false;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	c2c80000 	.word	0xc2c80000
 8001da0:	bf800000 	.word	0xbf800000

08001da4 <Frequency1_Init>:
static uint8_t  Is2_First = 0;
static volatile uint16_t IC2_Overflow = 0;
static uint32_t Freq2 = 0;

void Frequency1_Init(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    htim1 = htim;
 8001dac:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <Frequency1_Init+0x24>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
    HAL_TIM_IC_Start_IT(htim1, TIM_CHANNEL_1);
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <Frequency1_Init+0x24>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 f9ed 	bl	8004198 <HAL_TIM_IC_Start_IT>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200003d4 	.word	0x200003d4

08001dcc <Frequency2_Init>:

void Frequency2_Init(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    htim2 = htim;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <Frequency2_Init+0x24>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
    HAL_TIM_IC_Start_IT(htim2, TIM_CHANNEL_1);
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <Frequency2_Init+0x24>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 f9d9 	bl	8004198 <HAL_TIM_IC_Start_IT>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200003d8 	.word	0x200003d8

08001df4 <Frequency1_Read>:

uint32_t Frequency1_Read(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
    return Freq1;
 8001df8:	4b02      	ldr	r3, [pc, #8]	; (8001e04 <Frequency1_Read+0x10>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	200003e8 	.word	0x200003e8

08001e08 <Frequency2_Read>:

uint32_t Frequency2_Read(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
    return Freq2;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <Frequency2_Read+0x10>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	200003f8 	.word	0x200003f8

08001e1c <HAL_TIM_IC_CaptureCallback>:
    if (htim->Instance == htim2->Instance)
        IC2_Overflow++;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim1->Instance && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d14b      	bne.n	8001eca <HAL_TIM_IC_CaptureCallback+0xae>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7f1b      	ldrb	r3, [r3, #28]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d147      	bne.n	8001eca <HAL_TIM_IC_CaptureCallback+0xae>
    {
        if (!Is1_First)
 8001e3a:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x160>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10d      	bne.n	8001e5e <HAL_TIM_IC_CaptureCallback+0x42>
        {
            IC1_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001e42:	2100      	movs	r1, #0
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f002 fdc9 	bl	80049dc <HAL_TIM_ReadCapturedValue>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a4c      	ldr	r2, [pc, #304]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x164>)
 8001e4e:	6013      	str	r3, [r2, #0]
            IC1_Overflow = 0;
 8001e50:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	801a      	strh	r2, [r3, #0]
            Is1_First = 1;
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x160>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e035      	b.n	8001eca <HAL_TIM_IC_CaptureCallback+0xae>
        }
        else
        {
            IC1_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f002 fdbb 	bl	80049dc <HAL_TIM_ReadCapturedValue>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a47      	ldr	r2, [pc, #284]	; (8001f88 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e6a:	6013      	str	r3, [r2, #0]
            uint32_t diff = (IC1_Val2 >= IC1_Val1)
 8001e6c:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x164>)
 8001e72:	681b      	ldr	r3, [r3, #0]
                            ? (IC1_Val2 - IC1_Val1 + IC1_Overflow * 0x10000)
                            : (0x10000 + IC1_Val2 - IC1_Val1 + (IC1_Overflow - 1) * 0x10000);
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d30a      	bcc.n	8001e8e <HAL_TIM_IC_CaptureCallback+0x72>
                            ? (IC1_Val2 - IC1_Val1 + IC1_Overflow * 0x10000)
 8001e78:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x164>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	4a40      	ldr	r2, [pc, #256]	; (8001f84 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001e84:	8812      	ldrh	r2, [r2, #0]
 8001e86:	b292      	uxth	r2, r2
 8001e88:	0412      	lsls	r2, r2, #16
                            : (0x10000 + IC1_Val2 - IC1_Val1 + (IC1_Overflow - 1) * 0x10000);
 8001e8a:	4413      	add	r3, r2
 8001e8c:	e00c      	b.n	8001ea8 <HAL_TIM_IC_CaptureCallback+0x8c>
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x164>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4a3a      	ldr	r2, [pc, #232]	; (8001f84 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001e9a:	8812      	ldrh	r2, [r2, #0]
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
            uint32_t diff = (IC1_Val2 >= IC1_Val1)
 8001ea8:	60fb      	str	r3, [r7, #12]
            if(diff == 2000) {
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_TIM_IC_CaptureCallback+0x9c>
            	diff = diff/2;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
            }

            Freq1 = (1000000 / diff);
 8001eb8:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001ec2:	6013      	str	r3, [r2, #0]
            Is1_First = 0;
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x160>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
        }
    }

    if (htim->Instance == htim2->Instance && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d14b      	bne.n	8001f70 <HAL_TIM_IC_CaptureCallback+0x154>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7f1b      	ldrb	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d147      	bne.n	8001f70 <HAL_TIM_IC_CaptureCallback+0x154>
    {
        if (!Is2_First)
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10d      	bne.n	8001f04 <HAL_TIM_IC_CaptureCallback+0xe8>
        {
            IC2_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001ee8:	2100      	movs	r1, #0
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f002 fd76 	bl	80049dc <HAL_TIM_ReadCapturedValue>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a2a      	ldr	r2, [pc, #168]	; (8001f9c <HAL_TIM_IC_CaptureCallback+0x180>)
 8001ef4:	6013      	str	r3, [r2, #0]
            IC2_Overflow = 0;
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	801a      	strh	r2, [r3, #0]
            Is2_First = 1;
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]

            Freq2 = (1000000 / diff);
            Is2_First = 0;
        }
    }
}
 8001f02:	e035      	b.n	8001f70 <HAL_TIM_IC_CaptureCallback+0x154>
            IC2_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001f04:	2100      	movs	r1, #0
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f002 fd68 	bl	80049dc <HAL_TIM_ReadCapturedValue>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001f10:	6013      	str	r3, [r2, #0]
            uint32_t diff = (IC2_Val2 >= IC2_Val1)
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_TIM_IC_CaptureCallback+0x180>)
 8001f18:	681b      	ldr	r3, [r3, #0]
                            : (0x10000 + IC2_Val2 - IC2_Val1 + (IC2_Overflow - 1) * 0x10000);
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d30a      	bcc.n	8001f34 <HAL_TIM_IC_CaptureCallback+0x118>
                            ? (IC2_Val2 - IC2_Val1 + IC2_Overflow * 0x10000)
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_TIM_IC_CaptureCallback+0x180>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001f2a:	8812      	ldrh	r2, [r2, #0]
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	0412      	lsls	r2, r2, #16
                            : (0x10000 + IC2_Val2 - IC2_Val1 + (IC2_Overflow - 1) * 0x10000);
 8001f30:	4413      	add	r3, r2
 8001f32:	e00c      	b.n	8001f4e <HAL_TIM_IC_CaptureCallback+0x132>
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_TIM_IC_CaptureCallback+0x180>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001f40:	8812      	ldrh	r2, [r2, #0]
 8001f42:	b292      	uxth	r2, r2
 8001f44:	3a01      	subs	r2, #1
 8001f46:	0412      	lsls	r2, r2, #16
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
            uint32_t diff = (IC2_Val2 >= IC2_Val1)
 8001f4e:	60bb      	str	r3, [r7, #8]
            	if(diff == 2000) {
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f56:	d102      	bne.n	8001f5e <HAL_TIM_IC_CaptureCallback+0x142>
                       	diff = diff/2;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	085b      	lsrs	r3, r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
            Freq2 = (1000000 / diff);
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001f68:	6013      	str	r3, [r2, #0]
            Is2_First = 0;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200003d4 	.word	0x200003d4
 8001f7c:	200003e4 	.word	0x200003e4
 8001f80:	200003dc 	.word	0x200003dc
 8001f84:	200003e6 	.word	0x200003e6
 8001f88:	200003e0 	.word	0x200003e0
 8001f8c:	000f4240 	.word	0x000f4240
 8001f90:	200003e8 	.word	0x200003e8
 8001f94:	200003d8 	.word	0x200003d8
 8001f98:	200003f4 	.word	0x200003f4
 8001f9c:	200003ec 	.word	0x200003ec
 8001fa0:	200003f6 	.word	0x200003f6
 8001fa4:	200003f0 	.word	0x200003f0
 8001fa8:	200003f8 	.word	0x200003f8

08001fac <LCD_Send>:
{
    HAL_I2C_Write(_lcd_i2c, LCD_ADDR, &data, 1, HAL_MAX_DELAY);
}

static void LCD_Send(uint8_t data, uint8_t mode)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	71fb      	strb	r3, [r7, #7]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	71bb      	strb	r3, [r7, #6]
    uint8_t high_nibble = data & 0xF0;
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f023 030f 	bic.w	r3, r3, #15
 8001fc2:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble = (data << 4) & 0xF0;
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	73bb      	strb	r3, [r7, #14]

    uint8_t data_arr[4];
    data_arr[0] = high_nibble | LCD_BACKLIGHT | mode | LCD_ENABLE;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f043 030c 	orr.w	r3, r3, #12
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	723b      	strb	r3, [r7, #8]
    data_arr[1] = high_nibble | LCD_BACKLIGHT | mode;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	727b      	strb	r3, [r7, #9]
    data_arr[2] = low_nibble  | LCD_BACKLIGHT | mode | LCD_ENABLE;
 8001fea:	7bba      	ldrb	r2, [r7, #14]
 8001fec:	79bb      	ldrb	r3, [r7, #6]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 030c 	orr.w	r3, r3, #12
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = low_nibble  | LCD_BACKLIGHT | mode;
 8001ffa:	7bba      	ldrb	r2, [r7, #14]
 8001ffc:	79bb      	ldrb	r3, [r7, #6]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	b2db      	uxtb	r3, r3
 8002008:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(_lcd_i2c, LCD_ADDR, data_arr, 4, HAL_MAX_DELAY);
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <LCD_Send+0x84>)
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	f107 0208 	add.w	r2, r7, #8
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2304      	movs	r3, #4
 800201a:	214e      	movs	r1, #78	; 0x4e
 800201c:	f000 ff26 	bl	8002e6c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8002020:	2001      	movs	r0, #1
 8002022:	f000 fa47 	bl	80024b4 <HAL_Delay>
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200003fc 	.word	0x200003fc

08002034 <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint8_t cmd)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, LCD_COMMAND);
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ffb2 	bl	8001fac <LCD_Send>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <LCD_Send_Data>:

void LCD_Send_Data(uint8_t data)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, LCD_DATA);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ffa4 	bl	8001fac <LCD_Send>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <LCD_Send_String>:

void LCD_Send_String(char *str)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    while (*str)
 8002074:	e006      	b.n	8002084 <LCD_Send_String+0x18>
    {
        LCD_Send_Data(*str++);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ffe6 	bl	8002050 <LCD_Send_Data>
    while (*str)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f4      	bne.n	8002076 <LCD_Send_String+0xa>
    }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t row, uint8_t col)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	460a      	mov	r2, r1
 80020a0:	71fb      	strb	r3, [r7, #7]
 80020a2:	4613      	mov	r3, r2
 80020a4:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? (0x80 + col) : (0xC0 + col);
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <LCD_Set_Cursor+0x1e>
 80020ac:	79bb      	ldrb	r3, [r7, #6]
 80020ae:	3b80      	subs	r3, #128	; 0x80
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e002      	b.n	80020ba <LCD_Set_Cursor+0x24>
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	3b40      	subs	r3, #64	; 0x40
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	73fb      	strb	r3, [r7, #15]
    LCD_Send_Cmd(addr);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ffb8 	bl	8002034 <LCD_Send_Cmd>
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <LCD_Clear>:

void LCD_Clear(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    LCD_Send_Cmd(0x01);  // Clear display
 80020d0:	2001      	movs	r0, #1
 80020d2:	f7ff ffaf 	bl	8002034 <LCD_Send_Cmd>
    HAL_Delay(2);
 80020d6:	2002      	movs	r0, #2
 80020d8:	f000 f9ec 	bl	80024b4 <HAL_Delay>
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *hi2c)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    _lcd_i2c = hi2c;
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <LCD_Init+0x40>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]

    HAL_Delay(50);
 80020ee:	2032      	movs	r0, #50	; 0x32
 80020f0:	f000 f9e0 	bl	80024b4 <HAL_Delay>

    // Gửi chế độ khởi tạo
    LCD_Send_Cmd(0x33);
 80020f4:	2033      	movs	r0, #51	; 0x33
 80020f6:	f7ff ff9d 	bl	8002034 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x32);  // 4-bit mode
 80020fa:	2032      	movs	r0, #50	; 0x32
 80020fc:	f7ff ff9a 	bl	8002034 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x28);  // 2 lines, 5x8 dots
 8002100:	2028      	movs	r0, #40	; 0x28
 8002102:	f7ff ff97 	bl	8002034 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x0C);  // Display ON, Cursor OFF
 8002106:	200c      	movs	r0, #12
 8002108:	f7ff ff94 	bl	8002034 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x06);  // Entry mode
 800210c:	2006      	movs	r0, #6
 800210e:	f7ff ff91 	bl	8002034 <LCD_Send_Cmd>
    LCD_Clear();
 8002112:	f7ff ffdb 	bl	80020cc <LCD_Clear>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200003fc 	.word	0x200003fc

08002124 <LCD_PrintFloat>:

void LCD_PrintFloat(uint8_t row, uint8_t col, const char *label, float value, const char *unit)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08e      	sub	sp, #56	; 0x38
 8002128:	af02      	add	r7, sp, #8
 800212a:	60ba      	str	r2, [r7, #8]
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	460b      	mov	r3, r1
 8002134:	73bb      	strb	r3, [r7, #14]
    char buffer[17];  // LCD 16x2
    char value_str[10];

    // Format giá trị float
    snprintf(value_str, sizeof(value_str), "%.1f", value);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe f976 	bl	8000428 <__aeabi_f2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	f107 0010 	add.w	r0, r7, #16
 8002144:	e9cd 2300 	strd	r2, r3, [sp]
 8002148:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <LCD_PrintFloat+0x64>)
 800214a:	210a      	movs	r1, #10
 800214c:	f004 fe74 	bl	8006e38 <sniprintf>

    // Ghép chuỗi: label + value + unit
    snprintf(buffer, sizeof(buffer), "%s%s %s", label, value_str, unit);
 8002150:	f107 001c 	add.w	r0, r7, #28
 8002154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <LCD_PrintFloat+0x68>)
 8002162:	2111      	movs	r1, #17
 8002164:	f004 fe68 	bl	8006e38 <sniprintf>

    // Set con trỏ và hiển thị
    LCD_Set_Cursor(row, col);
 8002168:	7bba      	ldrb	r2, [r7, #14]
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff91 	bl	8002096 <LCD_Set_Cursor>
    LCD_Send_String(buffer);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff77 	bl	800206c <LCD_Send_String>
}
 800217e:	bf00      	nop
 8002180:	3730      	adds	r7, #48	; 0x30
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	0800a894 	.word	0x0800a894
 800218c:	0800a89c 	.word	0x0800a89c

08002190 <UART_SendString>:
extern TIM_HandleTypeDef htim1;
// Khai báo bên ngoài của huart2
extern UART_HandleTypeDef huart2;

// Gửi chuỗi
void UART_SendString(UART_HandleTypeDef *huart, const char *str) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800219a:	6838      	ldr	r0, [r7, #0]
 800219c:	f7fd ffd8 	bl	8000150 <strlen>
 80021a0:	4603      	mov	r3, r0
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f003 f8fc 	bl	80053a8 <HAL_UART_Transmit>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <UART_StartReceive_IT>:
    sprintf(format, "%%.%df", decimal);
    sprintf(buffer, format, num);
    UART_SendString(huart, buffer);
}

void UART_StartReceive_IT(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
    uart_rx_index = 0;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <UART_StartReceive_IT+0x24>)
 80021be:	2200      	movs	r2, #0
 80021c0:	801a      	strh	r2, [r3, #0]
    memset(uart_rx_buffer, 0, UART_RX_BUFFER_SIZE);
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	2100      	movs	r1, #0
 80021c6:	4806      	ldr	r0, [pc, #24]	; (80021e0 <UART_StartReceive_IT+0x28>)
 80021c8:	f004 fecd 	bl	8006f66 <memset>
    HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 80021cc:	2201      	movs	r2, #1
 80021ce:	4905      	ldr	r1, [pc, #20]	; (80021e4 <UART_StartReceive_IT+0x2c>)
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <UART_StartReceive_IT+0x30>)
 80021d2:	f003 f974 	bl	80054be <HAL_UART_Receive_IT>
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000442 	.word	0x20000442
 80021e0:	20000400 	.word	0x20000400
 80021e4:	20000440 	.word	0x20000440
 80021e8:	20000364 	.word	0x20000364

080021ec <event_queue_push>:

// Khai báo queue toàn cục (hoặc extern nếu dùng chung nhiều file)
extern EventQueue uart_event_queue;

// Hàm đẩy sự kiện vào queue
void event_queue_push(EventQueue *q, EventType event) {
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
    uint8_t next = (q->tail + 1) % EVENT_QUEUE_SIZE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7adb      	ldrb	r3, [r3, #11]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <event_queue_push+0x54>)
 8002200:	fb83 1302 	smull	r1, r3, r3, r2
 8002204:	1099      	asrs	r1, r3, #2
 8002206:	17d3      	asrs	r3, r2, #31
 8002208:	1ac9      	subs	r1, r1, r3
 800220a:	460b      	mov	r3, r1
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	1ad1      	subs	r1, r2, r3
 8002214:	460b      	mov	r3, r1
 8002216:	73fb      	strb	r3, [r7, #15]
    if (next != q->head) { // tránh tràn queue
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7a9b      	ldrb	r3, [r3, #10]
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	429a      	cmp	r2, r3
 8002220:	d008      	beq.n	8002234 <event_queue_push+0x48>
        q->buffer[q->tail] = event;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7adb      	ldrb	r3, [r3, #11]
 8002226:	4619      	mov	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	545a      	strb	r2, [r3, r1]
        q->tail = next;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	72da      	strb	r2, [r3, #11]
    }
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	66666667 	.word	0x66666667

08002244 <event_queue_pop>:

// Hàm lấy sự kiện ra khỏi queue
EventType event_queue_pop(EventQueue *q) {
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    if (q->head == q->tail) return EVENT_NONE; // queue rỗng
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7a9a      	ldrb	r2, [r3, #10]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7adb      	ldrb	r3, [r3, #11]
 8002254:	429a      	cmp	r2, r3
 8002256:	d101      	bne.n	800225c <event_queue_pop+0x18>
 8002258:	2300      	movs	r3, #0
 800225a:	e017      	b.n	800228c <event_queue_pop+0x48>
    EventType event = q->buffer[q->head];
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7a9b      	ldrb	r3, [r3, #10]
 8002260:	461a      	mov	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	5c9b      	ldrb	r3, [r3, r2]
 8002266:	73fb      	strb	r3, [r7, #15]
    q->head = (q->head + 1) % EVENT_QUEUE_SIZE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7a9b      	ldrb	r3, [r3, #10]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <event_queue_pop+0x54>)
 8002270:	fb83 1302 	smull	r1, r3, r3, r2
 8002274:	1099      	asrs	r1, r3, #2
 8002276:	17d3      	asrs	r3, r2, #31
 8002278:	1ac9      	subs	r1, r1, r3
 800227a:	460b      	mov	r3, r1
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	1ad1      	subs	r1, r2, r3
 8002284:	b2ca      	uxtb	r2, r1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	729a      	strb	r2, [r3, #10]
    return event;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	66666667 	.word	0x66666667

0800229c <HAL_UART_RxCpltCallback>:

// Hàm callback ngắt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_UART_RxCpltCallback+0x74>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12c      	bne.n	8002308 <HAL_UART_RxCpltCallback+0x6c>
        if (uart_rx_index < UART_RX_BUFFER_SIZE - 1) {
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_UART_RxCpltCallback+0x78>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	2b3e      	cmp	r3, #62	; 0x3e
 80022b4:	d820      	bhi.n	80022f8 <HAL_UART_RxCpltCallback+0x5c>
            uart_rx_buffer[uart_rx_index++] = uart_rx_data;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_UART_RxCpltCallback+0x78>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	b291      	uxth	r1, r2
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_UART_RxCpltCallback+0x78>)
 80022c0:	8011      	strh	r1, [r2, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_UART_RxCpltCallback+0x7c>)
 80022c6:	7819      	ldrb	r1, [r3, #0]
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_UART_RxCpltCallback+0x80>)
 80022ca:	5499      	strb	r1, [r3, r2]

            if (uart_rx_data == '.') {
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_UART_RxCpltCallback+0x7c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b2e      	cmp	r3, #46	; 0x2e
 80022d2:	d114      	bne.n	80022fe <HAL_UART_RxCpltCallback+0x62>
                uart_rx_buffer[uart_rx_index] = '\0';
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_UART_RxCpltCallback+0x78>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_UART_RxCpltCallback+0x80>)
 80022dc:	2100      	movs	r1, #0
 80022de:	5499      	strb	r1, [r3, r2]
                UART_ProcessReceivedData((char *)uart_rx_buffer);
 80022e0:	480e      	ldr	r0, [pc, #56]	; (800231c <HAL_UART_RxCpltCallback+0x80>)
 80022e2:	f000 f81f 	bl	8002324 <UART_ProcessReceivedData>
                uart_rx_index = 0;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_UART_RxCpltCallback+0x78>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	801a      	strh	r2, [r3, #0]
                memset(uart_rx_buffer, 0, UART_RX_BUFFER_SIZE);
 80022ec:	2240      	movs	r2, #64	; 0x40
 80022ee:	2100      	movs	r1, #0
 80022f0:	480a      	ldr	r0, [pc, #40]	; (800231c <HAL_UART_RxCpltCallback+0x80>)
 80022f2:	f004 fe38 	bl	8006f66 <memset>
 80022f6:	e002      	b.n	80022fe <HAL_UART_RxCpltCallback+0x62>
            }
        } else {
            uart_rx_index = 0; // Reset nếu tràn buffer
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_UART_RxCpltCallback+0x78>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	801a      	strh	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1); // Tiếp tục nhận
 80022fe:	2201      	movs	r2, #1
 8002300:	4905      	ldr	r1, [pc, #20]	; (8002318 <HAL_UART_RxCpltCallback+0x7c>)
 8002302:	4807      	ldr	r0, [pc, #28]	; (8002320 <HAL_UART_RxCpltCallback+0x84>)
 8002304:	f003 f8db 	bl	80054be <HAL_UART_Receive_IT>
    }
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40004400 	.word	0x40004400
 8002314:	20000442 	.word	0x20000442
 8002318:	20000440 	.word	0x20000440
 800231c:	20000400 	.word	0x20000400
 8002320:	20000364 	.word	0x20000364

08002324 <UART_ProcessReceivedData>:

// Hàm xử lý dữ liệu nhận được và đẩy vào queue
void UART_ProcessReceivedData(char *data) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    // Dữ liệu dạng: "task: uart." hoặc "task: lcd." ...
    if (strncmp(data, "task: uart.", 11) == 0) {
 800232c:	220b      	movs	r2, #11
 800232e:	4925      	ldr	r1, [pc, #148]	; (80023c4 <UART_ProcessReceivedData+0xa0>)
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f004 fe20 	bl	8006f76 <strncmp>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d108      	bne.n	800234e <UART_ProcessReceivedData+0x2a>
        event_queue_push(&uart_event_queue, EVENT_UART);
 800233c:	2101      	movs	r1, #1
 800233e:	4822      	ldr	r0, [pc, #136]	; (80023c8 <UART_ProcessReceivedData+0xa4>)
 8002340:	f7ff ff54 	bl	80021ec <event_queue_push>
        UART_SendString(&huart2, "Queued: UART event\r\n");
 8002344:	4921      	ldr	r1, [pc, #132]	; (80023cc <UART_ProcessReceivedData+0xa8>)
 8002346:	4822      	ldr	r0, [pc, #136]	; (80023d0 <UART_ProcessReceivedData+0xac>)
 8002348:	f7ff ff22 	bl	8002190 <UART_SendString>
        event_queue_push(&uart_event_queue, EVENT_FREQ);
        UART_SendString(&huart2, "Queued: FREQ event\r\n");
    } else {
        UART_SendString(&huart2, "Invalid command format.\r\n");
    }
}
 800234c:	e036      	b.n	80023bc <UART_ProcessReceivedData+0x98>
    } else if (strncmp(data, "task: lcd.", 10) == 0) {
 800234e:	220a      	movs	r2, #10
 8002350:	4920      	ldr	r1, [pc, #128]	; (80023d4 <UART_ProcessReceivedData+0xb0>)
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f004 fe0f 	bl	8006f76 <strncmp>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <UART_ProcessReceivedData+0x4c>
        event_queue_push(&uart_event_queue, EVENT_LCD);
 800235e:	2102      	movs	r1, #2
 8002360:	4819      	ldr	r0, [pc, #100]	; (80023c8 <UART_ProcessReceivedData+0xa4>)
 8002362:	f7ff ff43 	bl	80021ec <event_queue_push>
        UART_SendString(&huart2, "Queued: LCD event\r\n");
 8002366:	491c      	ldr	r1, [pc, #112]	; (80023d8 <UART_ProcessReceivedData+0xb4>)
 8002368:	4819      	ldr	r0, [pc, #100]	; (80023d0 <UART_ProcessReceivedData+0xac>)
 800236a:	f7ff ff11 	bl	8002190 <UART_SendString>
}
 800236e:	e025      	b.n	80023bc <UART_ProcessReceivedData+0x98>
    } else if (strncmp(data, "task: temp.", 11) == 0) {
 8002370:	220b      	movs	r2, #11
 8002372:	491a      	ldr	r1, [pc, #104]	; (80023dc <UART_ProcessReceivedData+0xb8>)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f004 fdfe 	bl	8006f76 <strncmp>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d108      	bne.n	8002392 <UART_ProcessReceivedData+0x6e>
        event_queue_push(&uart_event_queue, EVENT_TEMP);
 8002380:	2103      	movs	r1, #3
 8002382:	4811      	ldr	r0, [pc, #68]	; (80023c8 <UART_ProcessReceivedData+0xa4>)
 8002384:	f7ff ff32 	bl	80021ec <event_queue_push>
        UART_SendString(&huart2, "Queued: TEMP event\r\n");
 8002388:	4915      	ldr	r1, [pc, #84]	; (80023e0 <UART_ProcessReceivedData+0xbc>)
 800238a:	4811      	ldr	r0, [pc, #68]	; (80023d0 <UART_ProcessReceivedData+0xac>)
 800238c:	f7ff ff00 	bl	8002190 <UART_SendString>
}
 8002390:	e014      	b.n	80023bc <UART_ProcessReceivedData+0x98>
    } else if (strncmp(data, "task: fre.", 10) == 0) {
 8002392:	220a      	movs	r2, #10
 8002394:	4913      	ldr	r1, [pc, #76]	; (80023e4 <UART_ProcessReceivedData+0xc0>)
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f004 fded 	bl	8006f76 <strncmp>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <UART_ProcessReceivedData+0x90>
        event_queue_push(&uart_event_queue, EVENT_FREQ);
 80023a2:	2104      	movs	r1, #4
 80023a4:	4808      	ldr	r0, [pc, #32]	; (80023c8 <UART_ProcessReceivedData+0xa4>)
 80023a6:	f7ff ff21 	bl	80021ec <event_queue_push>
        UART_SendString(&huart2, "Queued: FREQ event\r\n");
 80023aa:	490f      	ldr	r1, [pc, #60]	; (80023e8 <UART_ProcessReceivedData+0xc4>)
 80023ac:	4808      	ldr	r0, [pc, #32]	; (80023d0 <UART_ProcessReceivedData+0xac>)
 80023ae:	f7ff feef 	bl	8002190 <UART_SendString>
}
 80023b2:	e003      	b.n	80023bc <UART_ProcessReceivedData+0x98>
        UART_SendString(&huart2, "Invalid command format.\r\n");
 80023b4:	490d      	ldr	r1, [pc, #52]	; (80023ec <UART_ProcessReceivedData+0xc8>)
 80023b6:	4806      	ldr	r0, [pc, #24]	; (80023d0 <UART_ProcessReceivedData+0xac>)
 80023b8:	f7ff feea 	bl	8002190 <UART_SendString>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	0800a8b0 	.word	0x0800a8b0
 80023c8:	200003c0 	.word	0x200003c0
 80023cc:	0800a8bc 	.word	0x0800a8bc
 80023d0:	20000364 	.word	0x20000364
 80023d4:	0800a8d4 	.word	0x0800a8d4
 80023d8:	0800a8e0 	.word	0x0800a8e0
 80023dc:	0800a8f4 	.word	0x0800a8f4
 80023e0:	0800a900 	.word	0x0800a900
 80023e4:	0800a918 	.word	0x0800a918
 80023e8:	0800a924 	.word	0x0800a924
 80023ec:	0800a93c 	.word	0x0800a93c

080023f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_Init+0x28>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_Init+0x28>)
 80023fa:	f043 0310 	orr.w	r3, r3, #16
 80023fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002400:	2003      	movs	r0, #3
 8002402:	f000 f947 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002406:	200f      	movs	r0, #15
 8002408:	f000 f808 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800240c:	f7ff f888 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x54>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_InitTick+0x58>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002432:	fbb3 f3f1 	udiv	r3, r3, r1
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f95f 	bl	80026fe <HAL_SYSTICK_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00e      	b.n	8002468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d80a      	bhi.n	8002466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002450:	2200      	movs	r2, #0
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f000 f927 	bl	80026aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <HAL_InitTick+0x5c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000000 	.word	0x20000000
 8002474:	20000008 	.word	0x20000008
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_IncTick+0x1c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_IncTick+0x20>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a03      	ldr	r2, [pc, #12]	; (800249c <HAL_IncTick+0x20>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	20000008 	.word	0x20000008
 800249c:	20000444 	.word	0x20000444

080024a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b02      	ldr	r3, [pc, #8]	; (80024b0 <HAL_GetTick+0x10>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000444 	.word	0x20000444

080024b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff fff0 	bl	80024a0 <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d005      	beq.n	80024da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_Delay+0x44>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024da:	bf00      	nop
 80024dc:	f7ff ffe0 	bl	80024a0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d8f7      	bhi.n	80024dc <HAL_Delay+0x28>
  {
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000008 	.word	0x20000008

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4906      	ldr	r1, [pc, #24]	; (8002594 <__NVIC_EnableIRQ+0x34>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	; (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002660:	d301      	bcc.n	8002666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2301      	movs	r3, #1
 8002664:	e00f      	b.n	8002686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <SysTick_Config+0x40>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266e:	210f      	movs	r1, #15
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f7ff ff90 	bl	8002598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <SysTick_Config+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <SysTick_Config+0x40>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000e010 	.word	0xe000e010

08002694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff2d 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026bc:	f7ff ff42 	bl	8002544 <__NVIC_GetPriorityGrouping>
 80026c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	f7ff ff90 	bl	80025ec <NVIC_EncodePriority>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff5f 	bl	8002598 <__NVIC_SetPriority>
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff35 	bl	8002560 <__NVIC_EnableIRQ>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ffa2 	bl	8002650 <SysTick_Config>
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d008      	beq.n	8002740 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2204      	movs	r2, #4
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e020      	b.n	8002782 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 020e 	bic.w	r2, r2, #14
 800274e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f202 	lsl.w	r2, r1, r2
 800276e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d005      	beq.n	80027b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2204      	movs	r2, #4
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	e051      	b.n	8002854 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 020e 	bic.w	r2, r2, #14
 80027be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a22      	ldr	r2, [pc, #136]	; (8002860 <HAL_DMA_Abort_IT+0xd4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d029      	beq.n	800282e <HAL_DMA_Abort_IT+0xa2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <HAL_DMA_Abort_IT+0xd8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d022      	beq.n	800282a <HAL_DMA_Abort_IT+0x9e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <HAL_DMA_Abort_IT+0xdc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01a      	beq.n	8002824 <HAL_DMA_Abort_IT+0x98>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_DMA_Abort_IT+0xe0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d012      	beq.n	800281e <HAL_DMA_Abort_IT+0x92>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_DMA_Abort_IT+0xe4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00a      	beq.n	8002818 <HAL_DMA_Abort_IT+0x8c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <HAL_DMA_Abort_IT+0xe8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d102      	bne.n	8002812 <HAL_DMA_Abort_IT+0x86>
 800280c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002810:	e00e      	b.n	8002830 <HAL_DMA_Abort_IT+0xa4>
 8002812:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002816:	e00b      	b.n	8002830 <HAL_DMA_Abort_IT+0xa4>
 8002818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800281c:	e008      	b.n	8002830 <HAL_DMA_Abort_IT+0xa4>
 800281e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002822:	e005      	b.n	8002830 <HAL_DMA_Abort_IT+0xa4>
 8002824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002828:	e002      	b.n	8002830 <HAL_DMA_Abort_IT+0xa4>
 800282a:	2310      	movs	r3, #16
 800282c:	e000      	b.n	8002830 <HAL_DMA_Abort_IT+0xa4>
 800282e:	2301      	movs	r3, #1
 8002830:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_DMA_Abort_IT+0xec>)
 8002832:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
    } 
  }
  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40020008 	.word	0x40020008
 8002864:	4002001c 	.word	0x4002001c
 8002868:	40020030 	.word	0x40020030
 800286c:	40020044 	.word	0x40020044
 8002870:	40020058 	.word	0x40020058
 8002874:	4002006c 	.word	0x4002006c
 8002878:	40020000 	.word	0x40020000

0800287c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800287c:	b480      	push	{r7}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	e169      	b.n	8002b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002890:	2201      	movs	r2, #1
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 8158 	bne.w	8002b5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a9a      	ldr	r2, [pc, #616]	; (8002b1c <HAL_GPIO_Init+0x2a0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d05e      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028b8:	4a98      	ldr	r2, [pc, #608]	; (8002b1c <HAL_GPIO_Init+0x2a0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d875      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028be:	4a98      	ldr	r2, [pc, #608]	; (8002b20 <HAL_GPIO_Init+0x2a4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d058      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028c4:	4a96      	ldr	r2, [pc, #600]	; (8002b20 <HAL_GPIO_Init+0x2a4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d86f      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028ca:	4a96      	ldr	r2, [pc, #600]	; (8002b24 <HAL_GPIO_Init+0x2a8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d052      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028d0:	4a94      	ldr	r2, [pc, #592]	; (8002b24 <HAL_GPIO_Init+0x2a8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d869      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028d6:	4a94      	ldr	r2, [pc, #592]	; (8002b28 <HAL_GPIO_Init+0x2ac>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04c      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028dc:	4a92      	ldr	r2, [pc, #584]	; (8002b28 <HAL_GPIO_Init+0x2ac>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d863      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028e2:	4a92      	ldr	r2, [pc, #584]	; (8002b2c <HAL_GPIO_Init+0x2b0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d046      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028e8:	4a90      	ldr	r2, [pc, #576]	; (8002b2c <HAL_GPIO_Init+0x2b0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d85d      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028ee:	2b12      	cmp	r3, #18
 80028f0:	d82a      	bhi.n	8002948 <HAL_GPIO_Init+0xcc>
 80028f2:	2b12      	cmp	r3, #18
 80028f4:	d859      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028f6:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_GPIO_Init+0x80>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002977 	.word	0x08002977
 8002900:	08002951 	.word	0x08002951
 8002904:	08002963 	.word	0x08002963
 8002908:	080029a5 	.word	0x080029a5
 800290c:	080029ab 	.word	0x080029ab
 8002910:	080029ab 	.word	0x080029ab
 8002914:	080029ab 	.word	0x080029ab
 8002918:	080029ab 	.word	0x080029ab
 800291c:	080029ab 	.word	0x080029ab
 8002920:	080029ab 	.word	0x080029ab
 8002924:	080029ab 	.word	0x080029ab
 8002928:	080029ab 	.word	0x080029ab
 800292c:	080029ab 	.word	0x080029ab
 8002930:	080029ab 	.word	0x080029ab
 8002934:	080029ab 	.word	0x080029ab
 8002938:	080029ab 	.word	0x080029ab
 800293c:	080029ab 	.word	0x080029ab
 8002940:	08002959 	.word	0x08002959
 8002944:	0800296d 	.word	0x0800296d
 8002948:	4a79      	ldr	r2, [pc, #484]	; (8002b30 <HAL_GPIO_Init+0x2b4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800294e:	e02c      	b.n	80029aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e029      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	3304      	adds	r3, #4
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e024      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	3308      	adds	r3, #8
 8002968:	623b      	str	r3, [r7, #32]
          break;
 800296a:	e01f      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	330c      	adds	r3, #12
 8002972:	623b      	str	r3, [r7, #32]
          break;
 8002974:	e01a      	b.n	80029ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800297e:	2304      	movs	r3, #4
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e013      	b.n	80029ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800298c:	2308      	movs	r3, #8
 800298e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	611a      	str	r2, [r3, #16]
          break;
 8002996:	e009      	b.n	80029ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002998:	2308      	movs	r3, #8
 800299a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	615a      	str	r2, [r3, #20]
          break;
 80029a2:	e003      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
          break;
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x130>
          break;
 80029aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d801      	bhi.n	80029b6 <HAL_GPIO_Init+0x13a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	e001      	b.n	80029ba <HAL_GPIO_Init+0x13e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2bff      	cmp	r3, #255	; 0xff
 80029c0:	d802      	bhi.n	80029c8 <HAL_GPIO_Init+0x14c>
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	e002      	b.n	80029ce <HAL_GPIO_Init+0x152>
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3b08      	subs	r3, #8
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	210f      	movs	r1, #15
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	6a39      	ldr	r1, [r7, #32]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80b1 	beq.w	8002b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029fc:	4b4d      	ldr	r3, [pc, #308]	; (8002b34 <HAL_GPIO_Init+0x2b8>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	4a4c      	ldr	r2, [pc, #304]	; (8002b34 <HAL_GPIO_Init+0x2b8>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6193      	str	r3, [r2, #24]
 8002a08:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_GPIO_Init+0x2b8>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a14:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <HAL_GPIO_Init+0x2bc>)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <HAL_GPIO_Init+0x2c0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_GPIO_Init+0x1ec>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3f      	ldr	r2, [pc, #252]	; (8002b40 <HAL_GPIO_Init+0x2c4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00d      	beq.n	8002a64 <HAL_GPIO_Init+0x1e8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3e      	ldr	r2, [pc, #248]	; (8002b44 <HAL_GPIO_Init+0x2c8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <HAL_GPIO_Init+0x1e4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3d      	ldr	r2, [pc, #244]	; (8002b48 <HAL_GPIO_Init+0x2cc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_GPIO_Init+0x1e0>
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e006      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e004      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e002      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	f002 0203 	and.w	r2, r2, #3
 8002a70:	0092      	lsls	r2, r2, #2
 8002a72:	4093      	lsls	r3, r2
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a7a:	492f      	ldr	r1, [pc, #188]	; (8002b38 <HAL_GPIO_Init+0x2bc>)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3302      	adds	r3, #2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a94:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	492c      	ldr	r1, [pc, #176]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aa2:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	4928      	ldr	r1, [pc, #160]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	4922      	ldr	r1, [pc, #136]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60cb      	str	r3, [r1, #12]
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	491e      	ldr	r1, [pc, #120]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4918      	ldr	r1, [pc, #96]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4914      	ldr	r1, [pc, #80]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d021      	beq.n	8002b50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	490e      	ldr	r1, [pc, #56]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	e021      	b.n	8002b5e <HAL_GPIO_Init+0x2e2>
 8002b1a:	bf00      	nop
 8002b1c:	10320000 	.word	0x10320000
 8002b20:	10310000 	.word	0x10310000
 8002b24:	10220000 	.word	0x10220000
 8002b28:	10210000 	.word	0x10210000
 8002b2c:	10120000 	.word	0x10120000
 8002b30:	10110000 	.word	0x10110000
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40010800 	.word	0x40010800
 8002b40:	40010c00 	.word	0x40010c00
 8002b44:	40011000 	.word	0x40011000
 8002b48:	40011400 	.word	0x40011400
 8002b4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_GPIO_Init+0x304>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4909      	ldr	r1, [pc, #36]	; (8002b80 <HAL_GPIO_Init+0x304>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	3301      	adds	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f47f ae8e 	bne.w	8002890 <HAL_GPIO_Init+0x14>
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	372c      	adds	r7, #44	; 0x2c
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	40010400 	.word	0x40010400

08002b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e001      	b.n	8002ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	807b      	strh	r3, [r7, #2]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc2:	787b      	ldrb	r3, [r7, #1]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc8:	887a      	ldrh	r2, [r7, #2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bce:	e003      	b.n	8002bd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bd0:	887b      	ldrh	r3, [r7, #2]
 8002bd2:	041a      	lsls	r2, r3, #16
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	611a      	str	r2, [r3, #16]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e12b      	b.n	8002e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe fcba 	bl	8001584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	; 0x24
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c48:	f001 f832 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8002c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a81      	ldr	r2, [pc, #516]	; (8002e58 <HAL_I2C_Init+0x274>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d807      	bhi.n	8002c68 <HAL_I2C_Init+0x84>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a80      	ldr	r2, [pc, #512]	; (8002e5c <HAL_I2C_Init+0x278>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bf94      	ite	ls
 8002c60:	2301      	movls	r3, #1
 8002c62:	2300      	movhi	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e006      	b.n	8002c76 <HAL_I2C_Init+0x92>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a7d      	ldr	r2, [pc, #500]	; (8002e60 <HAL_I2C_Init+0x27c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0e7      	b.n	8002e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a78      	ldr	r2, [pc, #480]	; (8002e64 <HAL_I2C_Init+0x280>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0c9b      	lsrs	r3, r3, #18
 8002c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a6a      	ldr	r2, [pc, #424]	; (8002e58 <HAL_I2C_Init+0x274>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_I2C_Init+0xd4>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e009      	b.n	8002ccc <HAL_I2C_Init+0xe8>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	4a69      	ldr	r2, [pc, #420]	; (8002e68 <HAL_I2C_Init+0x284>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	3301      	adds	r3, #1
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	495c      	ldr	r1, [pc, #368]	; (8002e58 <HAL_I2C_Init+0x274>)
 8002ce8:	428b      	cmp	r3, r1
 8002cea:	d819      	bhi.n	8002d20 <HAL_I2C_Init+0x13c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e59      	subs	r1, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d00:	400b      	ands	r3, r1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_I2C_Init+0x138>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1e59      	subs	r1, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1a:	e051      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	e04f      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d111      	bne.n	8002d4c <HAL_I2C_Init+0x168>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	440b      	add	r3, r1
 8002d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e012      	b.n	8002d72 <HAL_I2C_Init+0x18e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	0099      	lsls	r1, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Init+0x196>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e022      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10e      	bne.n	8002da0 <HAL_I2C_Init+0x1bc>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e58      	subs	r0, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	440b      	add	r3, r1
 8002d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9e:	e00f      	b.n	8002dc0 <HAL_I2C_Init+0x1dc>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	6809      	ldr	r1, [r1, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6911      	ldr	r1, [r2, #16]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	000186a0 	.word	0x000186a0
 8002e5c:	001e847f 	.word	0x001e847f
 8002e60:	003d08ff 	.word	0x003d08ff
 8002e64:	431bde83 	.word	0x431bde83
 8002e68:	10624dd3 	.word	0x10624dd3

08002e6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	461a      	mov	r2, r3
 8002e78:	460b      	mov	r3, r1
 8002e7a:	817b      	strh	r3, [r7, #10]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff fb0e 	bl	80024a0 <HAL_GetTick>
 8002e84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	f040 80e0 	bne.w	8003054 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2319      	movs	r3, #25
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4970      	ldr	r1, [pc, #448]	; (8003060 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f964 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0d3      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2C_Master_Transmit+0x50>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0cc      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d007      	beq.n	8002ee2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2221      	movs	r2, #33	; 0x21
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2210      	movs	r2, #16
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	893a      	ldrh	r2, [r7, #8]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a50      	ldr	r2, [pc, #320]	; (8003064 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f24:	8979      	ldrh	r1, [r7, #10]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f89c 	bl	8003068 <I2C_MasterRequestWrite>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e08d      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f50:	e066      	b.n	8003020 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	6a39      	ldr	r1, [r7, #32]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fa22 	bl	80033a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d107      	bne.n	8002f7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06b      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d11b      	bne.n	8002ff4 <HAL_I2C_Master_Transmit+0x188>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d017      	beq.n	8002ff4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	6a39      	ldr	r1, [r7, #32]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fa19 	bl	8003430 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b04      	cmp	r3, #4
 800300a:	d107      	bne.n	800301c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e01a      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	d194      	bne.n	8002f52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	00100002 	.word	0x00100002
 8003064:	ffff0000 	.word	0xffff0000

08003068 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	460b      	mov	r3, r1
 8003076:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d006      	beq.n	8003092 <I2C_MasterRequestWrite+0x2a>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d003      	beq.n	8003092 <I2C_MasterRequestWrite+0x2a>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003090:	d108      	bne.n	80030a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e00b      	b.n	80030bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	2b12      	cmp	r3, #18
 80030aa:	d107      	bne.n	80030bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f84f 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00d      	beq.n	80030f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e2:	d103      	bne.n	80030ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e035      	b.n	800315c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f8:	d108      	bne.n	800310c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fa:	897b      	ldrh	r3, [r7, #10]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	e01b      	b.n	8003144 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800310c:	897b      	ldrh	r3, [r7, #10]
 800310e:	11db      	asrs	r3, r3, #7
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 0306 	and.w	r3, r3, #6
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f063 030f 	orn	r3, r3, #15
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	490e      	ldr	r1, [pc, #56]	; (8003164 <I2C_MasterRequestWrite+0xfc>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f898 	bl	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e010      	b.n	800315c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4907      	ldr	r1, [pc, #28]	; (8003168 <I2C_MasterRequestWrite+0x100>)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f888 	bl	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	00010008 	.word	0x00010008
 8003168:	00010002 	.word	0x00010002

0800316c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317c:	e048      	b.n	8003210 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d044      	beq.n	8003210 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7ff f98b 	bl	80024a0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d139      	bne.n	8003210 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	0c1b      	lsrs	r3, r3, #16
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d10d      	bne.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	e00c      	b.n	80031dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	43da      	mvns	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4013      	ands	r3, r2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d116      	bne.n	8003210 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e023      	b.n	8003258 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	0c1b      	lsrs	r3, r3, #16
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10d      	bne.n	8003236 <I2C_WaitOnFlagUntilTimeout+0xca>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	43da      	mvns	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4013      	ands	r3, r2
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	e00c      	b.n	8003250 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	43da      	mvns	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4013      	ands	r3, r2
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	429a      	cmp	r2, r3
 8003254:	d093      	beq.n	800317e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800326e:	e071      	b.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d123      	bne.n	80032c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003298:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f043 0204 	orr.w	r2, r3, #4
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e067      	b.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	d041      	beq.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d0:	f7ff f8e6 	bl	80024a0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d302      	bcc.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d136      	bne.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d10c      	bne.n	800330a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e00b      	b.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	43da      	mvns	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	4013      	ands	r3, r2
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e021      	b.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d10c      	bne.n	8003378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e00b      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f af6d 	bne.w	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ac:	e034      	b.n	8003418 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f886 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e034      	b.n	8003428 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d028      	beq.n	8003418 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c6:	f7ff f86b 	bl	80024a0 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d302      	bcc.n	80033dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d11d      	bne.n	8003418 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b80      	cmp	r3, #128	; 0x80
 80033e8:	d016      	beq.n	8003418 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e007      	b.n	8003428 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d1c3      	bne.n	80033ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800343c:	e034      	b.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f83e 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e034      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d028      	beq.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003456:	f7ff f823 	bl	80024a0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	d302      	bcc.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d11d      	bne.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b04      	cmp	r3, #4
 8003478:	d016      	beq.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e007      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d1c3      	bne.n	800343e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d6:	d11b      	bne.n	8003510 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e272      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8087 	beq.w	800364a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800353c:	4b92      	ldr	r3, [pc, #584]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b04      	cmp	r3, #4
 8003546:	d00c      	beq.n	8003562 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003548:	4b8f      	ldr	r3, [pc, #572]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b08      	cmp	r3, #8
 8003552:	d112      	bne.n	800357a <HAL_RCC_OscConfig+0x5e>
 8003554:	4b8c      	ldr	r3, [pc, #560]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d10b      	bne.n	800357a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003562:	4b89      	ldr	r3, [pc, #548]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d06c      	beq.n	8003648 <HAL_RCC_OscConfig+0x12c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d168      	bne.n	8003648 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e24c      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x76>
 8003584:	4b80      	ldr	r3, [pc, #512]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a7f      	ldr	r2, [pc, #508]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800358a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	e02e      	b.n	80035f0 <HAL_RCC_OscConfig+0xd4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x98>
 800359a:	4b7b      	ldr	r3, [pc, #492]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7a      	ldr	r2, [pc, #488]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b78      	ldr	r3, [pc, #480]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a77      	ldr	r2, [pc, #476]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e01d      	b.n	80035f0 <HAL_RCC_OscConfig+0xd4>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0xbc>
 80035be:	4b72      	ldr	r3, [pc, #456]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a71      	ldr	r2, [pc, #452]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6e      	ldr	r2, [pc, #440]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0xd4>
 80035d8:	4b6b      	ldr	r3, [pc, #428]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6a      	ldr	r2, [pc, #424]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a67      	ldr	r2, [pc, #412]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe ff52 	bl	80024a0 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe ff4e 	bl	80024a0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e200      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b5d      	ldr	r3, [pc, #372]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0xe4>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe ff3e 	bl	80024a0 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe ff3a 	bl	80024a0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1ec      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	4b53      	ldr	r3, [pc, #332]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x10c>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d063      	beq.n	800371e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003656:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003662:	4b49      	ldr	r3, [pc, #292]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d11c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x18c>
 800366e:	4b46      	ldr	r3, [pc, #280]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	4b43      	ldr	r3, [pc, #268]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_RCC_OscConfig+0x176>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e1c0      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4939      	ldr	r1, [pc, #228]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a6:	e03a      	b.n	800371e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_OscConfig+0x270>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fe fef3 	bl	80024a0 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036be:	f7fe feef 	bl	80024a0 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1a1      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4927      	ldr	r1, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e015      	b.n	800371e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f2:	4b26      	ldr	r3, [pc, #152]	; (800378c <HAL_RCC_OscConfig+0x270>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe fed2 	bl	80024a0 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003700:	f7fe fece 	bl	80024a0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e180      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d03a      	beq.n	80037a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d019      	beq.n	8003766 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <HAL_RCC_OscConfig+0x274>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7fe feb2 	bl	80024a0 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003740:	f7fe feae 	bl	80024a0 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e160      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <HAL_RCC_OscConfig+0x26c>)
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800375e:	2001      	movs	r0, #1
 8003760:	f000 face 	bl	8003d00 <RCC_Delay>
 8003764:	e01c      	b.n	80037a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_RCC_OscConfig+0x274>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376c:	f7fe fe98 	bl	80024a0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003772:	e00f      	b.n	8003794 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003774:	f7fe fe94 	bl	80024a0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d908      	bls.n	8003794 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e146      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
 800378c:	42420000 	.word	0x42420000
 8003790:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	4b92      	ldr	r3, [pc, #584]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e9      	bne.n	8003774 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a6 	beq.w	80038fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b2:	4b8b      	ldr	r3, [pc, #556]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10d      	bne.n	80037da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4a87      	ldr	r2, [pc, #540]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	61d3      	str	r3, [r2, #28]
 80037ca:	4b85      	ldr	r3, [pc, #532]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b82      	ldr	r3, [pc, #520]	; (80039e4 <HAL_RCC_OscConfig+0x4c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d118      	bne.n	8003818 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e6:	4b7f      	ldr	r3, [pc, #508]	; (80039e4 <HAL_RCC_OscConfig+0x4c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7e      	ldr	r2, [pc, #504]	; (80039e4 <HAL_RCC_OscConfig+0x4c8>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7fe fe55 	bl	80024a0 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7fe fe51 	bl	80024a0 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b64      	cmp	r3, #100	; 0x64
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e103      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	4b75      	ldr	r3, [pc, #468]	; (80039e4 <HAL_RCC_OscConfig+0x4c8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x312>
 8003820:	4b6f      	ldr	r3, [pc, #444]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4a6e      	ldr	r2, [pc, #440]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6213      	str	r3, [r2, #32]
 800382c:	e02d      	b.n	800388a <HAL_RCC_OscConfig+0x36e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x334>
 8003836:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4a69      	ldr	r2, [pc, #420]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6213      	str	r3, [r2, #32]
 8003842:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4a66      	ldr	r2, [pc, #408]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	f023 0304 	bic.w	r3, r3, #4
 800384c:	6213      	str	r3, [r2, #32]
 800384e:	e01c      	b.n	800388a <HAL_RCC_OscConfig+0x36e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b05      	cmp	r3, #5
 8003856:	d10c      	bne.n	8003872 <HAL_RCC_OscConfig+0x356>
 8003858:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4a60      	ldr	r2, [pc, #384]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	6213      	str	r3, [r2, #32]
 8003864:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a5d      	ldr	r2, [pc, #372]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	e00b      	b.n	800388a <HAL_RCC_OscConfig+0x36e>
 8003872:	4b5b      	ldr	r3, [pc, #364]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a5a      	ldr	r2, [pc, #360]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6213      	str	r3, [r2, #32]
 800387e:	4b58      	ldr	r3, [pc, #352]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a57      	ldr	r2, [pc, #348]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d015      	beq.n	80038be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7fe fe05 	bl	80024a0 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe fe01 	bl	80024a0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0b1      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	4b4b      	ldr	r3, [pc, #300]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ee      	beq.n	800389a <HAL_RCC_OscConfig+0x37e>
 80038bc:	e014      	b.n	80038e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038be:	f7fe fdef 	bl	80024a0 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe fdeb 	bl	80024a0 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e09b      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ee      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4a3b      	ldr	r2, [pc, #236]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8087 	beq.w	8003a12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003904:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d061      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d146      	bne.n	80039a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003918:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <HAL_RCC_OscConfig+0x4cc>)
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7fe fdbf 	bl	80024a0 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003926:	f7fe fdbb 	bl	80024a0 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e06d      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003938:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f0      	bne.n	8003926 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d108      	bne.n	8003960 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800394e:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4921      	ldr	r1, [pc, #132]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003960:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a19      	ldr	r1, [r3, #32]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	430b      	orrs	r3, r1
 8003972:	491b      	ldr	r1, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x4cc>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fd8f 	bl	80024a0 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003986:	f7fe fd8b 	bl	80024a0 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e03d      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x46a>
 80039a4:	e035      	b.n	8003a12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <HAL_RCC_OscConfig+0x4cc>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fd78 	bl	80024a0 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fe fd74 	bl	80024a0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e026      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x498>
 80039d2:	e01e      	b.n	8003a12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e019      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40007000 	.word	0x40007000
 80039e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_OscConfig+0x500>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d106      	bne.n	8003a0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0d0      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d910      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 0207 	bic.w	r2, r3, #7
 8003a4a:	4965      	ldr	r1, [pc, #404]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0b8      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a7c:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4a58      	ldr	r2, [pc, #352]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a94:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a52      	ldr	r2, [pc, #328]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	494d      	ldr	r1, [pc, #308]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d040      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d115      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e07f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e073      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aee:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06b      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4936      	ldr	r1, [pc, #216]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7fe fcc6 	bl	80024a0 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fe fcc2 	bl	80024a0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e053      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d210      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 0207 	bic.w	r2, r3, #7
 8003b56:	4922      	ldr	r1, [pc, #136]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e032      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4916      	ldr	r1, [pc, #88]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	490e      	ldr	r1, [pc, #56]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bae:	f000 f821 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	490a      	ldr	r1, [pc, #40]	; (8003be8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	5ccb      	ldrb	r3, [r1, r3]
 8003bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1cc>)
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fc24 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40022000 	.word	0x40022000
 8003be4:	40021000 	.word	0x40021000
 8003be8:	0800a958 	.word	0x0800a958
 8003bec:	20000000 	.word	0x20000000
 8003bf0:	20000004 	.word	0x20000004

08003bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d002      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x30>
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_GetSysClockFreq+0x36>
 8003c22:	e027      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c26:	613b      	str	r3, [r7, #16]
      break;
 8003c28:	e027      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	0c9b      	lsrs	r3, r3, #18
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c34:	5cd3      	ldrb	r3, [r2, r3]
 8003c36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d010      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	0c5b      	lsrs	r3, r3, #17
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	4a11      	ldr	r2, [pc, #68]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c4e:	5cd3      	ldrb	r3, [r2, r3]
 8003c50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c56:	fb03 f202 	mul.w	r2, r3, r2
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e004      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	613b      	str	r3, [r7, #16]
      break;
 8003c72:	e002      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c76:	613b      	str	r3, [r7, #16]
      break;
 8003c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7a:	693b      	ldr	r3, [r7, #16]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	007a1200 	.word	0x007a1200
 8003c90:	0800a970 	.word	0x0800a970
 8003c94:	0800a980 	.word	0x0800a980
 8003c98:	003d0900 	.word	0x003d0900

08003c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca0:	4b02      	ldr	r3, [pc, #8]	; (8003cac <HAL_RCC_GetHCLKFreq+0x10>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	20000000 	.word	0x20000000

08003cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cb4:	f7ff fff2 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4903      	ldr	r1, [pc, #12]	; (8003cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	0800a968 	.word	0x0800a968

08003cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cdc:	f7ff ffde 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	0adb      	lsrs	r3, r3, #11
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4903      	ldr	r1, [pc, #12]	; (8003cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	0800a968 	.word	0x0800a968

08003d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <RCC_Delay+0x34>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <RCC_Delay+0x38>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	0a5b      	lsrs	r3, r3, #9
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d1c:	bf00      	nop
  }
  while (Delay --);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1e5a      	subs	r2, r3, #1
 8003d22:	60fa      	str	r2, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f9      	bne.n	8003d1c <RCC_Delay+0x1c>
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	20000000 	.word	0x20000000
 8003d38:	10624dd3 	.word	0x10624dd3

08003d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e041      	b.n	8003dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd fc4e 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f000 fe96 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d001      	beq.n	8003df4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e032      	b.n	8003e5a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <HAL_TIM_Base_Start+0x88>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <HAL_TIM_Base_Start+0x48>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0e:	d009      	beq.n	8003e24 <HAL_TIM_Base_Start+0x48>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <HAL_TIM_Base_Start+0x8c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_TIM_Base_Start+0x48>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <HAL_TIM_Base_Start+0x90>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d111      	bne.n	8003e48 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d010      	beq.n	8003e58 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e46:	e007      	b.n	8003e58 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800

08003e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d001      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e03a      	b.n	8003efe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_TIM_Base_Start_IT+0x98>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x58>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d009      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x58>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <HAL_TIM_Base_Start_IT+0x9c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x58>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d111      	bne.n	8003eec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d010      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	e007      	b.n	8003efc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800

08003f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e041      	b.n	8003faa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd fbc4 	bl	80016c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f000 fdaa 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <HAL_TIM_PWM_Start+0x24>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e022      	b.n	800401e <HAL_TIM_PWM_Start+0x6a>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d109      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0x3e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e015      	b.n	800401e <HAL_TIM_PWM_Start+0x6a>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d109      	bne.n	800400c <HAL_TIM_PWM_Start+0x58>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e008      	b.n	800401e <HAL_TIM_PWM_Start+0x6a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e05e      	b.n	80040e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d104      	bne.n	8004036 <HAL_TIM_PWM_Start+0x82>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004034:	e013      	b.n	800405e <HAL_TIM_PWM_Start+0xaa>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d104      	bne.n	8004046 <HAL_TIM_PWM_Start+0x92>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004044:	e00b      	b.n	800405e <HAL_TIM_PWM_Start+0xaa>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d104      	bne.n	8004056 <HAL_TIM_PWM_Start+0xa2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004054:	e003      	b.n	800405e <HAL_TIM_PWM_Start+0xaa>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2201      	movs	r2, #1
 8004064:	6839      	ldr	r1, [r7, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f8b9 	bl	80051de <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_TIM_PWM_Start+0x138>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d107      	bne.n	8004086 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_TIM_PWM_Start+0x138>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_TIM_PWM_Start+0xfa>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004098:	d009      	beq.n	80040ae <HAL_TIM_PWM_Start+0xfa>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_TIM_PWM_Start+0x13c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_TIM_PWM_Start+0xfa>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <HAL_TIM_PWM_Start+0x140>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d111      	bne.n	80040d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d010      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d0:	e007      	b.n	80040e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800

080040f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e041      	b.n	800418e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd faee 	bl	8001700 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fcb8 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_IC_Start_IT+0x1e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	e013      	b.n	80041de <HAL_TIM_IC_Start_IT+0x46>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_IC_Start_IT+0x2e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	e00b      	b.n	80041de <HAL_TIM_IC_Start_IT+0x46>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_IC_Start_IT+0x3e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	e003      	b.n	80041de <HAL_TIM_IC_Start_IT+0x46>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d104      	bne.n	80041f0 <HAL_TIM_IC_Start_IT+0x58>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e013      	b.n	8004218 <HAL_TIM_IC_Start_IT+0x80>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d104      	bne.n	8004200 <HAL_TIM_IC_Start_IT+0x68>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	e00b      	b.n	8004218 <HAL_TIM_IC_Start_IT+0x80>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d104      	bne.n	8004210 <HAL_TIM_IC_Start_IT+0x78>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e003      	b.n	8004218 <HAL_TIM_IC_Start_IT+0x80>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004216:	b2db      	uxtb	r3, r3
 8004218:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800421a:	7bbb      	ldrb	r3, [r7, #14]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d102      	bne.n	8004226 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004220:	7b7b      	ldrb	r3, [r7, #13]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d001      	beq.n	800422a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0b8      	b.n	800439c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Start_IT+0xa2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004238:	e013      	b.n	8004262 <HAL_TIM_IC_Start_IT+0xca>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d104      	bne.n	800424a <HAL_TIM_IC_Start_IT+0xb2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004248:	e00b      	b.n	8004262 <HAL_TIM_IC_Start_IT+0xca>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d104      	bne.n	800425a <HAL_TIM_IC_Start_IT+0xc2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004258:	e003      	b.n	8004262 <HAL_TIM_IC_Start_IT+0xca>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_TIM_IC_Start_IT+0xda>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004270:	e013      	b.n	800429a <HAL_TIM_IC_Start_IT+0x102>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d104      	bne.n	8004282 <HAL_TIM_IC_Start_IT+0xea>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004280:	e00b      	b.n	800429a <HAL_TIM_IC_Start_IT+0x102>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d104      	bne.n	8004292 <HAL_TIM_IC_Start_IT+0xfa>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004290:	e003      	b.n	800429a <HAL_TIM_IC_Start_IT+0x102>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b0c      	cmp	r3, #12
 800429e:	d841      	bhi.n	8004324 <HAL_TIM_IC_Start_IT+0x18c>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_TIM_IC_Start_IT+0x110>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042dd 	.word	0x080042dd
 80042ac:	08004325 	.word	0x08004325
 80042b0:	08004325 	.word	0x08004325
 80042b4:	08004325 	.word	0x08004325
 80042b8:	080042ef 	.word	0x080042ef
 80042bc:	08004325 	.word	0x08004325
 80042c0:	08004325 	.word	0x08004325
 80042c4:	08004325 	.word	0x08004325
 80042c8:	08004301 	.word	0x08004301
 80042cc:	08004325 	.word	0x08004325
 80042d0:	08004325 	.word	0x08004325
 80042d4:	08004325 	.word	0x08004325
 80042d8:	08004313 	.word	0x08004313
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0202 	orr.w	r2, r2, #2
 80042ea:	60da      	str	r2, [r3, #12]
      break;
 80042ec:	e01d      	b.n	800432a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0204 	orr.w	r2, r2, #4
 80042fc:	60da      	str	r2, [r3, #12]
      break;
 80042fe:	e014      	b.n	800432a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0208 	orr.w	r2, r2, #8
 800430e:	60da      	str	r2, [r3, #12]
      break;
 8004310:	e00b      	b.n	800432a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0210 	orr.w	r2, r2, #16
 8004320:	60da      	str	r2, [r3, #12]
      break;
 8004322:	e002      	b.n	800432a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      break;
 8004328:	bf00      	nop
  }

  if (status == HAL_OK)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d134      	bne.n	800439a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2201      	movs	r2, #1
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f000 ff50 	bl	80051de <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <HAL_TIM_IC_Start_IT+0x20c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00e      	beq.n	8004366 <HAL_TIM_IC_Start_IT+0x1ce>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004350:	d009      	beq.n	8004366 <HAL_TIM_IC_Start_IT+0x1ce>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <HAL_TIM_IC_Start_IT+0x210>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_TIM_IC_Start_IT+0x1ce>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <HAL_TIM_IC_Start_IT+0x214>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d111      	bne.n	800438a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b06      	cmp	r3, #6
 8004376:	d010      	beq.n	800439a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004388:	e007      	b.n	800439a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800

080043b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0202 	mvn.w	r2, #2
 80043e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd fd0e 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fb37 	bl	8004a76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fb3d 	bl	8004a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0204 	mvn.w	r2, #4
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fd fce8 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fb11 	bl	8004a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fb17 	bl	8004a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d020      	beq.n	80044ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0208 	mvn.w	r2, #8
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2204      	movs	r2, #4
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd fcc2 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 faeb 	bl	8004a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 faf1 	bl	8004a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d020      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0210 	mvn.w	r2, #16
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2208      	movs	r2, #8
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd fc9c 	bl	8001e1c <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fac5 	bl	8004a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 facb 	bl	8004a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0201 	mvn.w	r2, #1
 8004514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 faa4 	bl	8004a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00c      	beq.n	8004540 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fedb 	bl	80052f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00c      	beq.n	8004564 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800455c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa9b 	bl	8004a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00c      	beq.n	8004588 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0220 	mvn.w	r2, #32
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 feae 	bl	80052e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e088      	b.n	80046c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11b      	bne.n	80045f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80045cc:	f000 fc64 	bl	8004e98 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 020c 	bic.w	r2, r2, #12
 80045de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	619a      	str	r2, [r3, #24]
 80045f2:	e060      	b.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d11c      	bne.n	8004634 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800460a:	f000 fccd 	bl	8004fa8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699a      	ldr	r2, [r3, #24]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800461c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6999      	ldr	r1, [r3, #24]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	021a      	lsls	r2, r3, #8
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	619a      	str	r2, [r3, #24]
 8004632:	e040      	b.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b08      	cmp	r3, #8
 8004638:	d11b      	bne.n	8004672 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800464a:	f000 fd18 	bl	800507e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 020c 	bic.w	r2, r2, #12
 800465c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69d9      	ldr	r1, [r3, #28]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	61da      	str	r2, [r3, #28]
 8004670:	e021      	b.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b0c      	cmp	r3, #12
 8004676:	d11c      	bne.n	80046b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004688:	f000 fd34 	bl	80050f4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800469a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69d9      	ldr	r1, [r3, #28]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	021a      	lsls	r2, r3, #8
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	61da      	str	r2, [r3, #28]
 80046b0:	e001      	b.n	80046b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046be:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e0ae      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	f200 809f 	bhi.w	8004834 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046f6:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004731 	.word	0x08004731
 8004700:	08004835 	.word	0x08004835
 8004704:	08004835 	.word	0x08004835
 8004708:	08004835 	.word	0x08004835
 800470c:	08004771 	.word	0x08004771
 8004710:	08004835 	.word	0x08004835
 8004714:	08004835 	.word	0x08004835
 8004718:	08004835 	.word	0x08004835
 800471c:	080047b3 	.word	0x080047b3
 8004720:	08004835 	.word	0x08004835
 8004724:	08004835 	.word	0x08004835
 8004728:	08004835 	.word	0x08004835
 800472c:	080047f3 	.word	0x080047f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fa26 	bl	8004b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0208 	orr.w	r2, r2, #8
 800474a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0204 	bic.w	r2, r2, #4
 800475a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6999      	ldr	r1, [r3, #24]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	619a      	str	r2, [r3, #24]
      break;
 800476e:	e064      	b.n	800483a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fa6c 	bl	8004c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6999      	ldr	r1, [r3, #24]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	021a      	lsls	r2, r3, #8
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	619a      	str	r2, [r3, #24]
      break;
 80047b0:	e043      	b.n	800483a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fab5 	bl	8004d28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0208 	orr.w	r2, r2, #8
 80047cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0204 	bic.w	r2, r2, #4
 80047dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69d9      	ldr	r1, [r3, #28]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	61da      	str	r2, [r3, #28]
      break;
 80047f0:	e023      	b.n	800483a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 faff 	bl	8004dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69d9      	ldr	r1, [r3, #28]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	021a      	lsls	r2, r3, #8
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	61da      	str	r2, [r3, #28]
      break;
 8004832:	e002      	b.n	800483a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75fb      	strb	r3, [r7, #23]
      break;
 8004838:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004842:	7dfb      	ldrb	r3, [r7, #23]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIM_ConfigClockSource+0x1c>
 8004864:	2302      	movs	r3, #2
 8004866:	e0b4      	b.n	80049d2 <HAL_TIM_ConfigClockSource+0x186>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800488e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a0:	d03e      	beq.n	8004920 <HAL_TIM_ConfigClockSource+0xd4>
 80048a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a6:	f200 8087 	bhi.w	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	f000 8086 	beq.w	80049be <HAL_TIM_ConfigClockSource+0x172>
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b6:	d87f      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b70      	cmp	r3, #112	; 0x70
 80048ba:	d01a      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0xa6>
 80048bc:	2b70      	cmp	r3, #112	; 0x70
 80048be:	d87b      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b60      	cmp	r3, #96	; 0x60
 80048c2:	d050      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0x11a>
 80048c4:	2b60      	cmp	r3, #96	; 0x60
 80048c6:	d877      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b50      	cmp	r3, #80	; 0x50
 80048ca:	d03c      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0xfa>
 80048cc:	2b50      	cmp	r3, #80	; 0x50
 80048ce:	d873      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d058      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x13a>
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d86f      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b30      	cmp	r3, #48	; 0x30
 80048da:	d064      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x15a>
 80048dc:	2b30      	cmp	r3, #48	; 0x30
 80048de:	d86b      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d060      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x15a>
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d867      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05c      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x15a>
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d05a      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x15a>
 80048f0:	e062      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004902:	f000 fc4d 	bl	80051a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	609a      	str	r2, [r3, #8]
      break;
 800491e:	e04f      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004930:	f000 fc36 	bl	80051a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004942:	609a      	str	r2, [r3, #8]
      break;
 8004944:	e03c      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004952:	461a      	mov	r2, r3
 8004954:	f000 fafa 	bl	8004f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2150      	movs	r1, #80	; 0x50
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fc04 	bl	800516c <TIM_ITRx_SetConfig>
      break;
 8004964:	e02c      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004972:	461a      	mov	r2, r3
 8004974:	f000 fb54 	bl	8005020 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2160      	movs	r1, #96	; 0x60
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fbf4 	bl	800516c <TIM_ITRx_SetConfig>
      break;
 8004984:	e01c      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004992:	461a      	mov	r2, r3
 8004994:	f000 fada 	bl	8004f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2140      	movs	r1, #64	; 0x40
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fbe4 	bl	800516c <TIM_ITRx_SetConfig>
      break;
 80049a4:	e00c      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f000 fbdb 	bl	800516c <TIM_ITRx_SetConfig>
      break;
 80049b6:	e003      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
      break;
 80049bc:	e000      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b0c      	cmp	r3, #12
 80049ee:	d831      	bhi.n	8004a54 <HAL_TIM_ReadCapturedValue+0x78>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a2d 	.word	0x08004a2d
 80049fc:	08004a55 	.word	0x08004a55
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	08004a55 	.word	0x08004a55
 8004a08:	08004a37 	.word	0x08004a37
 8004a0c:	08004a55 	.word	0x08004a55
 8004a10:	08004a55 	.word	0x08004a55
 8004a14:	08004a55 	.word	0x08004a55
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a55 	.word	0x08004a55
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004a55 	.word	0x08004a55
 8004a28:	08004a4b 	.word	0x08004a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	60fb      	str	r3, [r7, #12]

      break;
 8004a34:	e00f      	b.n	8004a56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	60fb      	str	r3, [r7, #12]

      break;
 8004a3e:	e00a      	b.n	8004a56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a46:	60fb      	str	r3, [r7, #12]

      break;
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	60fb      	str	r3, [r7, #12]

      break;
 8004a52:	e000      	b.n	8004a56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004a54:	bf00      	nop
  }

  return tmpreg;
 8004a56:	68fb      	ldr	r3, [r7, #12]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop

08004a64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a2f      	ldr	r2, [pc, #188]	; (8004b7c <TIM_Base_SetConfig+0xd0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00b      	beq.n	8004adc <TIM_Base_SetConfig+0x30>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aca:	d007      	beq.n	8004adc <TIM_Base_SetConfig+0x30>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a2c      	ldr	r2, [pc, #176]	; (8004b80 <TIM_Base_SetConfig+0xd4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0x30>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a2b      	ldr	r2, [pc, #172]	; (8004b84 <TIM_Base_SetConfig+0xd8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d108      	bne.n	8004aee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a22      	ldr	r2, [pc, #136]	; (8004b7c <TIM_Base_SetConfig+0xd0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <TIM_Base_SetConfig+0x62>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afc:	d007      	beq.n	8004b0e <TIM_Base_SetConfig+0x62>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <TIM_Base_SetConfig+0xd4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d003      	beq.n	8004b0e <TIM_Base_SetConfig+0x62>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <TIM_Base_SetConfig+0xd8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d108      	bne.n	8004b20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a0d      	ldr	r2, [pc, #52]	; (8004b7c <TIM_Base_SetConfig+0xd0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d103      	bne.n	8004b54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f023 0201 	bic.w	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]
  }
}
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800

08004b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f023 0201 	bic.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f023 0302 	bic.w	r3, r3, #2
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a1c      	ldr	r2, [pc, #112]	; (8004c50 <TIM_OC1_SetConfig+0xc8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10c      	bne.n	8004bfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0308 	bic.w	r3, r3, #8
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a13      	ldr	r2, [pc, #76]	; (8004c50 <TIM_OC1_SetConfig+0xc8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d111      	bne.n	8004c2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	621a      	str	r2, [r3, #32]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00

08004c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f023 0210 	bic.w	r2, r3, #16
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0320 	bic.w	r3, r3, #32
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <TIM_OC2_SetConfig+0xd0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10d      	bne.n	8004cd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <TIM_OC2_SetConfig+0xd0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d113      	bne.n	8004d00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	40012c00 	.word	0x40012c00

08004d28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0303 	bic.w	r3, r3, #3
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1d      	ldr	r2, [pc, #116]	; (8004df8 <TIM_OC3_SetConfig+0xd0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d10d      	bne.n	8004da2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a14      	ldr	r2, [pc, #80]	; (8004df8 <TIM_OC3_SetConfig+0xd0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d113      	bne.n	8004dd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	621a      	str	r2, [r3, #32]
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00

08004dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	031b      	lsls	r3, r3, #12
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a0f      	ldr	r2, [pc, #60]	; (8004e94 <TIM_OC4_SetConfig+0x98>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d109      	bne.n	8004e70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	019b      	lsls	r3, r3, #6
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr
 8004e94:	40012c00 	.word	0x40012c00

08004e98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f023 0201 	bic.w	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a1f      	ldr	r2, [pc, #124]	; (8004f40 <TIM_TI1_SetConfig+0xa8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <TIM_TI1_SetConfig+0x46>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ecc:	d007      	beq.n	8004ede <TIM_TI1_SetConfig+0x46>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <TIM_TI1_SetConfig+0xac>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_TI1_SetConfig+0x46>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <TIM_TI1_SetConfig+0xb0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <TIM_TI1_SetConfig+0x4a>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <TIM_TI1_SetConfig+0x4c>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e003      	b.n	8004f02 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f023 030a 	bic.w	r3, r3, #10
 8004f1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f003 030a 	and.w	r3, r3, #10
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800

08004f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 030a 	bic.w	r3, r3, #10
 8004f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f023 0210 	bic.w	r2, r3, #16
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	031b      	lsls	r3, r3, #12
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ffa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0210 	bic.w	r2, r3, #16
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	031b      	lsls	r3, r3, #12
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800505c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	621a      	str	r2, [r3, #32]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005120:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005132:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	031b      	lsls	r3, r3, #12
 8005138:	b29b      	uxth	r3, r3
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005146:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	031b      	lsls	r3, r3, #12
 800514c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr

0800516c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	f043 0307 	orr.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	609a      	str	r2, [r3, #8]
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	609a      	str	r2, [r3, #8]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051de:	b480      	push	{r7}
 80051e0:	b087      	sub	sp, #28
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	2201      	movs	r2, #1
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1a      	ldr	r2, [r3, #32]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	43db      	mvns	r3, r3
 8005200:	401a      	ands	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1a      	ldr	r2, [r3, #32]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	fa01 f303 	lsl.w	r3, r1, r3
 8005216:	431a      	orrs	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	621a      	str	r2, [r3, #32]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr
	...

08005228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800523c:	2302      	movs	r3, #2
 800523e:	e046      	b.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a16      	ldr	r2, [pc, #88]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d009      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a10      	ldr	r2, [pc, #64]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10c      	bne.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800

080052e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr

080052f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e042      	b.n	80053a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fc fa5c 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2224      	movs	r2, #36	; 0x24
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800534a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fdb7 	bl	8005ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d175      	bne.n	80054b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_UART_Transmit+0x2c>
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e06e      	b.n	80054b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2221      	movs	r2, #33	; 0x21
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053e6:	f7fd f85b 	bl	80024a0 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	88fa      	ldrh	r2, [r7, #6]
 80053f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005400:	d108      	bne.n	8005414 <HAL_UART_Transmit+0x6c>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e003      	b.n	800541c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800541c:	e02e      	b.n	800547c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	2180      	movs	r1, #128	; 0x80
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fb1c 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e03a      	b.n	80054b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10b      	bne.n	800545e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005454:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	3302      	adds	r3, #2
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e007      	b.n	800546e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3301      	adds	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1cb      	bne.n	800541e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	2140      	movs	r1, #64	; 0x40
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fae8 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e006      	b.n	80054b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e000      	b.n	80054b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054b4:	2302      	movs	r3, #2
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	4613      	mov	r3, r2
 80054ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d112      	bne.n	80054fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_UART_Receive_IT+0x26>
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e00b      	b.n	8005500 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	461a      	mov	r2, r3
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fb0f 	bl	8005b18 <UART_Start_Receive_IT>
 80054fa:	4603      	mov	r3, r0
 80054fc:	e000      	b.n	8005500 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b0ba      	sub	sp, #232	; 0xe8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800552e:	2300      	movs	r3, #0
 8005530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800553a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <HAL_UART_IRQHandler+0x66>
 800555a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fbec 	bl	8005d44 <UART_Receive_IT>
      return;
 800556c:	e25b      	b.n	8005a26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800556e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80de 	beq.w	8005734 <HAL_UART_IRQHandler+0x22c>
 8005578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005588:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80d1 	beq.w	8005734 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_UART_IRQHandler+0xae>
 800559e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	f043 0201 	orr.w	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <HAL_UART_IRQHandler+0xd2>
 80055c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	f043 0202 	orr.w	r2, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_UART_IRQHandler+0xf6>
 80055e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	f043 0204 	orr.w	r2, r3, #4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d011      	beq.n	800562e <HAL_UART_IRQHandler+0x126>
 800560a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f043 0208 	orr.w	r2, r3, #8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 81f2 	beq.w	8005a1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_UART_IRQHandler+0x14e>
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fb77 	bl	8005d44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <HAL_UART_IRQHandler+0x17a>
 800567a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800567e:	2b00      	cmp	r3, #0
 8005680:	d04f      	beq.n	8005722 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa81 	bl	8005b8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d041      	beq.n	800571a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3314      	adds	r3, #20
 800569c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1d9      	bne.n	8005696 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d013      	beq.n	8005712 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	4a7e      	ldr	r2, [pc, #504]	; (80058e8 <HAL_UART_IRQHandler+0x3e0>)
 80056f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fd f848 	bl	800278c <HAL_DMA_Abort_IT>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800570c:	4610      	mov	r0, r2
 800570e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	e00e      	b.n	8005730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f993 	bl	8005a3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e00a      	b.n	8005730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f98f 	bl	8005a3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e006      	b.n	8005730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f98b 	bl	8005a3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800572e:	e175      	b.n	8005a1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	bf00      	nop
    return;
 8005732:	e173      	b.n	8005a1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	2b01      	cmp	r3, #1
 800573a:	f040 814f 	bne.w	80059dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8148 	beq.w	80059dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800574c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8141 	beq.w	80059dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800575a:	2300      	movs	r3, #0
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80b6 	beq.w	80058ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800578c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8145 	beq.w	8005a20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800579a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800579e:	429a      	cmp	r2, r3
 80057a0:	f080 813e 	bcs.w	8005a20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	f000 8088 	beq.w	80058c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057e4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1d9      	bne.n	80057b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3314      	adds	r3, #20
 800580a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3314      	adds	r3, #20
 8005824:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005828:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800582c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005830:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800583a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e1      	bne.n	8005804 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3314      	adds	r3, #20
 8005860:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005864:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005866:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800586a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e3      	bne.n	8005840 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005898:	f023 0310 	bic.w	r3, r3, #16
 800589c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e3      	bne.n	8005886 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fc ff27 	bl	8002716 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	b29b      	uxth	r3, r3
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8b6 	bl	8005a50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058e4:	e09c      	b.n	8005a20 <HAL_UART_IRQHandler+0x518>
 80058e6:	bf00      	nop
 80058e8:	08005c4f 	.word	0x08005c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 808e 	beq.w	8005a24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8089 	beq.w	8005a24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005936:	647a      	str	r2, [r7, #68]	; 0x44
 8005938:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800593c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e3      	bne.n	8005912 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	623b      	str	r3, [r7, #32]
   return(result);
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800596e:	633a      	str	r2, [r7, #48]	; 0x30
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e3      	bne.n	800594a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0310 	bic.w	r3, r3, #16
 80059a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	330c      	adds	r3, #12
 80059b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059b4:	61fa      	str	r2, [r7, #28]
 80059b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	69b9      	ldr	r1, [r7, #24]
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	617b      	str	r3, [r7, #20]
   return(result);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e3      	bne.n	8005990 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f83b 	bl	8005a50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059da:	e023      	b.n	8005a24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d009      	beq.n	80059fc <HAL_UART_IRQHandler+0x4f4>
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f93e 	bl	8005c76 <UART_Transmit_IT>
    return;
 80059fa:	e014      	b.n	8005a26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00e      	beq.n	8005a26 <HAL_UART_IRQHandler+0x51e>
 8005a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f97d 	bl	8005d14 <UART_EndTransmit_IT>
    return;
 8005a1a:	e004      	b.n	8005a26 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a24:	bf00      	nop
  }
}
 8005a26:	37e8      	adds	r7, #232	; 0xe8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr

08005a3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	e03b      	b.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d037      	beq.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a80:	f7fc fd0e 	bl	80024a0 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	6a3a      	ldr	r2, [r7, #32]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e03a      	b.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d023      	beq.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d020      	beq.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d01d      	beq.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d116      	bne.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f856 	bl	8005b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e00f      	b.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4013      	ands	r3, r2
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d0b4      	beq.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	88fa      	ldrh	r2, [r7, #6]
 8005b36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2222      	movs	r2, #34	; 0x22
 8005b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695a      	ldr	r2, [r3, #20]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0220 	orr.w	r2, r2, #32
 8005b7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b095      	sub	sp, #84	; 0x54
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	330c      	adds	r3, #12
 8005b98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bb2:	643a      	str	r2, [r7, #64]	; 0x40
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e5      	bne.n	8005b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3314      	adds	r3, #20
 8005be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e5      	bne.n	8005bc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d119      	bne.n	8005c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 0310 	bic.w	r3, r3, #16
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c22:	61ba      	str	r2, [r7, #24]
 8005c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6979      	ldr	r1, [r7, #20]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e5      	bne.n	8005c02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c44:	bf00      	nop
 8005c46:	3754      	adds	r7, #84	; 0x54
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f7ff fee8 	bl	8005a3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b21      	cmp	r3, #33	; 0x21
 8005c88:	d13e      	bne.n	8005d08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c92:	d114      	bne.n	8005cbe <UART_Transmit_IT+0x48>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d110      	bne.n	8005cbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	1c9a      	adds	r2, r3, #2
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	621a      	str	r2, [r3, #32]
 8005cbc:	e008      	b.n	8005cd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6211      	str	r1, [r2, #32]
 8005cc8:	781a      	ldrb	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10f      	bne.n	8005d04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr

08005d14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff fe79 	bl	8005a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08c      	sub	sp, #48	; 0x30
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b22      	cmp	r3, #34	; 0x22
 8005d56:	f040 80ae 	bne.w	8005eb6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d62:	d117      	bne.n	8005d94 <UART_Receive_IT+0x50>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d113      	bne.n	8005d94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	1c9a      	adds	r2, r3, #2
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	629a      	str	r2, [r3, #40]	; 0x28
 8005d92:	e026      	b.n	8005de2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da6:	d007      	beq.n	8005db8 <UART_Receive_IT+0x74>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <UART_Receive_IT+0x82>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	e008      	b.n	8005dd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	4619      	mov	r1, r3
 8005df0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d15d      	bne.n	8005eb2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0220 	bic.w	r2, r2, #32
 8005e04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d135      	bne.n	8005ea8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	613b      	str	r3, [r7, #16]
   return(result);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f023 0310 	bic.w	r3, r3, #16
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e62:	623a      	str	r2, [r7, #32]
 8005e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	69f9      	ldr	r1, [r7, #28]
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e5      	bne.n	8005e42 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d10a      	bne.n	8005e9a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fdd5 	bl	8005a50 <HAL_UARTEx_RxEventCallback>
 8005ea6:	e002      	b.n	8005eae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fc f9f7 	bl	800229c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e002      	b.n	8005eb8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3730      	adds	r7, #48	; 0x30
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005efa:	f023 030c 	bic.w	r3, r3, #12
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	430b      	orrs	r3, r1
 8005f06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a2c      	ldr	r2, [pc, #176]	; (8005fd4 <UART_SetConfig+0x114>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d103      	bne.n	8005f30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f28:	f7fd fed6 	bl	8003cd8 <HAL_RCC_GetPCLK2Freq>
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	e002      	b.n	8005f36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f30:	f7fd febe 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8005f34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009a      	lsls	r2, r3, #2
 8005f40:	441a      	add	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <UART_SetConfig+0x118>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	0119      	lsls	r1, r3, #4
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009a      	lsls	r2, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <UART_SetConfig+0x118>)
 8005f6e:	fba3 0302 	umull	r0, r3, r3, r2
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2064      	movs	r0, #100	; 0x64
 8005f76:	fb00 f303 	mul.w	r3, r0, r3
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	3332      	adds	r3, #50	; 0x32
 8005f80:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <UART_SetConfig+0x118>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f8c:	4419      	add	r1, r3
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009a      	lsls	r2, r3, #2
 8005f98:	441a      	add	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <UART_SetConfig+0x118>)
 8005fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	2064      	movs	r0, #100	; 0x64
 8005fae:	fb00 f303 	mul.w	r3, r0, r3
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	3332      	adds	r3, #50	; 0x32
 8005fb8:	4a07      	ldr	r2, [pc, #28]	; (8005fd8 <UART_SetConfig+0x118>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	f003 020f 	and.w	r2, r3, #15
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	440a      	add	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	51eb851f 	.word	0x51eb851f

08005fdc <__cvt>:
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe2:	461f      	mov	r7, r3
 8005fe4:	bfbb      	ittet	lt
 8005fe6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005fea:	461f      	movlt	r7, r3
 8005fec:	2300      	movge	r3, #0
 8005fee:	232d      	movlt	r3, #45	; 0x2d
 8005ff0:	b088      	sub	sp, #32
 8005ff2:	4614      	mov	r4, r2
 8005ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ff6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ff8:	7013      	strb	r3, [r2, #0]
 8005ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ffc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006000:	f023 0820 	bic.w	r8, r3, #32
 8006004:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006008:	d005      	beq.n	8006016 <__cvt+0x3a>
 800600a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800600e:	d100      	bne.n	8006012 <__cvt+0x36>
 8006010:	3501      	adds	r5, #1
 8006012:	2302      	movs	r3, #2
 8006014:	e000      	b.n	8006018 <__cvt+0x3c>
 8006016:	2303      	movs	r3, #3
 8006018:	aa07      	add	r2, sp, #28
 800601a:	9204      	str	r2, [sp, #16]
 800601c:	aa06      	add	r2, sp, #24
 800601e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006022:	e9cd 3500 	strd	r3, r5, [sp]
 8006026:	4622      	mov	r2, r4
 8006028:	463b      	mov	r3, r7
 800602a:	f001 f8cd 	bl	80071c8 <_dtoa_r>
 800602e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006032:	4606      	mov	r6, r0
 8006034:	d102      	bne.n	800603c <__cvt+0x60>
 8006036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006038:	07db      	lsls	r3, r3, #31
 800603a:	d522      	bpl.n	8006082 <__cvt+0xa6>
 800603c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006040:	eb06 0905 	add.w	r9, r6, r5
 8006044:	d110      	bne.n	8006068 <__cvt+0x8c>
 8006046:	7833      	ldrb	r3, [r6, #0]
 8006048:	2b30      	cmp	r3, #48	; 0x30
 800604a:	d10a      	bne.n	8006062 <__cvt+0x86>
 800604c:	2200      	movs	r2, #0
 800604e:	2300      	movs	r3, #0
 8006050:	4620      	mov	r0, r4
 8006052:	4639      	mov	r1, r7
 8006054:	f7fa fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8006058:	b918      	cbnz	r0, 8006062 <__cvt+0x86>
 800605a:	f1c5 0501 	rsb	r5, r5, #1
 800605e:	f8ca 5000 	str.w	r5, [sl]
 8006062:	f8da 3000 	ldr.w	r3, [sl]
 8006066:	4499      	add	r9, r3
 8006068:	2200      	movs	r2, #0
 800606a:	2300      	movs	r3, #0
 800606c:	4620      	mov	r0, r4
 800606e:	4639      	mov	r1, r7
 8006070:	f7fa fc9a 	bl	80009a8 <__aeabi_dcmpeq>
 8006074:	b108      	cbz	r0, 800607a <__cvt+0x9e>
 8006076:	f8cd 901c 	str.w	r9, [sp, #28]
 800607a:	2230      	movs	r2, #48	; 0x30
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	454b      	cmp	r3, r9
 8006080:	d307      	bcc.n	8006092 <__cvt+0xb6>
 8006082:	4630      	mov	r0, r6
 8006084:	9b07      	ldr	r3, [sp, #28]
 8006086:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006088:	1b9b      	subs	r3, r3, r6
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	b008      	add	sp, #32
 800608e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006092:	1c59      	adds	r1, r3, #1
 8006094:	9107      	str	r1, [sp, #28]
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e7f0      	b.n	800607c <__cvt+0xa0>

0800609a <__exponent>:
 800609a:	4603      	mov	r3, r0
 800609c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800609e:	2900      	cmp	r1, #0
 80060a0:	f803 2b02 	strb.w	r2, [r3], #2
 80060a4:	bfb6      	itet	lt
 80060a6:	222d      	movlt	r2, #45	; 0x2d
 80060a8:	222b      	movge	r2, #43	; 0x2b
 80060aa:	4249      	neglt	r1, r1
 80060ac:	2909      	cmp	r1, #9
 80060ae:	7042      	strb	r2, [r0, #1]
 80060b0:	dd2a      	ble.n	8006108 <__exponent+0x6e>
 80060b2:	f10d 0207 	add.w	r2, sp, #7
 80060b6:	4617      	mov	r7, r2
 80060b8:	260a      	movs	r6, #10
 80060ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80060be:	4694      	mov	ip, r2
 80060c0:	fb06 1415 	mls	r4, r6, r5, r1
 80060c4:	3430      	adds	r4, #48	; 0x30
 80060c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80060ca:	460c      	mov	r4, r1
 80060cc:	2c63      	cmp	r4, #99	; 0x63
 80060ce:	4629      	mov	r1, r5
 80060d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80060d4:	dcf1      	bgt.n	80060ba <__exponent+0x20>
 80060d6:	3130      	adds	r1, #48	; 0x30
 80060d8:	f1ac 0402 	sub.w	r4, ip, #2
 80060dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060e0:	4622      	mov	r2, r4
 80060e2:	1c41      	adds	r1, r0, #1
 80060e4:	42ba      	cmp	r2, r7
 80060e6:	d30a      	bcc.n	80060fe <__exponent+0x64>
 80060e8:	f10d 0209 	add.w	r2, sp, #9
 80060ec:	eba2 020c 	sub.w	r2, r2, ip
 80060f0:	42bc      	cmp	r4, r7
 80060f2:	bf88      	it	hi
 80060f4:	2200      	movhi	r2, #0
 80060f6:	4413      	add	r3, r2
 80060f8:	1a18      	subs	r0, r3, r0
 80060fa:	b003      	add	sp, #12
 80060fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006102:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006106:	e7ed      	b.n	80060e4 <__exponent+0x4a>
 8006108:	2330      	movs	r3, #48	; 0x30
 800610a:	3130      	adds	r1, #48	; 0x30
 800610c:	7083      	strb	r3, [r0, #2]
 800610e:	70c1      	strb	r1, [r0, #3]
 8006110:	1d03      	adds	r3, r0, #4
 8006112:	e7f1      	b.n	80060f8 <__exponent+0x5e>

08006114 <_printf_float>:
 8006114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	b091      	sub	sp, #68	; 0x44
 800611a:	460c      	mov	r4, r1
 800611c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006120:	4616      	mov	r6, r2
 8006122:	461f      	mov	r7, r3
 8006124:	4605      	mov	r5, r0
 8006126:	f000 ff39 	bl	8006f9c <_localeconv_r>
 800612a:	6803      	ldr	r3, [r0, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	9309      	str	r3, [sp, #36]	; 0x24
 8006130:	f7fa f80e 	bl	8000150 <strlen>
 8006134:	2300      	movs	r3, #0
 8006136:	930e      	str	r3, [sp, #56]	; 0x38
 8006138:	f8d8 3000 	ldr.w	r3, [r8]
 800613c:	900a      	str	r0, [sp, #40]	; 0x28
 800613e:	3307      	adds	r3, #7
 8006140:	f023 0307 	bic.w	r3, r3, #7
 8006144:	f103 0208 	add.w	r2, r3, #8
 8006148:	f894 9018 	ldrb.w	r9, [r4, #24]
 800614c:	f8d4 b000 	ldr.w	fp, [r4]
 8006150:	f8c8 2000 	str.w	r2, [r8]
 8006154:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006158:	4652      	mov	r2, sl
 800615a:	4643      	mov	r3, r8
 800615c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006160:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006164:	930b      	str	r3, [sp, #44]	; 0x2c
 8006166:	f04f 32ff 	mov.w	r2, #4294967295
 800616a:	4650      	mov	r0, sl
 800616c:	4b9c      	ldr	r3, [pc, #624]	; (80063e0 <_printf_float+0x2cc>)
 800616e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006170:	f7fa fc4c 	bl	8000a0c <__aeabi_dcmpun>
 8006174:	bb70      	cbnz	r0, 80061d4 <_printf_float+0xc0>
 8006176:	f04f 32ff 	mov.w	r2, #4294967295
 800617a:	4650      	mov	r0, sl
 800617c:	4b98      	ldr	r3, [pc, #608]	; (80063e0 <_printf_float+0x2cc>)
 800617e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006180:	f7fa fc26 	bl	80009d0 <__aeabi_dcmple>
 8006184:	bb30      	cbnz	r0, 80061d4 <_printf_float+0xc0>
 8006186:	2200      	movs	r2, #0
 8006188:	2300      	movs	r3, #0
 800618a:	4650      	mov	r0, sl
 800618c:	4641      	mov	r1, r8
 800618e:	f7fa fc15 	bl	80009bc <__aeabi_dcmplt>
 8006192:	b110      	cbz	r0, 800619a <_printf_float+0x86>
 8006194:	232d      	movs	r3, #45	; 0x2d
 8006196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800619a:	4a92      	ldr	r2, [pc, #584]	; (80063e4 <_printf_float+0x2d0>)
 800619c:	4b92      	ldr	r3, [pc, #584]	; (80063e8 <_printf_float+0x2d4>)
 800619e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80061a2:	bf94      	ite	ls
 80061a4:	4690      	movls	r8, r2
 80061a6:	4698      	movhi	r8, r3
 80061a8:	2303      	movs	r3, #3
 80061aa:	f04f 0a00 	mov.w	sl, #0
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	f02b 0304 	bic.w	r3, fp, #4
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	4633      	mov	r3, r6
 80061b8:	4621      	mov	r1, r4
 80061ba:	4628      	mov	r0, r5
 80061bc:	9700      	str	r7, [sp, #0]
 80061be:	aa0f      	add	r2, sp, #60	; 0x3c
 80061c0:	f000 f9d6 	bl	8006570 <_printf_common>
 80061c4:	3001      	adds	r0, #1
 80061c6:	f040 8090 	bne.w	80062ea <_printf_float+0x1d6>
 80061ca:	f04f 30ff 	mov.w	r0, #4294967295
 80061ce:	b011      	add	sp, #68	; 0x44
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	4652      	mov	r2, sl
 80061d6:	4643      	mov	r3, r8
 80061d8:	4650      	mov	r0, sl
 80061da:	4641      	mov	r1, r8
 80061dc:	f7fa fc16 	bl	8000a0c <__aeabi_dcmpun>
 80061e0:	b148      	cbz	r0, 80061f6 <_printf_float+0xe2>
 80061e2:	f1b8 0f00 	cmp.w	r8, #0
 80061e6:	bfb8      	it	lt
 80061e8:	232d      	movlt	r3, #45	; 0x2d
 80061ea:	4a80      	ldr	r2, [pc, #512]	; (80063ec <_printf_float+0x2d8>)
 80061ec:	bfb8      	it	lt
 80061ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80061f2:	4b7f      	ldr	r3, [pc, #508]	; (80063f0 <_printf_float+0x2dc>)
 80061f4:	e7d3      	b.n	800619e <_printf_float+0x8a>
 80061f6:	6863      	ldr	r3, [r4, #4]
 80061f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	d142      	bne.n	8006286 <_printf_float+0x172>
 8006200:	2306      	movs	r3, #6
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	9206      	str	r2, [sp, #24]
 8006208:	aa0e      	add	r2, sp, #56	; 0x38
 800620a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800620e:	aa0d      	add	r2, sp, #52	; 0x34
 8006210:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006214:	9203      	str	r2, [sp, #12]
 8006216:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800621a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	6863      	ldr	r3, [r4, #4]
 8006222:	4652      	mov	r2, sl
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	4628      	mov	r0, r5
 8006228:	4643      	mov	r3, r8
 800622a:	910b      	str	r1, [sp, #44]	; 0x2c
 800622c:	f7ff fed6 	bl	8005fdc <__cvt>
 8006230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006232:	4680      	mov	r8, r0
 8006234:	2947      	cmp	r1, #71	; 0x47
 8006236:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006238:	d108      	bne.n	800624c <_printf_float+0x138>
 800623a:	1cc8      	adds	r0, r1, #3
 800623c:	db02      	blt.n	8006244 <_printf_float+0x130>
 800623e:	6863      	ldr	r3, [r4, #4]
 8006240:	4299      	cmp	r1, r3
 8006242:	dd40      	ble.n	80062c6 <_printf_float+0x1b2>
 8006244:	f1a9 0902 	sub.w	r9, r9, #2
 8006248:	fa5f f989 	uxtb.w	r9, r9
 800624c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006250:	d81f      	bhi.n	8006292 <_printf_float+0x17e>
 8006252:	464a      	mov	r2, r9
 8006254:	3901      	subs	r1, #1
 8006256:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800625a:	910d      	str	r1, [sp, #52]	; 0x34
 800625c:	f7ff ff1d 	bl	800609a <__exponent>
 8006260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006262:	4682      	mov	sl, r0
 8006264:	1813      	adds	r3, r2, r0
 8006266:	2a01      	cmp	r2, #1
 8006268:	6123      	str	r3, [r4, #16]
 800626a:	dc02      	bgt.n	8006272 <_printf_float+0x15e>
 800626c:	6822      	ldr	r2, [r4, #0]
 800626e:	07d2      	lsls	r2, r2, #31
 8006270:	d501      	bpl.n	8006276 <_printf_float+0x162>
 8006272:	3301      	adds	r3, #1
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800627a:	2b00      	cmp	r3, #0
 800627c:	d09b      	beq.n	80061b6 <_printf_float+0xa2>
 800627e:	232d      	movs	r3, #45	; 0x2d
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006284:	e797      	b.n	80061b6 <_printf_float+0xa2>
 8006286:	2947      	cmp	r1, #71	; 0x47
 8006288:	d1bc      	bne.n	8006204 <_printf_float+0xf0>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1ba      	bne.n	8006204 <_printf_float+0xf0>
 800628e:	2301      	movs	r3, #1
 8006290:	e7b7      	b.n	8006202 <_printf_float+0xee>
 8006292:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006296:	d118      	bne.n	80062ca <_printf_float+0x1b6>
 8006298:	2900      	cmp	r1, #0
 800629a:	6863      	ldr	r3, [r4, #4]
 800629c:	dd0b      	ble.n	80062b6 <_printf_float+0x1a2>
 800629e:	6121      	str	r1, [r4, #16]
 80062a0:	b913      	cbnz	r3, 80062a8 <_printf_float+0x194>
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	07d0      	lsls	r0, r2, #31
 80062a6:	d502      	bpl.n	80062ae <_printf_float+0x19a>
 80062a8:	3301      	adds	r3, #1
 80062aa:	440b      	add	r3, r1
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	f04f 0a00 	mov.w	sl, #0
 80062b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80062b4:	e7df      	b.n	8006276 <_printf_float+0x162>
 80062b6:	b913      	cbnz	r3, 80062be <_printf_float+0x1aa>
 80062b8:	6822      	ldr	r2, [r4, #0]
 80062ba:	07d2      	lsls	r2, r2, #31
 80062bc:	d501      	bpl.n	80062c2 <_printf_float+0x1ae>
 80062be:	3302      	adds	r3, #2
 80062c0:	e7f4      	b.n	80062ac <_printf_float+0x198>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e7f2      	b.n	80062ac <_printf_float+0x198>
 80062c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80062ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062cc:	4299      	cmp	r1, r3
 80062ce:	db05      	blt.n	80062dc <_printf_float+0x1c8>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	6121      	str	r1, [r4, #16]
 80062d4:	07d8      	lsls	r0, r3, #31
 80062d6:	d5ea      	bpl.n	80062ae <_printf_float+0x19a>
 80062d8:	1c4b      	adds	r3, r1, #1
 80062da:	e7e7      	b.n	80062ac <_printf_float+0x198>
 80062dc:	2900      	cmp	r1, #0
 80062de:	bfcc      	ite	gt
 80062e0:	2201      	movgt	r2, #1
 80062e2:	f1c1 0202 	rsble	r2, r1, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	e7e0      	b.n	80062ac <_printf_float+0x198>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	055a      	lsls	r2, r3, #21
 80062ee:	d407      	bmi.n	8006300 <_printf_float+0x1ec>
 80062f0:	6923      	ldr	r3, [r4, #16]
 80062f2:	4642      	mov	r2, r8
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	d12b      	bne.n	8006356 <_printf_float+0x242>
 80062fe:	e764      	b.n	80061ca <_printf_float+0xb6>
 8006300:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006304:	f240 80dd 	bls.w	80064c2 <_printf_float+0x3ae>
 8006308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800630c:	2200      	movs	r2, #0
 800630e:	2300      	movs	r3, #0
 8006310:	f7fa fb4a 	bl	80009a8 <__aeabi_dcmpeq>
 8006314:	2800      	cmp	r0, #0
 8006316:	d033      	beq.n	8006380 <_printf_float+0x26c>
 8006318:	2301      	movs	r3, #1
 800631a:	4631      	mov	r1, r6
 800631c:	4628      	mov	r0, r5
 800631e:	4a35      	ldr	r2, [pc, #212]	; (80063f4 <_printf_float+0x2e0>)
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f af51 	beq.w	80061ca <_printf_float+0xb6>
 8006328:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800632c:	429a      	cmp	r2, r3
 800632e:	db02      	blt.n	8006336 <_printf_float+0x222>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	07d8      	lsls	r0, r3, #31
 8006334:	d50f      	bpl.n	8006356 <_printf_float+0x242>
 8006336:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	f43f af42 	beq.w	80061ca <_printf_float+0xb6>
 8006346:	f04f 0800 	mov.w	r8, #0
 800634a:	f104 091a 	add.w	r9, r4, #26
 800634e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006350:	3b01      	subs	r3, #1
 8006352:	4543      	cmp	r3, r8
 8006354:	dc09      	bgt.n	800636a <_printf_float+0x256>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	079b      	lsls	r3, r3, #30
 800635a:	f100 8104 	bmi.w	8006566 <_printf_float+0x452>
 800635e:	68e0      	ldr	r0, [r4, #12]
 8006360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006362:	4298      	cmp	r0, r3
 8006364:	bfb8      	it	lt
 8006366:	4618      	movlt	r0, r3
 8006368:	e731      	b.n	80061ce <_printf_float+0xba>
 800636a:	2301      	movs	r3, #1
 800636c:	464a      	mov	r2, r9
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	47b8      	blx	r7
 8006374:	3001      	adds	r0, #1
 8006376:	f43f af28 	beq.w	80061ca <_printf_float+0xb6>
 800637a:	f108 0801 	add.w	r8, r8, #1
 800637e:	e7e6      	b.n	800634e <_printf_float+0x23a>
 8006380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006382:	2b00      	cmp	r3, #0
 8006384:	dc38      	bgt.n	80063f8 <_printf_float+0x2e4>
 8006386:	2301      	movs	r3, #1
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <_printf_float+0x2e0>)
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	f43f af1a 	beq.w	80061ca <_printf_float+0xb6>
 8006396:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800639a:	4313      	orrs	r3, r2
 800639c:	d102      	bne.n	80063a4 <_printf_float+0x290>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	07d9      	lsls	r1, r3, #31
 80063a2:	d5d8      	bpl.n	8006356 <_printf_float+0x242>
 80063a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063a8:	4631      	mov	r1, r6
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	f43f af0b 	beq.w	80061ca <_printf_float+0xb6>
 80063b4:	f04f 0900 	mov.w	r9, #0
 80063b8:	f104 0a1a 	add.w	sl, r4, #26
 80063bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063be:	425b      	negs	r3, r3
 80063c0:	454b      	cmp	r3, r9
 80063c2:	dc01      	bgt.n	80063c8 <_printf_float+0x2b4>
 80063c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c6:	e794      	b.n	80062f2 <_printf_float+0x1de>
 80063c8:	2301      	movs	r3, #1
 80063ca:	4652      	mov	r2, sl
 80063cc:	4631      	mov	r1, r6
 80063ce:	4628      	mov	r0, r5
 80063d0:	47b8      	blx	r7
 80063d2:	3001      	adds	r0, #1
 80063d4:	f43f aef9 	beq.w	80061ca <_printf_float+0xb6>
 80063d8:	f109 0901 	add.w	r9, r9, #1
 80063dc:	e7ee      	b.n	80063bc <_printf_float+0x2a8>
 80063de:	bf00      	nop
 80063e0:	7fefffff 	.word	0x7fefffff
 80063e4:	0800a982 	.word	0x0800a982
 80063e8:	0800a986 	.word	0x0800a986
 80063ec:	0800a98a 	.word	0x0800a98a
 80063f0:	0800a98e 	.word	0x0800a98e
 80063f4:	0800a992 	.word	0x0800a992
 80063f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063fc:	429a      	cmp	r2, r3
 80063fe:	bfa8      	it	ge
 8006400:	461a      	movge	r2, r3
 8006402:	2a00      	cmp	r2, #0
 8006404:	4691      	mov	r9, r2
 8006406:	dc37      	bgt.n	8006478 <_printf_float+0x364>
 8006408:	f04f 0b00 	mov.w	fp, #0
 800640c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006410:	f104 021a 	add.w	r2, r4, #26
 8006414:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006418:	ebaa 0309 	sub.w	r3, sl, r9
 800641c:	455b      	cmp	r3, fp
 800641e:	dc33      	bgt.n	8006488 <_printf_float+0x374>
 8006420:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006424:	429a      	cmp	r2, r3
 8006426:	db3b      	blt.n	80064a0 <_printf_float+0x38c>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	07da      	lsls	r2, r3, #31
 800642c:	d438      	bmi.n	80064a0 <_printf_float+0x38c>
 800642e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006432:	eba2 0903 	sub.w	r9, r2, r3
 8006436:	eba2 020a 	sub.w	r2, r2, sl
 800643a:	4591      	cmp	r9, r2
 800643c:	bfa8      	it	ge
 800643e:	4691      	movge	r9, r2
 8006440:	f1b9 0f00 	cmp.w	r9, #0
 8006444:	dc34      	bgt.n	80064b0 <_printf_float+0x39c>
 8006446:	f04f 0800 	mov.w	r8, #0
 800644a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800644e:	f104 0a1a 	add.w	sl, r4, #26
 8006452:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006456:	1a9b      	subs	r3, r3, r2
 8006458:	eba3 0309 	sub.w	r3, r3, r9
 800645c:	4543      	cmp	r3, r8
 800645e:	f77f af7a 	ble.w	8006356 <_printf_float+0x242>
 8006462:	2301      	movs	r3, #1
 8006464:	4652      	mov	r2, sl
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f aeac 	beq.w	80061ca <_printf_float+0xb6>
 8006472:	f108 0801 	add.w	r8, r8, #1
 8006476:	e7ec      	b.n	8006452 <_printf_float+0x33e>
 8006478:	4613      	mov	r3, r2
 800647a:	4631      	mov	r1, r6
 800647c:	4642      	mov	r2, r8
 800647e:	4628      	mov	r0, r5
 8006480:	47b8      	blx	r7
 8006482:	3001      	adds	r0, #1
 8006484:	d1c0      	bne.n	8006408 <_printf_float+0x2f4>
 8006486:	e6a0      	b.n	80061ca <_printf_float+0xb6>
 8006488:	2301      	movs	r3, #1
 800648a:	4631      	mov	r1, r6
 800648c:	4628      	mov	r0, r5
 800648e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006490:	47b8      	blx	r7
 8006492:	3001      	adds	r0, #1
 8006494:	f43f ae99 	beq.w	80061ca <_printf_float+0xb6>
 8006498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800649a:	f10b 0b01 	add.w	fp, fp, #1
 800649e:	e7b9      	b.n	8006414 <_printf_float+0x300>
 80064a0:	4631      	mov	r1, r6
 80064a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	d1bf      	bne.n	800642e <_printf_float+0x31a>
 80064ae:	e68c      	b.n	80061ca <_printf_float+0xb6>
 80064b0:	464b      	mov	r3, r9
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	eb08 020a 	add.w	r2, r8, sl
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	d1c2      	bne.n	8006446 <_printf_float+0x332>
 80064c0:	e683      	b.n	80061ca <_printf_float+0xb6>
 80064c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c4:	2a01      	cmp	r2, #1
 80064c6:	dc01      	bgt.n	80064cc <_printf_float+0x3b8>
 80064c8:	07db      	lsls	r3, r3, #31
 80064ca:	d539      	bpl.n	8006540 <_printf_float+0x42c>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4642      	mov	r2, r8
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	f43f ae77 	beq.w	80061ca <_printf_float+0xb6>
 80064dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	f43f ae6f 	beq.w	80061ca <_printf_float+0xb6>
 80064ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064f0:	2200      	movs	r2, #0
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80064f8:	f7fa fa56 	bl	80009a8 <__aeabi_dcmpeq>
 80064fc:	b9d8      	cbnz	r0, 8006536 <_printf_float+0x422>
 80064fe:	f109 33ff 	add.w	r3, r9, #4294967295
 8006502:	f108 0201 	add.w	r2, r8, #1
 8006506:	4631      	mov	r1, r6
 8006508:	4628      	mov	r0, r5
 800650a:	47b8      	blx	r7
 800650c:	3001      	adds	r0, #1
 800650e:	d10e      	bne.n	800652e <_printf_float+0x41a>
 8006510:	e65b      	b.n	80061ca <_printf_float+0xb6>
 8006512:	2301      	movs	r3, #1
 8006514:	464a      	mov	r2, r9
 8006516:	4631      	mov	r1, r6
 8006518:	4628      	mov	r0, r5
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f ae54 	beq.w	80061ca <_printf_float+0xb6>
 8006522:	f108 0801 	add.w	r8, r8, #1
 8006526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006528:	3b01      	subs	r3, #1
 800652a:	4543      	cmp	r3, r8
 800652c:	dcf1      	bgt.n	8006512 <_printf_float+0x3fe>
 800652e:	4653      	mov	r3, sl
 8006530:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006534:	e6de      	b.n	80062f4 <_printf_float+0x1e0>
 8006536:	f04f 0800 	mov.w	r8, #0
 800653a:	f104 091a 	add.w	r9, r4, #26
 800653e:	e7f2      	b.n	8006526 <_printf_float+0x412>
 8006540:	2301      	movs	r3, #1
 8006542:	4642      	mov	r2, r8
 8006544:	e7df      	b.n	8006506 <_printf_float+0x3f2>
 8006546:	2301      	movs	r3, #1
 8006548:	464a      	mov	r2, r9
 800654a:	4631      	mov	r1, r6
 800654c:	4628      	mov	r0, r5
 800654e:	47b8      	blx	r7
 8006550:	3001      	adds	r0, #1
 8006552:	f43f ae3a 	beq.w	80061ca <_printf_float+0xb6>
 8006556:	f108 0801 	add.w	r8, r8, #1
 800655a:	68e3      	ldr	r3, [r4, #12]
 800655c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800655e:	1a5b      	subs	r3, r3, r1
 8006560:	4543      	cmp	r3, r8
 8006562:	dcf0      	bgt.n	8006546 <_printf_float+0x432>
 8006564:	e6fb      	b.n	800635e <_printf_float+0x24a>
 8006566:	f04f 0800 	mov.w	r8, #0
 800656a:	f104 0919 	add.w	r9, r4, #25
 800656e:	e7f4      	b.n	800655a <_printf_float+0x446>

08006570 <_printf_common>:
 8006570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	4616      	mov	r6, r2
 8006576:	4699      	mov	r9, r3
 8006578:	688a      	ldr	r2, [r1, #8]
 800657a:	690b      	ldr	r3, [r1, #16]
 800657c:	4607      	mov	r7, r0
 800657e:	4293      	cmp	r3, r2
 8006580:	bfb8      	it	lt
 8006582:	4613      	movlt	r3, r2
 8006584:	6033      	str	r3, [r6, #0]
 8006586:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800658a:	460c      	mov	r4, r1
 800658c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006590:	b10a      	cbz	r2, 8006596 <_printf_common+0x26>
 8006592:	3301      	adds	r3, #1
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	0699      	lsls	r1, r3, #26
 800659a:	bf42      	ittt	mi
 800659c:	6833      	ldrmi	r3, [r6, #0]
 800659e:	3302      	addmi	r3, #2
 80065a0:	6033      	strmi	r3, [r6, #0]
 80065a2:	6825      	ldr	r5, [r4, #0]
 80065a4:	f015 0506 	ands.w	r5, r5, #6
 80065a8:	d106      	bne.n	80065b8 <_printf_common+0x48>
 80065aa:	f104 0a19 	add.w	sl, r4, #25
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	6832      	ldr	r2, [r6, #0]
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	dc2b      	bgt.n	8006610 <_printf_common+0xa0>
 80065b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065bc:	1e13      	subs	r3, r2, #0
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	bf18      	it	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	0692      	lsls	r2, r2, #26
 80065c6:	d430      	bmi.n	800662a <_printf_common+0xba>
 80065c8:	4649      	mov	r1, r9
 80065ca:	4638      	mov	r0, r7
 80065cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065d0:	47c0      	blx	r8
 80065d2:	3001      	adds	r0, #1
 80065d4:	d023      	beq.n	800661e <_printf_common+0xae>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	f003 0306 	and.w	r3, r3, #6
 80065de:	2b04      	cmp	r3, #4
 80065e0:	bf14      	ite	ne
 80065e2:	2500      	movne	r5, #0
 80065e4:	6833      	ldreq	r3, [r6, #0]
 80065e6:	f04f 0600 	mov.w	r6, #0
 80065ea:	bf08      	it	eq
 80065ec:	68e5      	ldreq	r5, [r4, #12]
 80065ee:	f104 041a 	add.w	r4, r4, #26
 80065f2:	bf08      	it	eq
 80065f4:	1aed      	subeq	r5, r5, r3
 80065f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80065fa:	bf08      	it	eq
 80065fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006600:	4293      	cmp	r3, r2
 8006602:	bfc4      	itt	gt
 8006604:	1a9b      	subgt	r3, r3, r2
 8006606:	18ed      	addgt	r5, r5, r3
 8006608:	42b5      	cmp	r5, r6
 800660a:	d11a      	bne.n	8006642 <_printf_common+0xd2>
 800660c:	2000      	movs	r0, #0
 800660e:	e008      	b.n	8006622 <_printf_common+0xb2>
 8006610:	2301      	movs	r3, #1
 8006612:	4652      	mov	r2, sl
 8006614:	4649      	mov	r1, r9
 8006616:	4638      	mov	r0, r7
 8006618:	47c0      	blx	r8
 800661a:	3001      	adds	r0, #1
 800661c:	d103      	bne.n	8006626 <_printf_common+0xb6>
 800661e:	f04f 30ff 	mov.w	r0, #4294967295
 8006622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006626:	3501      	adds	r5, #1
 8006628:	e7c1      	b.n	80065ae <_printf_common+0x3e>
 800662a:	2030      	movs	r0, #48	; 0x30
 800662c:	18e1      	adds	r1, r4, r3
 800662e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006638:	4422      	add	r2, r4
 800663a:	3302      	adds	r3, #2
 800663c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006640:	e7c2      	b.n	80065c8 <_printf_common+0x58>
 8006642:	2301      	movs	r3, #1
 8006644:	4622      	mov	r2, r4
 8006646:	4649      	mov	r1, r9
 8006648:	4638      	mov	r0, r7
 800664a:	47c0      	blx	r8
 800664c:	3001      	adds	r0, #1
 800664e:	d0e6      	beq.n	800661e <_printf_common+0xae>
 8006650:	3601      	adds	r6, #1
 8006652:	e7d9      	b.n	8006608 <_printf_common+0x98>

08006654 <_printf_i>:
 8006654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006658:	7e0f      	ldrb	r7, [r1, #24]
 800665a:	4691      	mov	r9, r2
 800665c:	2f78      	cmp	r7, #120	; 0x78
 800665e:	4680      	mov	r8, r0
 8006660:	460c      	mov	r4, r1
 8006662:	469a      	mov	sl, r3
 8006664:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800666a:	d807      	bhi.n	800667c <_printf_i+0x28>
 800666c:	2f62      	cmp	r7, #98	; 0x62
 800666e:	d80a      	bhi.n	8006686 <_printf_i+0x32>
 8006670:	2f00      	cmp	r7, #0
 8006672:	f000 80d5 	beq.w	8006820 <_printf_i+0x1cc>
 8006676:	2f58      	cmp	r7, #88	; 0x58
 8006678:	f000 80c1 	beq.w	80067fe <_printf_i+0x1aa>
 800667c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006684:	e03a      	b.n	80066fc <_printf_i+0xa8>
 8006686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800668a:	2b15      	cmp	r3, #21
 800668c:	d8f6      	bhi.n	800667c <_printf_i+0x28>
 800668e:	a101      	add	r1, pc, #4	; (adr r1, 8006694 <_printf_i+0x40>)
 8006690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006694:	080066ed 	.word	0x080066ed
 8006698:	08006701 	.word	0x08006701
 800669c:	0800667d 	.word	0x0800667d
 80066a0:	0800667d 	.word	0x0800667d
 80066a4:	0800667d 	.word	0x0800667d
 80066a8:	0800667d 	.word	0x0800667d
 80066ac:	08006701 	.word	0x08006701
 80066b0:	0800667d 	.word	0x0800667d
 80066b4:	0800667d 	.word	0x0800667d
 80066b8:	0800667d 	.word	0x0800667d
 80066bc:	0800667d 	.word	0x0800667d
 80066c0:	08006807 	.word	0x08006807
 80066c4:	0800672d 	.word	0x0800672d
 80066c8:	080067c1 	.word	0x080067c1
 80066cc:	0800667d 	.word	0x0800667d
 80066d0:	0800667d 	.word	0x0800667d
 80066d4:	08006829 	.word	0x08006829
 80066d8:	0800667d 	.word	0x0800667d
 80066dc:	0800672d 	.word	0x0800672d
 80066e0:	0800667d 	.word	0x0800667d
 80066e4:	0800667d 	.word	0x0800667d
 80066e8:	080067c9 	.word	0x080067c9
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	1d1a      	adds	r2, r3, #4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	602a      	str	r2, [r5, #0]
 80066f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0a0      	b.n	8006842 <_printf_i+0x1ee>
 8006700:	6820      	ldr	r0, [r4, #0]
 8006702:	682b      	ldr	r3, [r5, #0]
 8006704:	0607      	lsls	r7, r0, #24
 8006706:	f103 0104 	add.w	r1, r3, #4
 800670a:	6029      	str	r1, [r5, #0]
 800670c:	d501      	bpl.n	8006712 <_printf_i+0xbe>
 800670e:	681e      	ldr	r6, [r3, #0]
 8006710:	e003      	b.n	800671a <_printf_i+0xc6>
 8006712:	0646      	lsls	r6, r0, #25
 8006714:	d5fb      	bpl.n	800670e <_printf_i+0xba>
 8006716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800671a:	2e00      	cmp	r6, #0
 800671c:	da03      	bge.n	8006726 <_printf_i+0xd2>
 800671e:	232d      	movs	r3, #45	; 0x2d
 8006720:	4276      	negs	r6, r6
 8006722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006726:	230a      	movs	r3, #10
 8006728:	4859      	ldr	r0, [pc, #356]	; (8006890 <_printf_i+0x23c>)
 800672a:	e012      	b.n	8006752 <_printf_i+0xfe>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	6820      	ldr	r0, [r4, #0]
 8006730:	1d19      	adds	r1, r3, #4
 8006732:	6029      	str	r1, [r5, #0]
 8006734:	0605      	lsls	r5, r0, #24
 8006736:	d501      	bpl.n	800673c <_printf_i+0xe8>
 8006738:	681e      	ldr	r6, [r3, #0]
 800673a:	e002      	b.n	8006742 <_printf_i+0xee>
 800673c:	0641      	lsls	r1, r0, #25
 800673e:	d5fb      	bpl.n	8006738 <_printf_i+0xe4>
 8006740:	881e      	ldrh	r6, [r3, #0]
 8006742:	2f6f      	cmp	r7, #111	; 0x6f
 8006744:	bf0c      	ite	eq
 8006746:	2308      	moveq	r3, #8
 8006748:	230a      	movne	r3, #10
 800674a:	4851      	ldr	r0, [pc, #324]	; (8006890 <_printf_i+0x23c>)
 800674c:	2100      	movs	r1, #0
 800674e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006752:	6865      	ldr	r5, [r4, #4]
 8006754:	2d00      	cmp	r5, #0
 8006756:	bfa8      	it	ge
 8006758:	6821      	ldrge	r1, [r4, #0]
 800675a:	60a5      	str	r5, [r4, #8]
 800675c:	bfa4      	itt	ge
 800675e:	f021 0104 	bicge.w	r1, r1, #4
 8006762:	6021      	strge	r1, [r4, #0]
 8006764:	b90e      	cbnz	r6, 800676a <_printf_i+0x116>
 8006766:	2d00      	cmp	r5, #0
 8006768:	d04b      	beq.n	8006802 <_printf_i+0x1ae>
 800676a:	4615      	mov	r5, r2
 800676c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006770:	fb03 6711 	mls	r7, r3, r1, r6
 8006774:	5dc7      	ldrb	r7, [r0, r7]
 8006776:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800677a:	4637      	mov	r7, r6
 800677c:	42bb      	cmp	r3, r7
 800677e:	460e      	mov	r6, r1
 8006780:	d9f4      	bls.n	800676c <_printf_i+0x118>
 8006782:	2b08      	cmp	r3, #8
 8006784:	d10b      	bne.n	800679e <_printf_i+0x14a>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	07de      	lsls	r6, r3, #31
 800678a:	d508      	bpl.n	800679e <_printf_i+0x14a>
 800678c:	6923      	ldr	r3, [r4, #16]
 800678e:	6861      	ldr	r1, [r4, #4]
 8006790:	4299      	cmp	r1, r3
 8006792:	bfde      	ittt	le
 8006794:	2330      	movle	r3, #48	; 0x30
 8006796:	f805 3c01 	strble.w	r3, [r5, #-1]
 800679a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800679e:	1b52      	subs	r2, r2, r5
 80067a0:	6122      	str	r2, [r4, #16]
 80067a2:	464b      	mov	r3, r9
 80067a4:	4621      	mov	r1, r4
 80067a6:	4640      	mov	r0, r8
 80067a8:	f8cd a000 	str.w	sl, [sp]
 80067ac:	aa03      	add	r2, sp, #12
 80067ae:	f7ff fedf 	bl	8006570 <_printf_common>
 80067b2:	3001      	adds	r0, #1
 80067b4:	d14a      	bne.n	800684c <_printf_i+0x1f8>
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	b004      	add	sp, #16
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	f043 0320 	orr.w	r3, r3, #32
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	2778      	movs	r7, #120	; 0x78
 80067ca:	4832      	ldr	r0, [pc, #200]	; (8006894 <_printf_i+0x240>)
 80067cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	6829      	ldr	r1, [r5, #0]
 80067d4:	061f      	lsls	r7, r3, #24
 80067d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80067da:	d402      	bmi.n	80067e2 <_printf_i+0x18e>
 80067dc:	065f      	lsls	r7, r3, #25
 80067de:	bf48      	it	mi
 80067e0:	b2b6      	uxthmi	r6, r6
 80067e2:	07df      	lsls	r7, r3, #31
 80067e4:	bf48      	it	mi
 80067e6:	f043 0320 	orrmi.w	r3, r3, #32
 80067ea:	6029      	str	r1, [r5, #0]
 80067ec:	bf48      	it	mi
 80067ee:	6023      	strmi	r3, [r4, #0]
 80067f0:	b91e      	cbnz	r6, 80067fa <_printf_i+0x1a6>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f023 0320 	bic.w	r3, r3, #32
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	2310      	movs	r3, #16
 80067fc:	e7a6      	b.n	800674c <_printf_i+0xf8>
 80067fe:	4824      	ldr	r0, [pc, #144]	; (8006890 <_printf_i+0x23c>)
 8006800:	e7e4      	b.n	80067cc <_printf_i+0x178>
 8006802:	4615      	mov	r5, r2
 8006804:	e7bd      	b.n	8006782 <_printf_i+0x12e>
 8006806:	682b      	ldr	r3, [r5, #0]
 8006808:	6826      	ldr	r6, [r4, #0]
 800680a:	1d18      	adds	r0, r3, #4
 800680c:	6961      	ldr	r1, [r4, #20]
 800680e:	6028      	str	r0, [r5, #0]
 8006810:	0635      	lsls	r5, r6, #24
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	d501      	bpl.n	800681a <_printf_i+0x1c6>
 8006816:	6019      	str	r1, [r3, #0]
 8006818:	e002      	b.n	8006820 <_printf_i+0x1cc>
 800681a:	0670      	lsls	r0, r6, #25
 800681c:	d5fb      	bpl.n	8006816 <_printf_i+0x1c2>
 800681e:	8019      	strh	r1, [r3, #0]
 8006820:	2300      	movs	r3, #0
 8006822:	4615      	mov	r5, r2
 8006824:	6123      	str	r3, [r4, #16]
 8006826:	e7bc      	b.n	80067a2 <_printf_i+0x14e>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	2100      	movs	r1, #0
 800682c:	1d1a      	adds	r2, r3, #4
 800682e:	602a      	str	r2, [r5, #0]
 8006830:	681d      	ldr	r5, [r3, #0]
 8006832:	6862      	ldr	r2, [r4, #4]
 8006834:	4628      	mov	r0, r5
 8006836:	f000 fc28 	bl	800708a <memchr>
 800683a:	b108      	cbz	r0, 8006840 <_printf_i+0x1ec>
 800683c:	1b40      	subs	r0, r0, r5
 800683e:	6060      	str	r0, [r4, #4]
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	2300      	movs	r3, #0
 8006846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800684a:	e7aa      	b.n	80067a2 <_printf_i+0x14e>
 800684c:	462a      	mov	r2, r5
 800684e:	4649      	mov	r1, r9
 8006850:	4640      	mov	r0, r8
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	47d0      	blx	sl
 8006856:	3001      	adds	r0, #1
 8006858:	d0ad      	beq.n	80067b6 <_printf_i+0x162>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	079b      	lsls	r3, r3, #30
 800685e:	d413      	bmi.n	8006888 <_printf_i+0x234>
 8006860:	68e0      	ldr	r0, [r4, #12]
 8006862:	9b03      	ldr	r3, [sp, #12]
 8006864:	4298      	cmp	r0, r3
 8006866:	bfb8      	it	lt
 8006868:	4618      	movlt	r0, r3
 800686a:	e7a6      	b.n	80067ba <_printf_i+0x166>
 800686c:	2301      	movs	r3, #1
 800686e:	4632      	mov	r2, r6
 8006870:	4649      	mov	r1, r9
 8006872:	4640      	mov	r0, r8
 8006874:	47d0      	blx	sl
 8006876:	3001      	adds	r0, #1
 8006878:	d09d      	beq.n	80067b6 <_printf_i+0x162>
 800687a:	3501      	adds	r5, #1
 800687c:	68e3      	ldr	r3, [r4, #12]
 800687e:	9903      	ldr	r1, [sp, #12]
 8006880:	1a5b      	subs	r3, r3, r1
 8006882:	42ab      	cmp	r3, r5
 8006884:	dcf2      	bgt.n	800686c <_printf_i+0x218>
 8006886:	e7eb      	b.n	8006860 <_printf_i+0x20c>
 8006888:	2500      	movs	r5, #0
 800688a:	f104 0619 	add.w	r6, r4, #25
 800688e:	e7f5      	b.n	800687c <_printf_i+0x228>
 8006890:	0800a994 	.word	0x0800a994
 8006894:	0800a9a5 	.word	0x0800a9a5

08006898 <_scanf_float>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	b087      	sub	sp, #28
 800689e:	9303      	str	r3, [sp, #12]
 80068a0:	688b      	ldr	r3, [r1, #8]
 80068a2:	4617      	mov	r7, r2
 80068a4:	1e5a      	subs	r2, r3, #1
 80068a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80068aa:	bf85      	ittet	hi
 80068ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80068b0:	195b      	addhi	r3, r3, r5
 80068b2:	2300      	movls	r3, #0
 80068b4:	9302      	strhi	r3, [sp, #8]
 80068b6:	bf88      	it	hi
 80068b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80068bc:	468b      	mov	fp, r1
 80068be:	f04f 0500 	mov.w	r5, #0
 80068c2:	bf8c      	ite	hi
 80068c4:	608b      	strhi	r3, [r1, #8]
 80068c6:	9302      	strls	r3, [sp, #8]
 80068c8:	680b      	ldr	r3, [r1, #0]
 80068ca:	4680      	mov	r8, r0
 80068cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80068d0:	f84b 3b1c 	str.w	r3, [fp], #28
 80068d4:	460c      	mov	r4, r1
 80068d6:	465e      	mov	r6, fp
 80068d8:	46aa      	mov	sl, r5
 80068da:	46a9      	mov	r9, r5
 80068dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068e0:	9501      	str	r5, [sp, #4]
 80068e2:	68a2      	ldr	r2, [r4, #8]
 80068e4:	b152      	cbz	r2, 80068fc <_scanf_float+0x64>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b4e      	cmp	r3, #78	; 0x4e
 80068ec:	d864      	bhi.n	80069b8 <_scanf_float+0x120>
 80068ee:	2b40      	cmp	r3, #64	; 0x40
 80068f0:	d83c      	bhi.n	800696c <_scanf_float+0xd4>
 80068f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80068f6:	b2c8      	uxtb	r0, r1
 80068f8:	280e      	cmp	r0, #14
 80068fa:	d93a      	bls.n	8006972 <_scanf_float+0xda>
 80068fc:	f1b9 0f00 	cmp.w	r9, #0
 8006900:	d003      	beq.n	800690a <_scanf_float+0x72>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800690e:	f1ba 0f01 	cmp.w	sl, #1
 8006912:	f200 8113 	bhi.w	8006b3c <_scanf_float+0x2a4>
 8006916:	455e      	cmp	r6, fp
 8006918:	f200 8105 	bhi.w	8006b26 <_scanf_float+0x28e>
 800691c:	2501      	movs	r5, #1
 800691e:	4628      	mov	r0, r5
 8006920:	b007      	add	sp, #28
 8006922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006926:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800692a:	2a0d      	cmp	r2, #13
 800692c:	d8e6      	bhi.n	80068fc <_scanf_float+0x64>
 800692e:	a101      	add	r1, pc, #4	; (adr r1, 8006934 <_scanf_float+0x9c>)
 8006930:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006934:	08006a73 	.word	0x08006a73
 8006938:	080068fd 	.word	0x080068fd
 800693c:	080068fd 	.word	0x080068fd
 8006940:	080068fd 	.word	0x080068fd
 8006944:	08006ad3 	.word	0x08006ad3
 8006948:	08006aab 	.word	0x08006aab
 800694c:	080068fd 	.word	0x080068fd
 8006950:	080068fd 	.word	0x080068fd
 8006954:	08006a81 	.word	0x08006a81
 8006958:	080068fd 	.word	0x080068fd
 800695c:	080068fd 	.word	0x080068fd
 8006960:	080068fd 	.word	0x080068fd
 8006964:	080068fd 	.word	0x080068fd
 8006968:	08006a39 	.word	0x08006a39
 800696c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006970:	e7db      	b.n	800692a <_scanf_float+0x92>
 8006972:	290e      	cmp	r1, #14
 8006974:	d8c2      	bhi.n	80068fc <_scanf_float+0x64>
 8006976:	a001      	add	r0, pc, #4	; (adr r0, 800697c <_scanf_float+0xe4>)
 8006978:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800697c:	08006a2b 	.word	0x08006a2b
 8006980:	080068fd 	.word	0x080068fd
 8006984:	08006a2b 	.word	0x08006a2b
 8006988:	08006abf 	.word	0x08006abf
 800698c:	080068fd 	.word	0x080068fd
 8006990:	080069d9 	.word	0x080069d9
 8006994:	08006a15 	.word	0x08006a15
 8006998:	08006a15 	.word	0x08006a15
 800699c:	08006a15 	.word	0x08006a15
 80069a0:	08006a15 	.word	0x08006a15
 80069a4:	08006a15 	.word	0x08006a15
 80069a8:	08006a15 	.word	0x08006a15
 80069ac:	08006a15 	.word	0x08006a15
 80069b0:	08006a15 	.word	0x08006a15
 80069b4:	08006a15 	.word	0x08006a15
 80069b8:	2b6e      	cmp	r3, #110	; 0x6e
 80069ba:	d809      	bhi.n	80069d0 <_scanf_float+0x138>
 80069bc:	2b60      	cmp	r3, #96	; 0x60
 80069be:	d8b2      	bhi.n	8006926 <_scanf_float+0x8e>
 80069c0:	2b54      	cmp	r3, #84	; 0x54
 80069c2:	d077      	beq.n	8006ab4 <_scanf_float+0x21c>
 80069c4:	2b59      	cmp	r3, #89	; 0x59
 80069c6:	d199      	bne.n	80068fc <_scanf_float+0x64>
 80069c8:	2d07      	cmp	r5, #7
 80069ca:	d197      	bne.n	80068fc <_scanf_float+0x64>
 80069cc:	2508      	movs	r5, #8
 80069ce:	e029      	b.n	8006a24 <_scanf_float+0x18c>
 80069d0:	2b74      	cmp	r3, #116	; 0x74
 80069d2:	d06f      	beq.n	8006ab4 <_scanf_float+0x21c>
 80069d4:	2b79      	cmp	r3, #121	; 0x79
 80069d6:	e7f6      	b.n	80069c6 <_scanf_float+0x12e>
 80069d8:	6821      	ldr	r1, [r4, #0]
 80069da:	05c8      	lsls	r0, r1, #23
 80069dc:	d51a      	bpl.n	8006a14 <_scanf_float+0x17c>
 80069de:	9b02      	ldr	r3, [sp, #8]
 80069e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80069e4:	6021      	str	r1, [r4, #0]
 80069e6:	f109 0901 	add.w	r9, r9, #1
 80069ea:	b11b      	cbz	r3, 80069f4 <_scanf_float+0x15c>
 80069ec:	3b01      	subs	r3, #1
 80069ee:	3201      	adds	r2, #1
 80069f0:	9302      	str	r3, [sp, #8]
 80069f2:	60a2      	str	r2, [r4, #8]
 80069f4:	68a3      	ldr	r3, [r4, #8]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	60a3      	str	r3, [r4, #8]
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	3301      	adds	r3, #1
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	607b      	str	r3, [r7, #4]
 8006a08:	f340 8084 	ble.w	8006b14 <_scanf_float+0x27c>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	e766      	b.n	80068e2 <_scanf_float+0x4a>
 8006a14:	eb1a 0f05 	cmn.w	sl, r5
 8006a18:	f47f af70 	bne.w	80068fc <_scanf_float+0x64>
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a22:	6022      	str	r2, [r4, #0]
 8006a24:	f806 3b01 	strb.w	r3, [r6], #1
 8006a28:	e7e4      	b.n	80069f4 <_scanf_float+0x15c>
 8006a2a:	6822      	ldr	r2, [r4, #0]
 8006a2c:	0610      	lsls	r0, r2, #24
 8006a2e:	f57f af65 	bpl.w	80068fc <_scanf_float+0x64>
 8006a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a36:	e7f4      	b.n	8006a22 <_scanf_float+0x18a>
 8006a38:	f1ba 0f00 	cmp.w	sl, #0
 8006a3c:	d10e      	bne.n	8006a5c <_scanf_float+0x1c4>
 8006a3e:	f1b9 0f00 	cmp.w	r9, #0
 8006a42:	d10e      	bne.n	8006a62 <_scanf_float+0x1ca>
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a4e:	d108      	bne.n	8006a62 <_scanf_float+0x1ca>
 8006a50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a54:	f04f 0a01 	mov.w	sl, #1
 8006a58:	6022      	str	r2, [r4, #0]
 8006a5a:	e7e3      	b.n	8006a24 <_scanf_float+0x18c>
 8006a5c:	f1ba 0f02 	cmp.w	sl, #2
 8006a60:	d055      	beq.n	8006b0e <_scanf_float+0x276>
 8006a62:	2d01      	cmp	r5, #1
 8006a64:	d002      	beq.n	8006a6c <_scanf_float+0x1d4>
 8006a66:	2d04      	cmp	r5, #4
 8006a68:	f47f af48 	bne.w	80068fc <_scanf_float+0x64>
 8006a6c:	3501      	adds	r5, #1
 8006a6e:	b2ed      	uxtb	r5, r5
 8006a70:	e7d8      	b.n	8006a24 <_scanf_float+0x18c>
 8006a72:	f1ba 0f01 	cmp.w	sl, #1
 8006a76:	f47f af41 	bne.w	80068fc <_scanf_float+0x64>
 8006a7a:	f04f 0a02 	mov.w	sl, #2
 8006a7e:	e7d1      	b.n	8006a24 <_scanf_float+0x18c>
 8006a80:	b97d      	cbnz	r5, 8006aa2 <_scanf_float+0x20a>
 8006a82:	f1b9 0f00 	cmp.w	r9, #0
 8006a86:	f47f af3c 	bne.w	8006902 <_scanf_float+0x6a>
 8006a8a:	6822      	ldr	r2, [r4, #0]
 8006a8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a94:	f47f af39 	bne.w	800690a <_scanf_float+0x72>
 8006a98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a9c:	2501      	movs	r5, #1
 8006a9e:	6022      	str	r2, [r4, #0]
 8006aa0:	e7c0      	b.n	8006a24 <_scanf_float+0x18c>
 8006aa2:	2d03      	cmp	r5, #3
 8006aa4:	d0e2      	beq.n	8006a6c <_scanf_float+0x1d4>
 8006aa6:	2d05      	cmp	r5, #5
 8006aa8:	e7de      	b.n	8006a68 <_scanf_float+0x1d0>
 8006aaa:	2d02      	cmp	r5, #2
 8006aac:	f47f af26 	bne.w	80068fc <_scanf_float+0x64>
 8006ab0:	2503      	movs	r5, #3
 8006ab2:	e7b7      	b.n	8006a24 <_scanf_float+0x18c>
 8006ab4:	2d06      	cmp	r5, #6
 8006ab6:	f47f af21 	bne.w	80068fc <_scanf_float+0x64>
 8006aba:	2507      	movs	r5, #7
 8006abc:	e7b2      	b.n	8006a24 <_scanf_float+0x18c>
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	0591      	lsls	r1, r2, #22
 8006ac2:	f57f af1b 	bpl.w	80068fc <_scanf_float+0x64>
 8006ac6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006aca:	6022      	str	r2, [r4, #0]
 8006acc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ad0:	e7a8      	b.n	8006a24 <_scanf_float+0x18c>
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ad8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006adc:	d006      	beq.n	8006aec <_scanf_float+0x254>
 8006ade:	0550      	lsls	r0, r2, #21
 8006ae0:	f57f af0c 	bpl.w	80068fc <_scanf_float+0x64>
 8006ae4:	f1b9 0f00 	cmp.w	r9, #0
 8006ae8:	f43f af0f 	beq.w	800690a <_scanf_float+0x72>
 8006aec:	0591      	lsls	r1, r2, #22
 8006aee:	bf58      	it	pl
 8006af0:	9901      	ldrpl	r1, [sp, #4]
 8006af2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006af6:	bf58      	it	pl
 8006af8:	eba9 0101 	subpl.w	r1, r9, r1
 8006afc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b00:	f04f 0900 	mov.w	r9, #0
 8006b04:	bf58      	it	pl
 8006b06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b0a:	6022      	str	r2, [r4, #0]
 8006b0c:	e78a      	b.n	8006a24 <_scanf_float+0x18c>
 8006b0e:	f04f 0a03 	mov.w	sl, #3
 8006b12:	e787      	b.n	8006a24 <_scanf_float+0x18c>
 8006b14:	4639      	mov	r1, r7
 8006b16:	4640      	mov	r0, r8
 8006b18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b1c:	4798      	blx	r3
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f43f aedf 	beq.w	80068e2 <_scanf_float+0x4a>
 8006b24:	e6ea      	b.n	80068fc <_scanf_float+0x64>
 8006b26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b2a:	463a      	mov	r2, r7
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b32:	4798      	blx	r3
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	6123      	str	r3, [r4, #16]
 8006b3a:	e6ec      	b.n	8006916 <_scanf_float+0x7e>
 8006b3c:	1e6b      	subs	r3, r5, #1
 8006b3e:	2b06      	cmp	r3, #6
 8006b40:	d825      	bhi.n	8006b8e <_scanf_float+0x2f6>
 8006b42:	2d02      	cmp	r5, #2
 8006b44:	d836      	bhi.n	8006bb4 <_scanf_float+0x31c>
 8006b46:	455e      	cmp	r6, fp
 8006b48:	f67f aee8 	bls.w	800691c <_scanf_float+0x84>
 8006b4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b50:	463a      	mov	r2, r7
 8006b52:	4640      	mov	r0, r8
 8006b54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b58:	4798      	blx	r3
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	6123      	str	r3, [r4, #16]
 8006b60:	e7f1      	b.n	8006b46 <_scanf_float+0x2ae>
 8006b62:	9802      	ldr	r0, [sp, #8]
 8006b64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b68:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b6c:	463a      	mov	r2, r7
 8006b6e:	9002      	str	r0, [sp, #8]
 8006b70:	4640      	mov	r0, r8
 8006b72:	4798      	blx	r3
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	6123      	str	r3, [r4, #16]
 8006b7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b7e:	fa5f fa8a 	uxtb.w	sl, sl
 8006b82:	f1ba 0f02 	cmp.w	sl, #2
 8006b86:	d1ec      	bne.n	8006b62 <_scanf_float+0x2ca>
 8006b88:	3d03      	subs	r5, #3
 8006b8a:	b2ed      	uxtb	r5, r5
 8006b8c:	1b76      	subs	r6, r6, r5
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	05da      	lsls	r2, r3, #23
 8006b92:	d52f      	bpl.n	8006bf4 <_scanf_float+0x35c>
 8006b94:	055b      	lsls	r3, r3, #21
 8006b96:	d510      	bpl.n	8006bba <_scanf_float+0x322>
 8006b98:	455e      	cmp	r6, fp
 8006b9a:	f67f aebf 	bls.w	800691c <_scanf_float+0x84>
 8006b9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ba2:	463a      	mov	r2, r7
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006baa:	4798      	blx	r3
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	e7f1      	b.n	8006b98 <_scanf_float+0x300>
 8006bb4:	46aa      	mov	sl, r5
 8006bb6:	9602      	str	r6, [sp, #8]
 8006bb8:	e7df      	b.n	8006b7a <_scanf_float+0x2e2>
 8006bba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	2965      	cmp	r1, #101	; 0x65
 8006bc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bc6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	d00c      	beq.n	8006be8 <_scanf_float+0x350>
 8006bce:	2945      	cmp	r1, #69	; 0x45
 8006bd0:	d00a      	beq.n	8006be8 <_scanf_float+0x350>
 8006bd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bd6:	463a      	mov	r2, r7
 8006bd8:	4640      	mov	r0, r8
 8006bda:	4798      	blx	r3
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	1eb5      	subs	r5, r6, #2
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	463a      	mov	r2, r7
 8006bea:	4640      	mov	r0, r8
 8006bec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bf0:	4798      	blx	r3
 8006bf2:	462e      	mov	r6, r5
 8006bf4:	6825      	ldr	r5, [r4, #0]
 8006bf6:	f015 0510 	ands.w	r5, r5, #16
 8006bfa:	d155      	bne.n	8006ca8 <_scanf_float+0x410>
 8006bfc:	7035      	strb	r5, [r6, #0]
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c08:	d11d      	bne.n	8006c46 <_scanf_float+0x3ae>
 8006c0a:	9b01      	ldr	r3, [sp, #4]
 8006c0c:	454b      	cmp	r3, r9
 8006c0e:	eba3 0209 	sub.w	r2, r3, r9
 8006c12:	d125      	bne.n	8006c60 <_scanf_float+0x3c8>
 8006c14:	2200      	movs	r2, #0
 8006c16:	4659      	mov	r1, fp
 8006c18:	4640      	mov	r0, r8
 8006c1a:	f002 fc69 	bl	80094f0 <_strtod_r>
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	f8d4 c000 	ldr.w	ip, [r4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f01c 0f02 	tst.w	ip, #2
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	460f      	mov	r7, r1
 8006c2e:	f103 0204 	add.w	r2, r3, #4
 8006c32:	d020      	beq.n	8006c76 <_scanf_float+0x3de>
 8006c34:	9903      	ldr	r1, [sp, #12]
 8006c36:	600a      	str	r2, [r1, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	e9c3 6700 	strd	r6, r7, [r3]
 8006c3e:	68e3      	ldr	r3, [r4, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	60e3      	str	r3, [r4, #12]
 8006c44:	e66b      	b.n	800691e <_scanf_float+0x86>
 8006c46:	9b04      	ldr	r3, [sp, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0e3      	beq.n	8006c14 <_scanf_float+0x37c>
 8006c4c:	9905      	ldr	r1, [sp, #20]
 8006c4e:	230a      	movs	r3, #10
 8006c50:	462a      	mov	r2, r5
 8006c52:	4640      	mov	r0, r8
 8006c54:	3101      	adds	r1, #1
 8006c56:	f002 fccf 	bl	80095f8 <_strtol_r>
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	9e05      	ldr	r6, [sp, #20]
 8006c5e:	1ac2      	subs	r2, r0, r3
 8006c60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c64:	429e      	cmp	r6, r3
 8006c66:	bf28      	it	cs
 8006c68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	490f      	ldr	r1, [pc, #60]	; (8006cac <_scanf_float+0x414>)
 8006c70:	f000 f916 	bl	8006ea0 <siprintf>
 8006c74:	e7ce      	b.n	8006c14 <_scanf_float+0x37c>
 8006c76:	f01c 0f04 	tst.w	ip, #4
 8006c7a:	d1db      	bne.n	8006c34 <_scanf_float+0x39c>
 8006c7c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006c80:	f8cc 2000 	str.w	r2, [ip]
 8006c84:	f8d3 8000 	ldr.w	r8, [r3]
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	f7f9 febe 	bl	8000a0c <__aeabi_dcmpun>
 8006c90:	b128      	cbz	r0, 8006c9e <_scanf_float+0x406>
 8006c92:	4807      	ldr	r0, [pc, #28]	; (8006cb0 <_scanf_float+0x418>)
 8006c94:	f000 fa08 	bl	80070a8 <nanf>
 8006c98:	f8c8 0000 	str.w	r0, [r8]
 8006c9c:	e7cf      	b.n	8006c3e <_scanf_float+0x3a6>
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 ff11 	bl	8000ac8 <__aeabi_d2f>
 8006ca6:	e7f7      	b.n	8006c98 <_scanf_float+0x400>
 8006ca8:	2500      	movs	r5, #0
 8006caa:	e638      	b.n	800691e <_scanf_float+0x86>
 8006cac:	0800a9b6 	.word	0x0800a9b6
 8006cb0:	0800ad4d 	.word	0x0800ad4d

08006cb4 <std>:
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	b510      	push	{r4, lr}
 8006cb8:	4604      	mov	r4, r0
 8006cba:	e9c0 3300 	strd	r3, r3, [r0]
 8006cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cc2:	6083      	str	r3, [r0, #8]
 8006cc4:	8181      	strh	r1, [r0, #12]
 8006cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8006cc8:	81c2      	strh	r2, [r0, #14]
 8006cca:	6183      	str	r3, [r0, #24]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	2208      	movs	r2, #8
 8006cd0:	305c      	adds	r0, #92	; 0x5c
 8006cd2:	f000 f948 	bl	8006f66 <memset>
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <std+0x58>)
 8006cd8:	6224      	str	r4, [r4, #32]
 8006cda:	6263      	str	r3, [r4, #36]	; 0x24
 8006cdc:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <std+0x5c>)
 8006cde:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <std+0x60>)
 8006ce2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <std+0x64>)
 8006ce6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ce8:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <std+0x68>)
 8006cea:	429c      	cmp	r4, r3
 8006cec:	d006      	beq.n	8006cfc <std+0x48>
 8006cee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006cf2:	4294      	cmp	r4, r2
 8006cf4:	d002      	beq.n	8006cfc <std+0x48>
 8006cf6:	33d0      	adds	r3, #208	; 0xd0
 8006cf8:	429c      	cmp	r4, r3
 8006cfa:	d105      	bne.n	8006d08 <std+0x54>
 8006cfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d04:	f000 b9be 	b.w	8007084 <__retarget_lock_init_recursive>
 8006d08:	bd10      	pop	{r4, pc}
 8006d0a:	bf00      	nop
 8006d0c:	08006ee1 	.word	0x08006ee1
 8006d10:	08006f03 	.word	0x08006f03
 8006d14:	08006f3b 	.word	0x08006f3b
 8006d18:	08006f5f 	.word	0x08006f5f
 8006d1c:	20000448 	.word	0x20000448

08006d20 <stdio_exit_handler>:
 8006d20:	4a02      	ldr	r2, [pc, #8]	; (8006d2c <stdio_exit_handler+0xc>)
 8006d22:	4903      	ldr	r1, [pc, #12]	; (8006d30 <stdio_exit_handler+0x10>)
 8006d24:	4803      	ldr	r0, [pc, #12]	; (8006d34 <stdio_exit_handler+0x14>)
 8006d26:	f000 b869 	b.w	8006dfc <_fwalk_sglue>
 8006d2a:	bf00      	nop
 8006d2c:	2000000c 	.word	0x2000000c
 8006d30:	080099b1 	.word	0x080099b1
 8006d34:	20000018 	.word	0x20000018

08006d38 <cleanup_stdio>:
 8006d38:	6841      	ldr	r1, [r0, #4]
 8006d3a:	4b0c      	ldr	r3, [pc, #48]	; (8006d6c <cleanup_stdio+0x34>)
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	4299      	cmp	r1, r3
 8006d40:	4604      	mov	r4, r0
 8006d42:	d001      	beq.n	8006d48 <cleanup_stdio+0x10>
 8006d44:	f002 fe34 	bl	80099b0 <_fflush_r>
 8006d48:	68a1      	ldr	r1, [r4, #8]
 8006d4a:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <cleanup_stdio+0x38>)
 8006d4c:	4299      	cmp	r1, r3
 8006d4e:	d002      	beq.n	8006d56 <cleanup_stdio+0x1e>
 8006d50:	4620      	mov	r0, r4
 8006d52:	f002 fe2d 	bl	80099b0 <_fflush_r>
 8006d56:	68e1      	ldr	r1, [r4, #12]
 8006d58:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <cleanup_stdio+0x3c>)
 8006d5a:	4299      	cmp	r1, r3
 8006d5c:	d004      	beq.n	8006d68 <cleanup_stdio+0x30>
 8006d5e:	4620      	mov	r0, r4
 8006d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d64:	f002 be24 	b.w	80099b0 <_fflush_r>
 8006d68:	bd10      	pop	{r4, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000448 	.word	0x20000448
 8006d70:	200004b0 	.word	0x200004b0
 8006d74:	20000518 	.word	0x20000518

08006d78 <global_stdio_init.part.0>:
 8006d78:	b510      	push	{r4, lr}
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <global_stdio_init.part.0+0x30>)
 8006d7c:	4c0b      	ldr	r4, [pc, #44]	; (8006dac <global_stdio_init.part.0+0x34>)
 8006d7e:	4a0c      	ldr	r2, [pc, #48]	; (8006db0 <global_stdio_init.part.0+0x38>)
 8006d80:	4620      	mov	r0, r4
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	2104      	movs	r1, #4
 8006d86:	2200      	movs	r2, #0
 8006d88:	f7ff ff94 	bl	8006cb4 <std>
 8006d8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d90:	2201      	movs	r2, #1
 8006d92:	2109      	movs	r1, #9
 8006d94:	f7ff ff8e 	bl	8006cb4 <std>
 8006d98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da2:	2112      	movs	r1, #18
 8006da4:	f7ff bf86 	b.w	8006cb4 <std>
 8006da8:	20000580 	.word	0x20000580
 8006dac:	20000448 	.word	0x20000448
 8006db0:	08006d21 	.word	0x08006d21

08006db4 <__sfp_lock_acquire>:
 8006db4:	4801      	ldr	r0, [pc, #4]	; (8006dbc <__sfp_lock_acquire+0x8>)
 8006db6:	f000 b966 	b.w	8007086 <__retarget_lock_acquire_recursive>
 8006dba:	bf00      	nop
 8006dbc:	20000589 	.word	0x20000589

08006dc0 <__sfp_lock_release>:
 8006dc0:	4801      	ldr	r0, [pc, #4]	; (8006dc8 <__sfp_lock_release+0x8>)
 8006dc2:	f000 b961 	b.w	8007088 <__retarget_lock_release_recursive>
 8006dc6:	bf00      	nop
 8006dc8:	20000589 	.word	0x20000589

08006dcc <__sinit>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	4604      	mov	r4, r0
 8006dd0:	f7ff fff0 	bl	8006db4 <__sfp_lock_acquire>
 8006dd4:	6a23      	ldr	r3, [r4, #32]
 8006dd6:	b11b      	cbz	r3, 8006de0 <__sinit+0x14>
 8006dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ddc:	f7ff bff0 	b.w	8006dc0 <__sfp_lock_release>
 8006de0:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <__sinit+0x28>)
 8006de2:	6223      	str	r3, [r4, #32]
 8006de4:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <__sinit+0x2c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1f5      	bne.n	8006dd8 <__sinit+0xc>
 8006dec:	f7ff ffc4 	bl	8006d78 <global_stdio_init.part.0>
 8006df0:	e7f2      	b.n	8006dd8 <__sinit+0xc>
 8006df2:	bf00      	nop
 8006df4:	08006d39 	.word	0x08006d39
 8006df8:	20000580 	.word	0x20000580

08006dfc <_fwalk_sglue>:
 8006dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e00:	4607      	mov	r7, r0
 8006e02:	4688      	mov	r8, r1
 8006e04:	4614      	mov	r4, r2
 8006e06:	2600      	movs	r6, #0
 8006e08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e0c:	f1b9 0901 	subs.w	r9, r9, #1
 8006e10:	d505      	bpl.n	8006e1e <_fwalk_sglue+0x22>
 8006e12:	6824      	ldr	r4, [r4, #0]
 8006e14:	2c00      	cmp	r4, #0
 8006e16:	d1f7      	bne.n	8006e08 <_fwalk_sglue+0xc>
 8006e18:	4630      	mov	r0, r6
 8006e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1e:	89ab      	ldrh	r3, [r5, #12]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d907      	bls.n	8006e34 <_fwalk_sglue+0x38>
 8006e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	d003      	beq.n	8006e34 <_fwalk_sglue+0x38>
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	4638      	mov	r0, r7
 8006e30:	47c0      	blx	r8
 8006e32:	4306      	orrs	r6, r0
 8006e34:	3568      	adds	r5, #104	; 0x68
 8006e36:	e7e9      	b.n	8006e0c <_fwalk_sglue+0x10>

08006e38 <sniprintf>:
 8006e38:	b40c      	push	{r2, r3}
 8006e3a:	b530      	push	{r4, r5, lr}
 8006e3c:	4b17      	ldr	r3, [pc, #92]	; (8006e9c <sniprintf+0x64>)
 8006e3e:	1e0c      	subs	r4, r1, #0
 8006e40:	681d      	ldr	r5, [r3, #0]
 8006e42:	b09d      	sub	sp, #116	; 0x74
 8006e44:	da08      	bge.n	8006e58 <sniprintf+0x20>
 8006e46:	238b      	movs	r3, #139	; 0x8b
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	602b      	str	r3, [r5, #0]
 8006e4e:	b01d      	add	sp, #116	; 0x74
 8006e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e54:	b002      	add	sp, #8
 8006e56:	4770      	bx	lr
 8006e58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006e5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e60:	bf0c      	ite	eq
 8006e62:	4623      	moveq	r3, r4
 8006e64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	9307      	str	r3, [sp, #28]
 8006e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e70:	9002      	str	r0, [sp, #8]
 8006e72:	9006      	str	r0, [sp, #24]
 8006e74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e78:	4628      	mov	r0, r5
 8006e7a:	ab21      	add	r3, sp, #132	; 0x84
 8006e7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e7e:	a902      	add	r1, sp, #8
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	f002 fc15 	bl	80096b0 <_svfiprintf_r>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	bfbc      	itt	lt
 8006e8a:	238b      	movlt	r3, #139	; 0x8b
 8006e8c:	602b      	strlt	r3, [r5, #0]
 8006e8e:	2c00      	cmp	r4, #0
 8006e90:	d0dd      	beq.n	8006e4e <sniprintf+0x16>
 8006e92:	2200      	movs	r2, #0
 8006e94:	9b02      	ldr	r3, [sp, #8]
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e7d9      	b.n	8006e4e <sniprintf+0x16>
 8006e9a:	bf00      	nop
 8006e9c:	20000064 	.word	0x20000064

08006ea0 <siprintf>:
 8006ea0:	b40e      	push	{r1, r2, r3}
 8006ea2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ea6:	b500      	push	{lr}
 8006ea8:	b09c      	sub	sp, #112	; 0x70
 8006eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8006eac:	9002      	str	r0, [sp, #8]
 8006eae:	9006      	str	r0, [sp, #24]
 8006eb0:	9107      	str	r1, [sp, #28]
 8006eb2:	9104      	str	r1, [sp, #16]
 8006eb4:	4808      	ldr	r0, [pc, #32]	; (8006ed8 <siprintf+0x38>)
 8006eb6:	4909      	ldr	r1, [pc, #36]	; (8006edc <siprintf+0x3c>)
 8006eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebc:	9105      	str	r1, [sp, #20]
 8006ebe:	6800      	ldr	r0, [r0, #0]
 8006ec0:	a902      	add	r1, sp, #8
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	f002 fbf4 	bl	80096b0 <_svfiprintf_r>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	9b02      	ldr	r3, [sp, #8]
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	b01c      	add	sp, #112	; 0x70
 8006ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed4:	b003      	add	sp, #12
 8006ed6:	4770      	bx	lr
 8006ed8:	20000064 	.word	0x20000064
 8006edc:	ffff0208 	.word	0xffff0208

08006ee0 <__sread>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee8:	f000 f87e 	bl	8006fe8 <_read_r>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	bfab      	itete	ge
 8006ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef4:	181b      	addge	r3, r3, r0
 8006ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006efa:	bfac      	ite	ge
 8006efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006efe:	81a3      	strhlt	r3, [r4, #12]
 8006f00:	bd10      	pop	{r4, pc}

08006f02 <__swrite>:
 8006f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f06:	461f      	mov	r7, r3
 8006f08:	898b      	ldrh	r3, [r1, #12]
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	05db      	lsls	r3, r3, #23
 8006f0e:	460c      	mov	r4, r1
 8006f10:	4616      	mov	r6, r2
 8006f12:	d505      	bpl.n	8006f20 <__swrite+0x1e>
 8006f14:	2302      	movs	r3, #2
 8006f16:	2200      	movs	r2, #0
 8006f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1c:	f000 f852 	bl	8006fc4 <_lseek_r>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	4632      	mov	r2, r6
 8006f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	f000 b869 	b.w	800700c <_write_r>

08006f3a <__sseek>:
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f42:	f000 f83f 	bl	8006fc4 <_lseek_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	bf15      	itete	ne
 8006f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f56:	81a3      	strheq	r3, [r4, #12]
 8006f58:	bf18      	it	ne
 8006f5a:	81a3      	strhne	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__sclose>:
 8006f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f62:	f000 b81f 	b.w	8006fa4 <_close_r>

08006f66 <memset>:
 8006f66:	4603      	mov	r3, r0
 8006f68:	4402      	add	r2, r0
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d100      	bne.n	8006f70 <memset+0xa>
 8006f6e:	4770      	bx	lr
 8006f70:	f803 1b01 	strb.w	r1, [r3], #1
 8006f74:	e7f9      	b.n	8006f6a <memset+0x4>

08006f76 <strncmp>:
 8006f76:	b510      	push	{r4, lr}
 8006f78:	b16a      	cbz	r2, 8006f96 <strncmp+0x20>
 8006f7a:	3901      	subs	r1, #1
 8006f7c:	1884      	adds	r4, r0, r2
 8006f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f82:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d103      	bne.n	8006f92 <strncmp+0x1c>
 8006f8a:	42a0      	cmp	r0, r4
 8006f8c:	d001      	beq.n	8006f92 <strncmp+0x1c>
 8006f8e:	2a00      	cmp	r2, #0
 8006f90:	d1f5      	bne.n	8006f7e <strncmp+0x8>
 8006f92:	1ad0      	subs	r0, r2, r3
 8006f94:	bd10      	pop	{r4, pc}
 8006f96:	4610      	mov	r0, r2
 8006f98:	e7fc      	b.n	8006f94 <strncmp+0x1e>
	...

08006f9c <_localeconv_r>:
 8006f9c:	4800      	ldr	r0, [pc, #0]	; (8006fa0 <_localeconv_r+0x4>)
 8006f9e:	4770      	bx	lr
 8006fa0:	20000158 	.word	0x20000158

08006fa4 <_close_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	4d05      	ldr	r5, [pc, #20]	; (8006fc0 <_close_r+0x1c>)
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	602b      	str	r3, [r5, #0]
 8006fb0:	f7fa fd18 	bl	80019e4 <_close>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_close_r+0x1a>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_close_r+0x1a>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	20000584 	.word	0x20000584

08006fc4 <_lseek_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	4611      	mov	r1, r2
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4d05      	ldr	r5, [pc, #20]	; (8006fe4 <_lseek_r+0x20>)
 8006fd0:	602a      	str	r2, [r5, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f7fa fd2a 	bl	8001a2c <_lseek>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_lseek_r+0x1e>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_lseek_r+0x1e>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	20000584 	.word	0x20000584

08006fe8 <_read_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4604      	mov	r4, r0
 8006fec:	4608      	mov	r0, r1
 8006fee:	4611      	mov	r1, r2
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4d05      	ldr	r5, [pc, #20]	; (8007008 <_read_r+0x20>)
 8006ff4:	602a      	str	r2, [r5, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f7fa fcbb 	bl	8001972 <_read>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_read_r+0x1e>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_read_r+0x1e>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20000584 	.word	0x20000584

0800700c <_write_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	4611      	mov	r1, r2
 8007014:	2200      	movs	r2, #0
 8007016:	4d05      	ldr	r5, [pc, #20]	; (800702c <_write_r+0x20>)
 8007018:	602a      	str	r2, [r5, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	f7fa fcc6 	bl	80019ac <_write>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_write_r+0x1e>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_write_r+0x1e>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20000584 	.word	0x20000584

08007030 <__errno>:
 8007030:	4b01      	ldr	r3, [pc, #4]	; (8007038 <__errno+0x8>)
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000064 	.word	0x20000064

0800703c <__libc_init_array>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	2600      	movs	r6, #0
 8007040:	4d0c      	ldr	r5, [pc, #48]	; (8007074 <__libc_init_array+0x38>)
 8007042:	4c0d      	ldr	r4, [pc, #52]	; (8007078 <__libc_init_array+0x3c>)
 8007044:	1b64      	subs	r4, r4, r5
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	42a6      	cmp	r6, r4
 800704a:	d109      	bne.n	8007060 <__libc_init_array+0x24>
 800704c:	f003 fbb0 	bl	800a7b0 <_init>
 8007050:	2600      	movs	r6, #0
 8007052:	4d0a      	ldr	r5, [pc, #40]	; (800707c <__libc_init_array+0x40>)
 8007054:	4c0a      	ldr	r4, [pc, #40]	; (8007080 <__libc_init_array+0x44>)
 8007056:	1b64      	subs	r4, r4, r5
 8007058:	10a4      	asrs	r4, r4, #2
 800705a:	42a6      	cmp	r6, r4
 800705c:	d105      	bne.n	800706a <__libc_init_array+0x2e>
 800705e:	bd70      	pop	{r4, r5, r6, pc}
 8007060:	f855 3b04 	ldr.w	r3, [r5], #4
 8007064:	4798      	blx	r3
 8007066:	3601      	adds	r6, #1
 8007068:	e7ee      	b.n	8007048 <__libc_init_array+0xc>
 800706a:	f855 3b04 	ldr.w	r3, [r5], #4
 800706e:	4798      	blx	r3
 8007070:	3601      	adds	r6, #1
 8007072:	e7f2      	b.n	800705a <__libc_init_array+0x1e>
 8007074:	0800adb0 	.word	0x0800adb0
 8007078:	0800adb0 	.word	0x0800adb0
 800707c:	0800adb0 	.word	0x0800adb0
 8007080:	0800adb4 	.word	0x0800adb4

08007084 <__retarget_lock_init_recursive>:
 8007084:	4770      	bx	lr

08007086 <__retarget_lock_acquire_recursive>:
 8007086:	4770      	bx	lr

08007088 <__retarget_lock_release_recursive>:
 8007088:	4770      	bx	lr

0800708a <memchr>:
 800708a:	4603      	mov	r3, r0
 800708c:	b510      	push	{r4, lr}
 800708e:	b2c9      	uxtb	r1, r1
 8007090:	4402      	add	r2, r0
 8007092:	4293      	cmp	r3, r2
 8007094:	4618      	mov	r0, r3
 8007096:	d101      	bne.n	800709c <memchr+0x12>
 8007098:	2000      	movs	r0, #0
 800709a:	e003      	b.n	80070a4 <memchr+0x1a>
 800709c:	7804      	ldrb	r4, [r0, #0]
 800709e:	3301      	adds	r3, #1
 80070a0:	428c      	cmp	r4, r1
 80070a2:	d1f6      	bne.n	8007092 <memchr+0x8>
 80070a4:	bd10      	pop	{r4, pc}
	...

080070a8 <nanf>:
 80070a8:	4800      	ldr	r0, [pc, #0]	; (80070ac <nanf+0x4>)
 80070aa:	4770      	bx	lr
 80070ac:	7fc00000 	.word	0x7fc00000

080070b0 <quorem>:
 80070b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	6903      	ldr	r3, [r0, #16]
 80070b6:	690c      	ldr	r4, [r1, #16]
 80070b8:	4607      	mov	r7, r0
 80070ba:	42a3      	cmp	r3, r4
 80070bc:	db7f      	blt.n	80071be <quorem+0x10e>
 80070be:	3c01      	subs	r4, #1
 80070c0:	f100 0514 	add.w	r5, r0, #20
 80070c4:	f101 0814 	add.w	r8, r1, #20
 80070c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070d6:	3301      	adds	r3, #1
 80070d8:	429a      	cmp	r2, r3
 80070da:	fbb2 f6f3 	udiv	r6, r2, r3
 80070de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070e6:	d331      	bcc.n	800714c <quorem+0x9c>
 80070e8:	f04f 0e00 	mov.w	lr, #0
 80070ec:	4640      	mov	r0, r8
 80070ee:	46ac      	mov	ip, r5
 80070f0:	46f2      	mov	sl, lr
 80070f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80070f6:	b293      	uxth	r3, r2
 80070f8:	fb06 e303 	mla	r3, r6, r3, lr
 80070fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007100:	0c1a      	lsrs	r2, r3, #16
 8007102:	b29b      	uxth	r3, r3
 8007104:	fb06 220e 	mla	r2, r6, lr, r2
 8007108:	ebaa 0303 	sub.w	r3, sl, r3
 800710c:	f8dc a000 	ldr.w	sl, [ip]
 8007110:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007114:	fa1f fa8a 	uxth.w	sl, sl
 8007118:	4453      	add	r3, sl
 800711a:	f8dc a000 	ldr.w	sl, [ip]
 800711e:	b292      	uxth	r2, r2
 8007120:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007128:	b29b      	uxth	r3, r3
 800712a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800712e:	4581      	cmp	r9, r0
 8007130:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007134:	f84c 3b04 	str.w	r3, [ip], #4
 8007138:	d2db      	bcs.n	80070f2 <quorem+0x42>
 800713a:	f855 300b 	ldr.w	r3, [r5, fp]
 800713e:	b92b      	cbnz	r3, 800714c <quorem+0x9c>
 8007140:	9b01      	ldr	r3, [sp, #4]
 8007142:	3b04      	subs	r3, #4
 8007144:	429d      	cmp	r5, r3
 8007146:	461a      	mov	r2, r3
 8007148:	d32d      	bcc.n	80071a6 <quorem+0xf6>
 800714a:	613c      	str	r4, [r7, #16]
 800714c:	4638      	mov	r0, r7
 800714e:	f001 f9df 	bl	8008510 <__mcmp>
 8007152:	2800      	cmp	r0, #0
 8007154:	db23      	blt.n	800719e <quorem+0xee>
 8007156:	4629      	mov	r1, r5
 8007158:	2000      	movs	r0, #0
 800715a:	3601      	adds	r6, #1
 800715c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007160:	f8d1 c000 	ldr.w	ip, [r1]
 8007164:	b293      	uxth	r3, r2
 8007166:	1ac3      	subs	r3, r0, r3
 8007168:	0c12      	lsrs	r2, r2, #16
 800716a:	fa1f f08c 	uxth.w	r0, ip
 800716e:	4403      	add	r3, r0
 8007170:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007178:	b29b      	uxth	r3, r3
 800717a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800717e:	45c1      	cmp	r9, r8
 8007180:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007184:	f841 3b04 	str.w	r3, [r1], #4
 8007188:	d2e8      	bcs.n	800715c <quorem+0xac>
 800718a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800718e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007192:	b922      	cbnz	r2, 800719e <quorem+0xee>
 8007194:	3b04      	subs	r3, #4
 8007196:	429d      	cmp	r5, r3
 8007198:	461a      	mov	r2, r3
 800719a:	d30a      	bcc.n	80071b2 <quorem+0x102>
 800719c:	613c      	str	r4, [r7, #16]
 800719e:	4630      	mov	r0, r6
 80071a0:	b003      	add	sp, #12
 80071a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a6:	6812      	ldr	r2, [r2, #0]
 80071a8:	3b04      	subs	r3, #4
 80071aa:	2a00      	cmp	r2, #0
 80071ac:	d1cd      	bne.n	800714a <quorem+0x9a>
 80071ae:	3c01      	subs	r4, #1
 80071b0:	e7c8      	b.n	8007144 <quorem+0x94>
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	3b04      	subs	r3, #4
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	d1f0      	bne.n	800719c <quorem+0xec>
 80071ba:	3c01      	subs	r4, #1
 80071bc:	e7eb      	b.n	8007196 <quorem+0xe6>
 80071be:	2000      	movs	r0, #0
 80071c0:	e7ee      	b.n	80071a0 <quorem+0xf0>
 80071c2:	0000      	movs	r0, r0
 80071c4:	0000      	movs	r0, r0
	...

080071c8 <_dtoa_r>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	4616      	mov	r6, r2
 80071ce:	461f      	mov	r7, r3
 80071d0:	69c4      	ldr	r4, [r0, #28]
 80071d2:	b099      	sub	sp, #100	; 0x64
 80071d4:	4605      	mov	r5, r0
 80071d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80071da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80071de:	b974      	cbnz	r4, 80071fe <_dtoa_r+0x36>
 80071e0:	2010      	movs	r0, #16
 80071e2:	f000 fe1d 	bl	8007e20 <malloc>
 80071e6:	4602      	mov	r2, r0
 80071e8:	61e8      	str	r0, [r5, #28]
 80071ea:	b920      	cbnz	r0, 80071f6 <_dtoa_r+0x2e>
 80071ec:	21ef      	movs	r1, #239	; 0xef
 80071ee:	4bac      	ldr	r3, [pc, #688]	; (80074a0 <_dtoa_r+0x2d8>)
 80071f0:	48ac      	ldr	r0, [pc, #688]	; (80074a4 <_dtoa_r+0x2dc>)
 80071f2:	f002 fc43 	bl	8009a7c <__assert_func>
 80071f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071fa:	6004      	str	r4, [r0, #0]
 80071fc:	60c4      	str	r4, [r0, #12]
 80071fe:	69eb      	ldr	r3, [r5, #28]
 8007200:	6819      	ldr	r1, [r3, #0]
 8007202:	b151      	cbz	r1, 800721a <_dtoa_r+0x52>
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	2301      	movs	r3, #1
 8007208:	4093      	lsls	r3, r2
 800720a:	604a      	str	r2, [r1, #4]
 800720c:	608b      	str	r3, [r1, #8]
 800720e:	4628      	mov	r0, r5
 8007210:	f000 fefa 	bl	8008008 <_Bfree>
 8007214:	2200      	movs	r2, #0
 8007216:	69eb      	ldr	r3, [r5, #28]
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	1e3b      	subs	r3, r7, #0
 800721c:	bfaf      	iteee	ge
 800721e:	2300      	movge	r3, #0
 8007220:	2201      	movlt	r2, #1
 8007222:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007226:	9305      	strlt	r3, [sp, #20]
 8007228:	bfa8      	it	ge
 800722a:	f8c8 3000 	strge.w	r3, [r8]
 800722e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007232:	4b9d      	ldr	r3, [pc, #628]	; (80074a8 <_dtoa_r+0x2e0>)
 8007234:	bfb8      	it	lt
 8007236:	f8c8 2000 	strlt.w	r2, [r8]
 800723a:	ea33 0309 	bics.w	r3, r3, r9
 800723e:	d119      	bne.n	8007274 <_dtoa_r+0xac>
 8007240:	f242 730f 	movw	r3, #9999	; 0x270f
 8007244:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800724c:	4333      	orrs	r3, r6
 800724e:	f000 8589 	beq.w	8007d64 <_dtoa_r+0xb9c>
 8007252:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007254:	b953      	cbnz	r3, 800726c <_dtoa_r+0xa4>
 8007256:	4b95      	ldr	r3, [pc, #596]	; (80074ac <_dtoa_r+0x2e4>)
 8007258:	e023      	b.n	80072a2 <_dtoa_r+0xda>
 800725a:	4b95      	ldr	r3, [pc, #596]	; (80074b0 <_dtoa_r+0x2e8>)
 800725c:	9303      	str	r3, [sp, #12]
 800725e:	3308      	adds	r3, #8
 8007260:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	9803      	ldr	r0, [sp, #12]
 8007266:	b019      	add	sp, #100	; 0x64
 8007268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	4b8f      	ldr	r3, [pc, #572]	; (80074ac <_dtoa_r+0x2e4>)
 800726e:	9303      	str	r3, [sp, #12]
 8007270:	3303      	adds	r3, #3
 8007272:	e7f5      	b.n	8007260 <_dtoa_r+0x98>
 8007274:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007278:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800727c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007280:	2200      	movs	r2, #0
 8007282:	2300      	movs	r3, #0
 8007284:	f7f9 fb90 	bl	80009a8 <__aeabi_dcmpeq>
 8007288:	4680      	mov	r8, r0
 800728a:	b160      	cbz	r0, 80072a6 <_dtoa_r+0xde>
 800728c:	2301      	movs	r3, #1
 800728e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8562 	beq.w	8007d5e <_dtoa_r+0xb96>
 800729a:	4b86      	ldr	r3, [pc, #536]	; (80074b4 <_dtoa_r+0x2ec>)
 800729c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	9303      	str	r3, [sp, #12]
 80072a4:	e7de      	b.n	8007264 <_dtoa_r+0x9c>
 80072a6:	ab16      	add	r3, sp, #88	; 0x58
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	ab17      	add	r3, sp, #92	; 0x5c
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4628      	mov	r0, r5
 80072b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80072b4:	f001 fa3c 	bl	8008730 <__d2b>
 80072b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072bc:	4682      	mov	sl, r0
 80072be:	2c00      	cmp	r4, #0
 80072c0:	d07e      	beq.n	80073c0 <_dtoa_r+0x1f8>
 80072c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072c8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80072cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80072d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072d8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80072dc:	4619      	mov	r1, r3
 80072de:	2200      	movs	r2, #0
 80072e0:	4b75      	ldr	r3, [pc, #468]	; (80074b8 <_dtoa_r+0x2f0>)
 80072e2:	f7f8 ff41 	bl	8000168 <__aeabi_dsub>
 80072e6:	a368      	add	r3, pc, #416	; (adr r3, 8007488 <_dtoa_r+0x2c0>)
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f7f9 f8f4 	bl	80004d8 <__aeabi_dmul>
 80072f0:	a367      	add	r3, pc, #412	; (adr r3, 8007490 <_dtoa_r+0x2c8>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f8 ff39 	bl	800016c <__adddf3>
 80072fa:	4606      	mov	r6, r0
 80072fc:	4620      	mov	r0, r4
 80072fe:	460f      	mov	r7, r1
 8007300:	f7f9 f880 	bl	8000404 <__aeabi_i2d>
 8007304:	a364      	add	r3, pc, #400	; (adr r3, 8007498 <_dtoa_r+0x2d0>)
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	f7f9 f8e5 	bl	80004d8 <__aeabi_dmul>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4630      	mov	r0, r6
 8007314:	4639      	mov	r1, r7
 8007316:	f7f8 ff29 	bl	800016c <__adddf3>
 800731a:	4606      	mov	r6, r0
 800731c:	460f      	mov	r7, r1
 800731e:	f7f9 fb8b 	bl	8000a38 <__aeabi_d2iz>
 8007322:	2200      	movs	r2, #0
 8007324:	4683      	mov	fp, r0
 8007326:	2300      	movs	r3, #0
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	f7f9 fb46 	bl	80009bc <__aeabi_dcmplt>
 8007330:	b148      	cbz	r0, 8007346 <_dtoa_r+0x17e>
 8007332:	4658      	mov	r0, fp
 8007334:	f7f9 f866 	bl	8000404 <__aeabi_i2d>
 8007338:	4632      	mov	r2, r6
 800733a:	463b      	mov	r3, r7
 800733c:	f7f9 fb34 	bl	80009a8 <__aeabi_dcmpeq>
 8007340:	b908      	cbnz	r0, 8007346 <_dtoa_r+0x17e>
 8007342:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007346:	f1bb 0f16 	cmp.w	fp, #22
 800734a:	d857      	bhi.n	80073fc <_dtoa_r+0x234>
 800734c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007350:	4b5a      	ldr	r3, [pc, #360]	; (80074bc <_dtoa_r+0x2f4>)
 8007352:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f9 fb2f 	bl	80009bc <__aeabi_dcmplt>
 800735e:	2800      	cmp	r0, #0
 8007360:	d04e      	beq.n	8007400 <_dtoa_r+0x238>
 8007362:	2300      	movs	r3, #0
 8007364:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007368:	930f      	str	r3, [sp, #60]	; 0x3c
 800736a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800736c:	1b1b      	subs	r3, r3, r4
 800736e:	1e5a      	subs	r2, r3, #1
 8007370:	bf46      	itte	mi
 8007372:	f1c3 0901 	rsbmi	r9, r3, #1
 8007376:	2300      	movmi	r3, #0
 8007378:	f04f 0900 	movpl.w	r9, #0
 800737c:	9209      	str	r2, [sp, #36]	; 0x24
 800737e:	bf48      	it	mi
 8007380:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007382:	f1bb 0f00 	cmp.w	fp, #0
 8007386:	db3d      	blt.n	8007404 <_dtoa_r+0x23c>
 8007388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800738e:	445b      	add	r3, fp
 8007390:	9309      	str	r3, [sp, #36]	; 0x24
 8007392:	2300      	movs	r3, #0
 8007394:	930a      	str	r3, [sp, #40]	; 0x28
 8007396:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007398:	2b09      	cmp	r3, #9
 800739a:	d867      	bhi.n	800746c <_dtoa_r+0x2a4>
 800739c:	2b05      	cmp	r3, #5
 800739e:	bfc4      	itt	gt
 80073a0:	3b04      	subgt	r3, #4
 80073a2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80073a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073a6:	bfc8      	it	gt
 80073a8:	2400      	movgt	r4, #0
 80073aa:	f1a3 0302 	sub.w	r3, r3, #2
 80073ae:	bfd8      	it	le
 80073b0:	2401      	movle	r4, #1
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	f200 8086 	bhi.w	80074c4 <_dtoa_r+0x2fc>
 80073b8:	e8df f003 	tbb	[pc, r3]
 80073bc:	5637392c 	.word	0x5637392c
 80073c0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80073c4:	441c      	add	r4, r3
 80073c6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	bfc1      	itttt	gt
 80073ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073d2:	fa09 f903 	lslgt.w	r9, r9, r3
 80073d6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80073da:	fa26 f303 	lsrgt.w	r3, r6, r3
 80073de:	bfd6      	itet	le
 80073e0:	f1c3 0320 	rsble	r3, r3, #32
 80073e4:	ea49 0003 	orrgt.w	r0, r9, r3
 80073e8:	fa06 f003 	lslle.w	r0, r6, r3
 80073ec:	f7f8 fffa 	bl	80003e4 <__aeabi_ui2d>
 80073f0:	2201      	movs	r2, #1
 80073f2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80073f6:	3c01      	subs	r4, #1
 80073f8:	9213      	str	r2, [sp, #76]	; 0x4c
 80073fa:	e76f      	b.n	80072dc <_dtoa_r+0x114>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e7b3      	b.n	8007368 <_dtoa_r+0x1a0>
 8007400:	900f      	str	r0, [sp, #60]	; 0x3c
 8007402:	e7b2      	b.n	800736a <_dtoa_r+0x1a2>
 8007404:	f1cb 0300 	rsb	r3, fp, #0
 8007408:	930a      	str	r3, [sp, #40]	; 0x28
 800740a:	2300      	movs	r3, #0
 800740c:	eba9 090b 	sub.w	r9, r9, fp
 8007410:	930e      	str	r3, [sp, #56]	; 0x38
 8007412:	e7c0      	b.n	8007396 <_dtoa_r+0x1ce>
 8007414:	2300      	movs	r3, #0
 8007416:	930b      	str	r3, [sp, #44]	; 0x2c
 8007418:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800741a:	2b00      	cmp	r3, #0
 800741c:	dc55      	bgt.n	80074ca <_dtoa_r+0x302>
 800741e:	2301      	movs	r3, #1
 8007420:	461a      	mov	r2, r3
 8007422:	9306      	str	r3, [sp, #24]
 8007424:	9308      	str	r3, [sp, #32]
 8007426:	9223      	str	r2, [sp, #140]	; 0x8c
 8007428:	e00b      	b.n	8007442 <_dtoa_r+0x27a>
 800742a:	2301      	movs	r3, #1
 800742c:	e7f3      	b.n	8007416 <_dtoa_r+0x24e>
 800742e:	2300      	movs	r3, #0
 8007430:	930b      	str	r3, [sp, #44]	; 0x2c
 8007432:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007434:	445b      	add	r3, fp
 8007436:	9306      	str	r3, [sp, #24]
 8007438:	3301      	adds	r3, #1
 800743a:	2b01      	cmp	r3, #1
 800743c:	9308      	str	r3, [sp, #32]
 800743e:	bfb8      	it	lt
 8007440:	2301      	movlt	r3, #1
 8007442:	2100      	movs	r1, #0
 8007444:	2204      	movs	r2, #4
 8007446:	69e8      	ldr	r0, [r5, #28]
 8007448:	f102 0614 	add.w	r6, r2, #20
 800744c:	429e      	cmp	r6, r3
 800744e:	d940      	bls.n	80074d2 <_dtoa_r+0x30a>
 8007450:	6041      	str	r1, [r0, #4]
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fd98 	bl	8007f88 <_Balloc>
 8007458:	9003      	str	r0, [sp, #12]
 800745a:	2800      	cmp	r0, #0
 800745c:	d13c      	bne.n	80074d8 <_dtoa_r+0x310>
 800745e:	4602      	mov	r2, r0
 8007460:	f240 11af 	movw	r1, #431	; 0x1af
 8007464:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <_dtoa_r+0x2f8>)
 8007466:	e6c3      	b.n	80071f0 <_dtoa_r+0x28>
 8007468:	2301      	movs	r3, #1
 800746a:	e7e1      	b.n	8007430 <_dtoa_r+0x268>
 800746c:	2401      	movs	r4, #1
 800746e:	2300      	movs	r3, #0
 8007470:	940b      	str	r4, [sp, #44]	; 0x2c
 8007472:	9322      	str	r3, [sp, #136]	; 0x88
 8007474:	f04f 33ff 	mov.w	r3, #4294967295
 8007478:	2200      	movs	r2, #0
 800747a:	9306      	str	r3, [sp, #24]
 800747c:	9308      	str	r3, [sp, #32]
 800747e:	2312      	movs	r3, #18
 8007480:	e7d1      	b.n	8007426 <_dtoa_r+0x25e>
 8007482:	bf00      	nop
 8007484:	f3af 8000 	nop.w
 8007488:	636f4361 	.word	0x636f4361
 800748c:	3fd287a7 	.word	0x3fd287a7
 8007490:	8b60c8b3 	.word	0x8b60c8b3
 8007494:	3fc68a28 	.word	0x3fc68a28
 8007498:	509f79fb 	.word	0x509f79fb
 800749c:	3fd34413 	.word	0x3fd34413
 80074a0:	0800a9c8 	.word	0x0800a9c8
 80074a4:	0800a9df 	.word	0x0800a9df
 80074a8:	7ff00000 	.word	0x7ff00000
 80074ac:	0800a9c4 	.word	0x0800a9c4
 80074b0:	0800a9bb 	.word	0x0800a9bb
 80074b4:	0800a993 	.word	0x0800a993
 80074b8:	3ff80000 	.word	0x3ff80000
 80074bc:	0800aad0 	.word	0x0800aad0
 80074c0:	0800aa37 	.word	0x0800aa37
 80074c4:	2301      	movs	r3, #1
 80074c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c8:	e7d4      	b.n	8007474 <_dtoa_r+0x2ac>
 80074ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074cc:	9306      	str	r3, [sp, #24]
 80074ce:	9308      	str	r3, [sp, #32]
 80074d0:	e7b7      	b.n	8007442 <_dtoa_r+0x27a>
 80074d2:	3101      	adds	r1, #1
 80074d4:	0052      	lsls	r2, r2, #1
 80074d6:	e7b7      	b.n	8007448 <_dtoa_r+0x280>
 80074d8:	69eb      	ldr	r3, [r5, #28]
 80074da:	9a03      	ldr	r2, [sp, #12]
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	9b08      	ldr	r3, [sp, #32]
 80074e0:	2b0e      	cmp	r3, #14
 80074e2:	f200 80a8 	bhi.w	8007636 <_dtoa_r+0x46e>
 80074e6:	2c00      	cmp	r4, #0
 80074e8:	f000 80a5 	beq.w	8007636 <_dtoa_r+0x46e>
 80074ec:	f1bb 0f00 	cmp.w	fp, #0
 80074f0:	dd34      	ble.n	800755c <_dtoa_r+0x394>
 80074f2:	4b9a      	ldr	r3, [pc, #616]	; (800775c <_dtoa_r+0x594>)
 80074f4:	f00b 020f 	and.w	r2, fp, #15
 80074f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007500:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007504:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007508:	ea4f 142b 	mov.w	r4, fp, asr #4
 800750c:	d016      	beq.n	800753c <_dtoa_r+0x374>
 800750e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007512:	4b93      	ldr	r3, [pc, #588]	; (8007760 <_dtoa_r+0x598>)
 8007514:	2703      	movs	r7, #3
 8007516:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800751a:	f7f9 f907 	bl	800072c <__aeabi_ddiv>
 800751e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007522:	f004 040f 	and.w	r4, r4, #15
 8007526:	4e8e      	ldr	r6, [pc, #568]	; (8007760 <_dtoa_r+0x598>)
 8007528:	b954      	cbnz	r4, 8007540 <_dtoa_r+0x378>
 800752a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800752e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007532:	f7f9 f8fb 	bl	800072c <__aeabi_ddiv>
 8007536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800753a:	e029      	b.n	8007590 <_dtoa_r+0x3c8>
 800753c:	2702      	movs	r7, #2
 800753e:	e7f2      	b.n	8007526 <_dtoa_r+0x35e>
 8007540:	07e1      	lsls	r1, r4, #31
 8007542:	d508      	bpl.n	8007556 <_dtoa_r+0x38e>
 8007544:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007548:	e9d6 2300 	ldrd	r2, r3, [r6]
 800754c:	f7f8 ffc4 	bl	80004d8 <__aeabi_dmul>
 8007550:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007554:	3701      	adds	r7, #1
 8007556:	1064      	asrs	r4, r4, #1
 8007558:	3608      	adds	r6, #8
 800755a:	e7e5      	b.n	8007528 <_dtoa_r+0x360>
 800755c:	f000 80a5 	beq.w	80076aa <_dtoa_r+0x4e2>
 8007560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007564:	f1cb 0400 	rsb	r4, fp, #0
 8007568:	4b7c      	ldr	r3, [pc, #496]	; (800775c <_dtoa_r+0x594>)
 800756a:	f004 020f 	and.w	r2, r4, #15
 800756e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f7f8 ffaf 	bl	80004d8 <__aeabi_dmul>
 800757a:	2702      	movs	r7, #2
 800757c:	2300      	movs	r3, #0
 800757e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007582:	4e77      	ldr	r6, [pc, #476]	; (8007760 <_dtoa_r+0x598>)
 8007584:	1124      	asrs	r4, r4, #4
 8007586:	2c00      	cmp	r4, #0
 8007588:	f040 8084 	bne.w	8007694 <_dtoa_r+0x4cc>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1d2      	bne.n	8007536 <_dtoa_r+0x36e>
 8007590:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007594:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 8087 	beq.w	80076ae <_dtoa_r+0x4e6>
 80075a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075a4:	2200      	movs	r2, #0
 80075a6:	4b6f      	ldr	r3, [pc, #444]	; (8007764 <_dtoa_r+0x59c>)
 80075a8:	f7f9 fa08 	bl	80009bc <__aeabi_dcmplt>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d07e      	beq.n	80076ae <_dtoa_r+0x4e6>
 80075b0:	9b08      	ldr	r3, [sp, #32]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d07b      	beq.n	80076ae <_dtoa_r+0x4e6>
 80075b6:	9b06      	ldr	r3, [sp, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dd38      	ble.n	800762e <_dtoa_r+0x466>
 80075bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075c0:	2200      	movs	r2, #0
 80075c2:	4b69      	ldr	r3, [pc, #420]	; (8007768 <_dtoa_r+0x5a0>)
 80075c4:	f7f8 ff88 	bl	80004d8 <__aeabi_dmul>
 80075c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075cc:	9c06      	ldr	r4, [sp, #24]
 80075ce:	f10b 38ff 	add.w	r8, fp, #4294967295
 80075d2:	3701      	adds	r7, #1
 80075d4:	4638      	mov	r0, r7
 80075d6:	f7f8 ff15 	bl	8000404 <__aeabi_i2d>
 80075da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075de:	f7f8 ff7b 	bl	80004d8 <__aeabi_dmul>
 80075e2:	2200      	movs	r2, #0
 80075e4:	4b61      	ldr	r3, [pc, #388]	; (800776c <_dtoa_r+0x5a4>)
 80075e6:	f7f8 fdc1 	bl	800016c <__adddf3>
 80075ea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80075ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075f2:	9611      	str	r6, [sp, #68]	; 0x44
 80075f4:	2c00      	cmp	r4, #0
 80075f6:	d15d      	bne.n	80076b4 <_dtoa_r+0x4ec>
 80075f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075fc:	2200      	movs	r2, #0
 80075fe:	4b5c      	ldr	r3, [pc, #368]	; (8007770 <_dtoa_r+0x5a8>)
 8007600:	f7f8 fdb2 	bl	8000168 <__aeabi_dsub>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800760c:	4633      	mov	r3, r6
 800760e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007610:	f7f9 f9f2 	bl	80009f8 <__aeabi_dcmpgt>
 8007614:	2800      	cmp	r0, #0
 8007616:	f040 8295 	bne.w	8007b44 <_dtoa_r+0x97c>
 800761a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800761e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007620:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007624:	f7f9 f9ca 	bl	80009bc <__aeabi_dcmplt>
 8007628:	2800      	cmp	r0, #0
 800762a:	f040 8289 	bne.w	8007b40 <_dtoa_r+0x978>
 800762e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007632:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007636:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007638:	2b00      	cmp	r3, #0
 800763a:	f2c0 8151 	blt.w	80078e0 <_dtoa_r+0x718>
 800763e:	f1bb 0f0e 	cmp.w	fp, #14
 8007642:	f300 814d 	bgt.w	80078e0 <_dtoa_r+0x718>
 8007646:	4b45      	ldr	r3, [pc, #276]	; (800775c <_dtoa_r+0x594>)
 8007648:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800764c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007650:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007654:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007656:	2b00      	cmp	r3, #0
 8007658:	f280 80da 	bge.w	8007810 <_dtoa_r+0x648>
 800765c:	9b08      	ldr	r3, [sp, #32]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f300 80d6 	bgt.w	8007810 <_dtoa_r+0x648>
 8007664:	f040 826b 	bne.w	8007b3e <_dtoa_r+0x976>
 8007668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800766c:	2200      	movs	r2, #0
 800766e:	4b40      	ldr	r3, [pc, #256]	; (8007770 <_dtoa_r+0x5a8>)
 8007670:	f7f8 ff32 	bl	80004d8 <__aeabi_dmul>
 8007674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007678:	f7f9 f9b4 	bl	80009e4 <__aeabi_dcmpge>
 800767c:	9c08      	ldr	r4, [sp, #32]
 800767e:	4626      	mov	r6, r4
 8007680:	2800      	cmp	r0, #0
 8007682:	f040 8241 	bne.w	8007b08 <_dtoa_r+0x940>
 8007686:	2331      	movs	r3, #49	; 0x31
 8007688:	9f03      	ldr	r7, [sp, #12]
 800768a:	f10b 0b01 	add.w	fp, fp, #1
 800768e:	f807 3b01 	strb.w	r3, [r7], #1
 8007692:	e23d      	b.n	8007b10 <_dtoa_r+0x948>
 8007694:	07e2      	lsls	r2, r4, #31
 8007696:	d505      	bpl.n	80076a4 <_dtoa_r+0x4dc>
 8007698:	e9d6 2300 	ldrd	r2, r3, [r6]
 800769c:	f7f8 ff1c 	bl	80004d8 <__aeabi_dmul>
 80076a0:	2301      	movs	r3, #1
 80076a2:	3701      	adds	r7, #1
 80076a4:	1064      	asrs	r4, r4, #1
 80076a6:	3608      	adds	r6, #8
 80076a8:	e76d      	b.n	8007586 <_dtoa_r+0x3be>
 80076aa:	2702      	movs	r7, #2
 80076ac:	e770      	b.n	8007590 <_dtoa_r+0x3c8>
 80076ae:	46d8      	mov	r8, fp
 80076b0:	9c08      	ldr	r4, [sp, #32]
 80076b2:	e78f      	b.n	80075d4 <_dtoa_r+0x40c>
 80076b4:	9903      	ldr	r1, [sp, #12]
 80076b6:	4b29      	ldr	r3, [pc, #164]	; (800775c <_dtoa_r+0x594>)
 80076b8:	4421      	add	r1, r4
 80076ba:	9112      	str	r1, [sp, #72]	; 0x48
 80076bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076c2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80076c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076ca:	2900      	cmp	r1, #0
 80076cc:	d054      	beq.n	8007778 <_dtoa_r+0x5b0>
 80076ce:	2000      	movs	r0, #0
 80076d0:	4928      	ldr	r1, [pc, #160]	; (8007774 <_dtoa_r+0x5ac>)
 80076d2:	f7f9 f82b 	bl	800072c <__aeabi_ddiv>
 80076d6:	463b      	mov	r3, r7
 80076d8:	4632      	mov	r2, r6
 80076da:	f7f8 fd45 	bl	8000168 <__aeabi_dsub>
 80076de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076e2:	9f03      	ldr	r7, [sp, #12]
 80076e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076e8:	f7f9 f9a6 	bl	8000a38 <__aeabi_d2iz>
 80076ec:	4604      	mov	r4, r0
 80076ee:	f7f8 fe89 	bl	8000404 <__aeabi_i2d>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076fa:	f7f8 fd35 	bl	8000168 <__aeabi_dsub>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	3430      	adds	r4, #48	; 0x30
 8007704:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007708:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800770c:	f807 4b01 	strb.w	r4, [r7], #1
 8007710:	f7f9 f954 	bl	80009bc <__aeabi_dcmplt>
 8007714:	2800      	cmp	r0, #0
 8007716:	d173      	bne.n	8007800 <_dtoa_r+0x638>
 8007718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800771c:	2000      	movs	r0, #0
 800771e:	4911      	ldr	r1, [pc, #68]	; (8007764 <_dtoa_r+0x59c>)
 8007720:	f7f8 fd22 	bl	8000168 <__aeabi_dsub>
 8007724:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007728:	f7f9 f948 	bl	80009bc <__aeabi_dcmplt>
 800772c:	2800      	cmp	r0, #0
 800772e:	f040 80b6 	bne.w	800789e <_dtoa_r+0x6d6>
 8007732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007734:	429f      	cmp	r7, r3
 8007736:	f43f af7a 	beq.w	800762e <_dtoa_r+0x466>
 800773a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800773e:	2200      	movs	r2, #0
 8007740:	4b09      	ldr	r3, [pc, #36]	; (8007768 <_dtoa_r+0x5a0>)
 8007742:	f7f8 fec9 	bl	80004d8 <__aeabi_dmul>
 8007746:	2200      	movs	r2, #0
 8007748:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800774c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <_dtoa_r+0x5a0>)
 8007752:	f7f8 fec1 	bl	80004d8 <__aeabi_dmul>
 8007756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800775a:	e7c3      	b.n	80076e4 <_dtoa_r+0x51c>
 800775c:	0800aad0 	.word	0x0800aad0
 8007760:	0800aaa8 	.word	0x0800aaa8
 8007764:	3ff00000 	.word	0x3ff00000
 8007768:	40240000 	.word	0x40240000
 800776c:	401c0000 	.word	0x401c0000
 8007770:	40140000 	.word	0x40140000
 8007774:	3fe00000 	.word	0x3fe00000
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	f7f8 feac 	bl	80004d8 <__aeabi_dmul>
 8007780:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007782:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007786:	9c03      	ldr	r4, [sp, #12]
 8007788:	9314      	str	r3, [sp, #80]	; 0x50
 800778a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800778e:	f7f9 f953 	bl	8000a38 <__aeabi_d2iz>
 8007792:	9015      	str	r0, [sp, #84]	; 0x54
 8007794:	f7f8 fe36 	bl	8000404 <__aeabi_i2d>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077a0:	f7f8 fce2 	bl	8000168 <__aeabi_dsub>
 80077a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077a6:	4606      	mov	r6, r0
 80077a8:	3330      	adds	r3, #48	; 0x30
 80077aa:	f804 3b01 	strb.w	r3, [r4], #1
 80077ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077b0:	460f      	mov	r7, r1
 80077b2:	429c      	cmp	r4, r3
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	d124      	bne.n	8007804 <_dtoa_r+0x63c>
 80077ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077be:	4baf      	ldr	r3, [pc, #700]	; (8007a7c <_dtoa_r+0x8b4>)
 80077c0:	f7f8 fcd4 	bl	800016c <__adddf3>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f9 f914 	bl	80009f8 <__aeabi_dcmpgt>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d163      	bne.n	800789c <_dtoa_r+0x6d4>
 80077d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077d8:	2000      	movs	r0, #0
 80077da:	49a8      	ldr	r1, [pc, #672]	; (8007a7c <_dtoa_r+0x8b4>)
 80077dc:	f7f8 fcc4 	bl	8000168 <__aeabi_dsub>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4630      	mov	r0, r6
 80077e6:	4639      	mov	r1, r7
 80077e8:	f7f9 f8e8 	bl	80009bc <__aeabi_dcmplt>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	f43f af1e 	beq.w	800762e <_dtoa_r+0x466>
 80077f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80077f4:	1e7b      	subs	r3, r7, #1
 80077f6:	9314      	str	r3, [sp, #80]	; 0x50
 80077f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80077fc:	2b30      	cmp	r3, #48	; 0x30
 80077fe:	d0f8      	beq.n	80077f2 <_dtoa_r+0x62a>
 8007800:	46c3      	mov	fp, r8
 8007802:	e03b      	b.n	800787c <_dtoa_r+0x6b4>
 8007804:	4b9e      	ldr	r3, [pc, #632]	; (8007a80 <_dtoa_r+0x8b8>)
 8007806:	f7f8 fe67 	bl	80004d8 <__aeabi_dmul>
 800780a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800780e:	e7bc      	b.n	800778a <_dtoa_r+0x5c2>
 8007810:	9f03      	ldr	r7, [sp, #12]
 8007812:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007816:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	f7f8 ff85 	bl	800072c <__aeabi_ddiv>
 8007822:	f7f9 f909 	bl	8000a38 <__aeabi_d2iz>
 8007826:	4604      	mov	r4, r0
 8007828:	f7f8 fdec 	bl	8000404 <__aeabi_i2d>
 800782c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007830:	f7f8 fe52 	bl	80004d8 <__aeabi_dmul>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4640      	mov	r0, r8
 800783a:	4649      	mov	r1, r9
 800783c:	f7f8 fc94 	bl	8000168 <__aeabi_dsub>
 8007840:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007844:	f807 6b01 	strb.w	r6, [r7], #1
 8007848:	9e03      	ldr	r6, [sp, #12]
 800784a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800784e:	1bbe      	subs	r6, r7, r6
 8007850:	45b4      	cmp	ip, r6
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	d136      	bne.n	80078c6 <_dtoa_r+0x6fe>
 8007858:	f7f8 fc88 	bl	800016c <__adddf3>
 800785c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007860:	4680      	mov	r8, r0
 8007862:	4689      	mov	r9, r1
 8007864:	f7f9 f8c8 	bl	80009f8 <__aeabi_dcmpgt>
 8007868:	bb58      	cbnz	r0, 80078c2 <_dtoa_r+0x6fa>
 800786a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800786e:	4640      	mov	r0, r8
 8007870:	4649      	mov	r1, r9
 8007872:	f7f9 f899 	bl	80009a8 <__aeabi_dcmpeq>
 8007876:	b108      	cbz	r0, 800787c <_dtoa_r+0x6b4>
 8007878:	07e3      	lsls	r3, r4, #31
 800787a:	d422      	bmi.n	80078c2 <_dtoa_r+0x6fa>
 800787c:	4651      	mov	r1, sl
 800787e:	4628      	mov	r0, r5
 8007880:	f000 fbc2 	bl	8008008 <_Bfree>
 8007884:	2300      	movs	r3, #0
 8007886:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007888:	703b      	strb	r3, [r7, #0]
 800788a:	f10b 0301 	add.w	r3, fp, #1
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007892:	2b00      	cmp	r3, #0
 8007894:	f43f ace6 	beq.w	8007264 <_dtoa_r+0x9c>
 8007898:	601f      	str	r7, [r3, #0]
 800789a:	e4e3      	b.n	8007264 <_dtoa_r+0x9c>
 800789c:	4627      	mov	r7, r4
 800789e:	463b      	mov	r3, r7
 80078a0:	461f      	mov	r7, r3
 80078a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078a6:	2a39      	cmp	r2, #57	; 0x39
 80078a8:	d107      	bne.n	80078ba <_dtoa_r+0x6f2>
 80078aa:	9a03      	ldr	r2, [sp, #12]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d1f7      	bne.n	80078a0 <_dtoa_r+0x6d8>
 80078b0:	2230      	movs	r2, #48	; 0x30
 80078b2:	9903      	ldr	r1, [sp, #12]
 80078b4:	f108 0801 	add.w	r8, r8, #1
 80078b8:	700a      	strb	r2, [r1, #0]
 80078ba:	781a      	ldrb	r2, [r3, #0]
 80078bc:	3201      	adds	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
 80078c0:	e79e      	b.n	8007800 <_dtoa_r+0x638>
 80078c2:	46d8      	mov	r8, fp
 80078c4:	e7eb      	b.n	800789e <_dtoa_r+0x6d6>
 80078c6:	2200      	movs	r2, #0
 80078c8:	4b6d      	ldr	r3, [pc, #436]	; (8007a80 <_dtoa_r+0x8b8>)
 80078ca:	f7f8 fe05 	bl	80004d8 <__aeabi_dmul>
 80078ce:	2200      	movs	r2, #0
 80078d0:	2300      	movs	r3, #0
 80078d2:	4680      	mov	r8, r0
 80078d4:	4689      	mov	r9, r1
 80078d6:	f7f9 f867 	bl	80009a8 <__aeabi_dcmpeq>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d09b      	beq.n	8007816 <_dtoa_r+0x64e>
 80078de:	e7cd      	b.n	800787c <_dtoa_r+0x6b4>
 80078e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078e2:	2a00      	cmp	r2, #0
 80078e4:	f000 80c4 	beq.w	8007a70 <_dtoa_r+0x8a8>
 80078e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078ea:	2a01      	cmp	r2, #1
 80078ec:	f300 80a8 	bgt.w	8007a40 <_dtoa_r+0x878>
 80078f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078f2:	2a00      	cmp	r2, #0
 80078f4:	f000 80a0 	beq.w	8007a38 <_dtoa_r+0x870>
 80078f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078fc:	464f      	mov	r7, r9
 80078fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007902:	2101      	movs	r1, #1
 8007904:	441a      	add	r2, r3
 8007906:	4628      	mov	r0, r5
 8007908:	4499      	add	r9, r3
 800790a:	9209      	str	r2, [sp, #36]	; 0x24
 800790c:	f000 fc7c 	bl	8008208 <__i2b>
 8007910:	4606      	mov	r6, r0
 8007912:	b15f      	cbz	r7, 800792c <_dtoa_r+0x764>
 8007914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007916:	2b00      	cmp	r3, #0
 8007918:	dd08      	ble.n	800792c <_dtoa_r+0x764>
 800791a:	42bb      	cmp	r3, r7
 800791c:	bfa8      	it	ge
 800791e:	463b      	movge	r3, r7
 8007920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007922:	eba9 0903 	sub.w	r9, r9, r3
 8007926:	1aff      	subs	r7, r7, r3
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	9309      	str	r3, [sp, #36]	; 0x24
 800792c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792e:	b1f3      	cbz	r3, 800796e <_dtoa_r+0x7a6>
 8007930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80a0 	beq.w	8007a78 <_dtoa_r+0x8b0>
 8007938:	2c00      	cmp	r4, #0
 800793a:	dd10      	ble.n	800795e <_dtoa_r+0x796>
 800793c:	4631      	mov	r1, r6
 800793e:	4622      	mov	r2, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 fd1f 	bl	8008384 <__pow5mult>
 8007946:	4652      	mov	r2, sl
 8007948:	4601      	mov	r1, r0
 800794a:	4606      	mov	r6, r0
 800794c:	4628      	mov	r0, r5
 800794e:	f000 fc71 	bl	8008234 <__multiply>
 8007952:	4680      	mov	r8, r0
 8007954:	4651      	mov	r1, sl
 8007956:	4628      	mov	r0, r5
 8007958:	f000 fb56 	bl	8008008 <_Bfree>
 800795c:	46c2      	mov	sl, r8
 800795e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007960:	1b1a      	subs	r2, r3, r4
 8007962:	d004      	beq.n	800796e <_dtoa_r+0x7a6>
 8007964:	4651      	mov	r1, sl
 8007966:	4628      	mov	r0, r5
 8007968:	f000 fd0c 	bl	8008384 <__pow5mult>
 800796c:	4682      	mov	sl, r0
 800796e:	2101      	movs	r1, #1
 8007970:	4628      	mov	r0, r5
 8007972:	f000 fc49 	bl	8008208 <__i2b>
 8007976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007978:	4604      	mov	r4, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	f340 8082 	ble.w	8007a84 <_dtoa_r+0x8bc>
 8007980:	461a      	mov	r2, r3
 8007982:	4601      	mov	r1, r0
 8007984:	4628      	mov	r0, r5
 8007986:	f000 fcfd 	bl	8008384 <__pow5mult>
 800798a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800798c:	4604      	mov	r4, r0
 800798e:	2b01      	cmp	r3, #1
 8007990:	dd7b      	ble.n	8007a8a <_dtoa_r+0x8c2>
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	6923      	ldr	r3, [r4, #16]
 8007998:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800799c:	6918      	ldr	r0, [r3, #16]
 800799e:	f000 fbe5 	bl	800816c <__hi0bits>
 80079a2:	f1c0 0020 	rsb	r0, r0, #32
 80079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a8:	4418      	add	r0, r3
 80079aa:	f010 001f 	ands.w	r0, r0, #31
 80079ae:	f000 8092 	beq.w	8007ad6 <_dtoa_r+0x90e>
 80079b2:	f1c0 0320 	rsb	r3, r0, #32
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	f340 8085 	ble.w	8007ac6 <_dtoa_r+0x8fe>
 80079bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079be:	f1c0 001c 	rsb	r0, r0, #28
 80079c2:	4403      	add	r3, r0
 80079c4:	4481      	add	r9, r0
 80079c6:	4407      	add	r7, r0
 80079c8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ca:	f1b9 0f00 	cmp.w	r9, #0
 80079ce:	dd05      	ble.n	80079dc <_dtoa_r+0x814>
 80079d0:	4651      	mov	r1, sl
 80079d2:	464a      	mov	r2, r9
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 fd2f 	bl	8008438 <__lshift>
 80079da:	4682      	mov	sl, r0
 80079dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079de:	2b00      	cmp	r3, #0
 80079e0:	dd05      	ble.n	80079ee <_dtoa_r+0x826>
 80079e2:	4621      	mov	r1, r4
 80079e4:	461a      	mov	r2, r3
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 fd26 	bl	8008438 <__lshift>
 80079ec:	4604      	mov	r4, r0
 80079ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d072      	beq.n	8007ada <_dtoa_r+0x912>
 80079f4:	4621      	mov	r1, r4
 80079f6:	4650      	mov	r0, sl
 80079f8:	f000 fd8a 	bl	8008510 <__mcmp>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	da6c      	bge.n	8007ada <_dtoa_r+0x912>
 8007a00:	2300      	movs	r3, #0
 8007a02:	4651      	mov	r1, sl
 8007a04:	220a      	movs	r2, #10
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 fb20 	bl	800804c <__multadd>
 8007a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a0e:	4682      	mov	sl, r0
 8007a10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 81ac 	beq.w	8007d72 <_dtoa_r+0xbaa>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	220a      	movs	r2, #10
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 fb13 	bl	800804c <__multadd>
 8007a26:	9b06      	ldr	r3, [sp, #24]
 8007a28:	4606      	mov	r6, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f300 8093 	bgt.w	8007b56 <_dtoa_r+0x98e>
 8007a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	dc59      	bgt.n	8007aea <_dtoa_r+0x922>
 8007a36:	e08e      	b.n	8007b56 <_dtoa_r+0x98e>
 8007a38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a3e:	e75d      	b.n	80078fc <_dtoa_r+0x734>
 8007a40:	9b08      	ldr	r3, [sp, #32]
 8007a42:	1e5c      	subs	r4, r3, #1
 8007a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	bfbf      	itttt	lt
 8007a4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a4c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007a4e:	1ae3      	sublt	r3, r4, r3
 8007a50:	18d2      	addlt	r2, r2, r3
 8007a52:	bfa8      	it	ge
 8007a54:	1b1c      	subge	r4, r3, r4
 8007a56:	9b08      	ldr	r3, [sp, #32]
 8007a58:	bfbe      	ittt	lt
 8007a5a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007a5c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007a5e:	2400      	movlt	r4, #0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	bfb5      	itete	lt
 8007a64:	eba9 0703 	sublt.w	r7, r9, r3
 8007a68:	464f      	movge	r7, r9
 8007a6a:	2300      	movlt	r3, #0
 8007a6c:	9b08      	ldrge	r3, [sp, #32]
 8007a6e:	e747      	b.n	8007900 <_dtoa_r+0x738>
 8007a70:	464f      	mov	r7, r9
 8007a72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a76:	e74c      	b.n	8007912 <_dtoa_r+0x74a>
 8007a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a7a:	e773      	b.n	8007964 <_dtoa_r+0x79c>
 8007a7c:	3fe00000 	.word	0x3fe00000
 8007a80:	40240000 	.word	0x40240000
 8007a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	dc18      	bgt.n	8007abc <_dtoa_r+0x8f4>
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	b9b3      	cbnz	r3, 8007abc <_dtoa_r+0x8f4>
 8007a8e:	9b05      	ldr	r3, [sp, #20]
 8007a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a94:	b993      	cbnz	r3, 8007abc <_dtoa_r+0x8f4>
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a9c:	0d1b      	lsrs	r3, r3, #20
 8007a9e:	051b      	lsls	r3, r3, #20
 8007aa0:	b17b      	cbz	r3, 8007ac2 <_dtoa_r+0x8fa>
 8007aa2:	f04f 0801 	mov.w	r8, #1
 8007aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa8:	f109 0901 	add.w	r9, r9, #1
 8007aac:	3301      	adds	r3, #1
 8007aae:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f47f af6f 	bne.w	8007996 <_dtoa_r+0x7ce>
 8007ab8:	2001      	movs	r0, #1
 8007aba:	e774      	b.n	80079a6 <_dtoa_r+0x7de>
 8007abc:	f04f 0800 	mov.w	r8, #0
 8007ac0:	e7f6      	b.n	8007ab0 <_dtoa_r+0x8e8>
 8007ac2:	4698      	mov	r8, r3
 8007ac4:	e7f4      	b.n	8007ab0 <_dtoa_r+0x8e8>
 8007ac6:	d080      	beq.n	80079ca <_dtoa_r+0x802>
 8007ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aca:	331c      	adds	r3, #28
 8007acc:	441a      	add	r2, r3
 8007ace:	4499      	add	r9, r3
 8007ad0:	441f      	add	r7, r3
 8007ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad4:	e779      	b.n	80079ca <_dtoa_r+0x802>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	e7f6      	b.n	8007ac8 <_dtoa_r+0x900>
 8007ada:	9b08      	ldr	r3, [sp, #32]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dc34      	bgt.n	8007b4a <_dtoa_r+0x982>
 8007ae0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	dd31      	ble.n	8007b4a <_dtoa_r+0x982>
 8007ae6:	9b08      	ldr	r3, [sp, #32]
 8007ae8:	9306      	str	r3, [sp, #24]
 8007aea:	9b06      	ldr	r3, [sp, #24]
 8007aec:	b963      	cbnz	r3, 8007b08 <_dtoa_r+0x940>
 8007aee:	4621      	mov	r1, r4
 8007af0:	2205      	movs	r2, #5
 8007af2:	4628      	mov	r0, r5
 8007af4:	f000 faaa 	bl	800804c <__multadd>
 8007af8:	4601      	mov	r1, r0
 8007afa:	4604      	mov	r4, r0
 8007afc:	4650      	mov	r0, sl
 8007afe:	f000 fd07 	bl	8008510 <__mcmp>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f73f adbf 	bgt.w	8007686 <_dtoa_r+0x4be>
 8007b08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b0a:	9f03      	ldr	r7, [sp, #12]
 8007b0c:	ea6f 0b03 	mvn.w	fp, r3
 8007b10:	f04f 0800 	mov.w	r8, #0
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 fa76 	bl	8008008 <_Bfree>
 8007b1c:	2e00      	cmp	r6, #0
 8007b1e:	f43f aead 	beq.w	800787c <_dtoa_r+0x6b4>
 8007b22:	f1b8 0f00 	cmp.w	r8, #0
 8007b26:	d005      	beq.n	8007b34 <_dtoa_r+0x96c>
 8007b28:	45b0      	cmp	r8, r6
 8007b2a:	d003      	beq.n	8007b34 <_dtoa_r+0x96c>
 8007b2c:	4641      	mov	r1, r8
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 fa6a 	bl	8008008 <_Bfree>
 8007b34:	4631      	mov	r1, r6
 8007b36:	4628      	mov	r0, r5
 8007b38:	f000 fa66 	bl	8008008 <_Bfree>
 8007b3c:	e69e      	b.n	800787c <_dtoa_r+0x6b4>
 8007b3e:	2400      	movs	r4, #0
 8007b40:	4626      	mov	r6, r4
 8007b42:	e7e1      	b.n	8007b08 <_dtoa_r+0x940>
 8007b44:	46c3      	mov	fp, r8
 8007b46:	4626      	mov	r6, r4
 8007b48:	e59d      	b.n	8007686 <_dtoa_r+0x4be>
 8007b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80c8 	beq.w	8007ce2 <_dtoa_r+0xb1a>
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	9306      	str	r3, [sp, #24]
 8007b56:	2f00      	cmp	r7, #0
 8007b58:	dd05      	ble.n	8007b66 <_dtoa_r+0x99e>
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	463a      	mov	r2, r7
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f000 fc6a 	bl	8008438 <__lshift>
 8007b64:	4606      	mov	r6, r0
 8007b66:	f1b8 0f00 	cmp.w	r8, #0
 8007b6a:	d05b      	beq.n	8007c24 <_dtoa_r+0xa5c>
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	6871      	ldr	r1, [r6, #4]
 8007b70:	f000 fa0a 	bl	8007f88 <_Balloc>
 8007b74:	4607      	mov	r7, r0
 8007b76:	b928      	cbnz	r0, 8007b84 <_dtoa_r+0x9bc>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b7e:	4b81      	ldr	r3, [pc, #516]	; (8007d84 <_dtoa_r+0xbbc>)
 8007b80:	f7ff bb36 	b.w	80071f0 <_dtoa_r+0x28>
 8007b84:	6932      	ldr	r2, [r6, #16]
 8007b86:	f106 010c 	add.w	r1, r6, #12
 8007b8a:	3202      	adds	r2, #2
 8007b8c:	0092      	lsls	r2, r2, #2
 8007b8e:	300c      	adds	r0, #12
 8007b90:	f001 ff60 	bl	8009a54 <memcpy>
 8007b94:	2201      	movs	r2, #1
 8007b96:	4639      	mov	r1, r7
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f000 fc4d 	bl	8008438 <__lshift>
 8007b9e:	46b0      	mov	r8, r6
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	9b03      	ldr	r3, [sp, #12]
 8007ba4:	9a03      	ldr	r2, [sp, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	9308      	str	r3, [sp, #32]
 8007baa:	9b06      	ldr	r3, [sp, #24]
 8007bac:	4413      	add	r3, r2
 8007bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bb0:	9b04      	ldr	r3, [sp, #16]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb8:	9b08      	ldr	r3, [sp, #32]
 8007bba:	4621      	mov	r1, r4
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	9304      	str	r3, [sp, #16]
 8007bc2:	f7ff fa75 	bl	80070b0 <quorem>
 8007bc6:	4641      	mov	r1, r8
 8007bc8:	9006      	str	r0, [sp, #24]
 8007bca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bce:	4650      	mov	r0, sl
 8007bd0:	f000 fc9e 	bl	8008510 <__mcmp>
 8007bd4:	4632      	mov	r2, r6
 8007bd6:	9009      	str	r0, [sp, #36]	; 0x24
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 fcb4 	bl	8008548 <__mdiff>
 8007be0:	68c2      	ldr	r2, [r0, #12]
 8007be2:	4607      	mov	r7, r0
 8007be4:	bb02      	cbnz	r2, 8007c28 <_dtoa_r+0xa60>
 8007be6:	4601      	mov	r1, r0
 8007be8:	4650      	mov	r0, sl
 8007bea:	f000 fc91 	bl	8008510 <__mcmp>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	920c      	str	r2, [sp, #48]	; 0x30
 8007bf6:	f000 fa07 	bl	8008008 <_Bfree>
 8007bfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bfe:	9f08      	ldr	r7, [sp, #32]
 8007c00:	ea43 0102 	orr.w	r1, r3, r2
 8007c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c06:	4319      	orrs	r1, r3
 8007c08:	d110      	bne.n	8007c2c <_dtoa_r+0xa64>
 8007c0a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c0e:	d029      	beq.n	8007c64 <_dtoa_r+0xa9c>
 8007c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	dd02      	ble.n	8007c1c <_dtoa_r+0xa54>
 8007c16:	9b06      	ldr	r3, [sp, #24]
 8007c18:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	f883 9000 	strb.w	r9, [r3]
 8007c22:	e777      	b.n	8007b14 <_dtoa_r+0x94c>
 8007c24:	4630      	mov	r0, r6
 8007c26:	e7ba      	b.n	8007b9e <_dtoa_r+0x9d6>
 8007c28:	2201      	movs	r2, #1
 8007c2a:	e7e1      	b.n	8007bf0 <_dtoa_r+0xa28>
 8007c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	db04      	blt.n	8007c3c <_dtoa_r+0xa74>
 8007c32:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007c34:	430b      	orrs	r3, r1
 8007c36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	d120      	bne.n	8007c7e <_dtoa_r+0xab6>
 8007c3c:	2a00      	cmp	r2, #0
 8007c3e:	dded      	ble.n	8007c1c <_dtoa_r+0xa54>
 8007c40:	4651      	mov	r1, sl
 8007c42:	2201      	movs	r2, #1
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 fbf7 	bl	8008438 <__lshift>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4682      	mov	sl, r0
 8007c4e:	f000 fc5f 	bl	8008510 <__mcmp>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	dc03      	bgt.n	8007c5e <_dtoa_r+0xa96>
 8007c56:	d1e1      	bne.n	8007c1c <_dtoa_r+0xa54>
 8007c58:	f019 0f01 	tst.w	r9, #1
 8007c5c:	d0de      	beq.n	8007c1c <_dtoa_r+0xa54>
 8007c5e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c62:	d1d8      	bne.n	8007c16 <_dtoa_r+0xa4e>
 8007c64:	2339      	movs	r3, #57	; 0x39
 8007c66:	9a04      	ldr	r2, [sp, #16]
 8007c68:	7013      	strb	r3, [r2, #0]
 8007c6a:	463b      	mov	r3, r7
 8007c6c:	461f      	mov	r7, r3
 8007c6e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2a39      	cmp	r2, #57	; 0x39
 8007c76:	d06b      	beq.n	8007d50 <_dtoa_r+0xb88>
 8007c78:	3201      	adds	r2, #1
 8007c7a:	701a      	strb	r2, [r3, #0]
 8007c7c:	e74a      	b.n	8007b14 <_dtoa_r+0x94c>
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	dd07      	ble.n	8007c92 <_dtoa_r+0xaca>
 8007c82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c86:	d0ed      	beq.n	8007c64 <_dtoa_r+0xa9c>
 8007c88:	9a04      	ldr	r2, [sp, #16]
 8007c8a:	f109 0301 	add.w	r3, r9, #1
 8007c8e:	7013      	strb	r3, [r2, #0]
 8007c90:	e740      	b.n	8007b14 <_dtoa_r+0x94c>
 8007c92:	9b08      	ldr	r3, [sp, #32]
 8007c94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c96:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d042      	beq.n	8007d24 <_dtoa_r+0xb5c>
 8007c9e:	4651      	mov	r1, sl
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	220a      	movs	r2, #10
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f000 f9d1 	bl	800804c <__multadd>
 8007caa:	45b0      	cmp	r8, r6
 8007cac:	4682      	mov	sl, r0
 8007cae:	f04f 0300 	mov.w	r3, #0
 8007cb2:	f04f 020a 	mov.w	r2, #10
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	4628      	mov	r0, r5
 8007cba:	d107      	bne.n	8007ccc <_dtoa_r+0xb04>
 8007cbc:	f000 f9c6 	bl	800804c <__multadd>
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	9b08      	ldr	r3, [sp, #32]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	9308      	str	r3, [sp, #32]
 8007cca:	e775      	b.n	8007bb8 <_dtoa_r+0x9f0>
 8007ccc:	f000 f9be 	bl	800804c <__multadd>
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	220a      	movs	r2, #10
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 f9b7 	bl	800804c <__multadd>
 8007cde:	4606      	mov	r6, r0
 8007ce0:	e7f0      	b.n	8007cc4 <_dtoa_r+0xafc>
 8007ce2:	9b08      	ldr	r3, [sp, #32]
 8007ce4:	9306      	str	r3, [sp, #24]
 8007ce6:	9f03      	ldr	r7, [sp, #12]
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4650      	mov	r0, sl
 8007cec:	f7ff f9e0 	bl	80070b0 <quorem>
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007cf6:	f807 9b01 	strb.w	r9, [r7], #1
 8007cfa:	1afa      	subs	r2, r7, r3
 8007cfc:	9b06      	ldr	r3, [sp, #24]
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	dd07      	ble.n	8007d12 <_dtoa_r+0xb4a>
 8007d02:	4651      	mov	r1, sl
 8007d04:	2300      	movs	r3, #0
 8007d06:	220a      	movs	r2, #10
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 f99f 	bl	800804c <__multadd>
 8007d0e:	4682      	mov	sl, r0
 8007d10:	e7ea      	b.n	8007ce8 <_dtoa_r+0xb20>
 8007d12:	9b06      	ldr	r3, [sp, #24]
 8007d14:	f04f 0800 	mov.w	r8, #0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bfcc      	ite	gt
 8007d1c:	461f      	movgt	r7, r3
 8007d1e:	2701      	movle	r7, #1
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	441f      	add	r7, r3
 8007d24:	4651      	mov	r1, sl
 8007d26:	2201      	movs	r2, #1
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f000 fb85 	bl	8008438 <__lshift>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4682      	mov	sl, r0
 8007d32:	f000 fbed 	bl	8008510 <__mcmp>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	dc97      	bgt.n	8007c6a <_dtoa_r+0xaa2>
 8007d3a:	d102      	bne.n	8007d42 <_dtoa_r+0xb7a>
 8007d3c:	f019 0f01 	tst.w	r9, #1
 8007d40:	d193      	bne.n	8007c6a <_dtoa_r+0xaa2>
 8007d42:	463b      	mov	r3, r7
 8007d44:	461f      	mov	r7, r3
 8007d46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d4a:	2a30      	cmp	r2, #48	; 0x30
 8007d4c:	d0fa      	beq.n	8007d44 <_dtoa_r+0xb7c>
 8007d4e:	e6e1      	b.n	8007b14 <_dtoa_r+0x94c>
 8007d50:	9a03      	ldr	r2, [sp, #12]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d18a      	bne.n	8007c6c <_dtoa_r+0xaa4>
 8007d56:	2331      	movs	r3, #49	; 0x31
 8007d58:	f10b 0b01 	add.w	fp, fp, #1
 8007d5c:	e797      	b.n	8007c8e <_dtoa_r+0xac6>
 8007d5e:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <_dtoa_r+0xbc0>)
 8007d60:	f7ff ba9f 	b.w	80072a2 <_dtoa_r+0xda>
 8007d64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f47f aa77 	bne.w	800725a <_dtoa_r+0x92>
 8007d6c:	4b07      	ldr	r3, [pc, #28]	; (8007d8c <_dtoa_r+0xbc4>)
 8007d6e:	f7ff ba98 	b.w	80072a2 <_dtoa_r+0xda>
 8007d72:	9b06      	ldr	r3, [sp, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dcb6      	bgt.n	8007ce6 <_dtoa_r+0xb1e>
 8007d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	f73f aeb5 	bgt.w	8007aea <_dtoa_r+0x922>
 8007d80:	e7b1      	b.n	8007ce6 <_dtoa_r+0xb1e>
 8007d82:	bf00      	nop
 8007d84:	0800aa37 	.word	0x0800aa37
 8007d88:	0800a992 	.word	0x0800a992
 8007d8c:	0800a9bb 	.word	0x0800a9bb

08007d90 <_free_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4605      	mov	r5, r0
 8007d94:	2900      	cmp	r1, #0
 8007d96:	d040      	beq.n	8007e1a <_free_r+0x8a>
 8007d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9c:	1f0c      	subs	r4, r1, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfb8      	it	lt
 8007da2:	18e4      	addlt	r4, r4, r3
 8007da4:	f000 f8e4 	bl	8007f70 <__malloc_lock>
 8007da8:	4a1c      	ldr	r2, [pc, #112]	; (8007e1c <_free_r+0x8c>)
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	b933      	cbnz	r3, 8007dbc <_free_r+0x2c>
 8007dae:	6063      	str	r3, [r4, #4]
 8007db0:	6014      	str	r4, [r2, #0]
 8007db2:	4628      	mov	r0, r5
 8007db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db8:	f000 b8e0 	b.w	8007f7c <__malloc_unlock>
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	d908      	bls.n	8007dd2 <_free_r+0x42>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	1821      	adds	r1, r4, r0
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf01      	itttt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	1809      	addeq	r1, r1, r0
 8007dce:	6021      	streq	r1, [r4, #0]
 8007dd0:	e7ed      	b.n	8007dae <_free_r+0x1e>
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	b10b      	cbz	r3, 8007ddc <_free_r+0x4c>
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d9fa      	bls.n	8007dd2 <_free_r+0x42>
 8007ddc:	6811      	ldr	r1, [r2, #0]
 8007dde:	1850      	adds	r0, r2, r1
 8007de0:	42a0      	cmp	r0, r4
 8007de2:	d10b      	bne.n	8007dfc <_free_r+0x6c>
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	4401      	add	r1, r0
 8007de8:	1850      	adds	r0, r2, r1
 8007dea:	4283      	cmp	r3, r0
 8007dec:	6011      	str	r1, [r2, #0]
 8007dee:	d1e0      	bne.n	8007db2 <_free_r+0x22>
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	4408      	add	r0, r1
 8007df6:	6010      	str	r0, [r2, #0]
 8007df8:	6053      	str	r3, [r2, #4]
 8007dfa:	e7da      	b.n	8007db2 <_free_r+0x22>
 8007dfc:	d902      	bls.n	8007e04 <_free_r+0x74>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	e7d6      	b.n	8007db2 <_free_r+0x22>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	1821      	adds	r1, r4, r0
 8007e08:	428b      	cmp	r3, r1
 8007e0a:	bf01      	itttt	eq
 8007e0c:	6819      	ldreq	r1, [r3, #0]
 8007e0e:	685b      	ldreq	r3, [r3, #4]
 8007e10:	1809      	addeq	r1, r1, r0
 8007e12:	6021      	streq	r1, [r4, #0]
 8007e14:	6063      	str	r3, [r4, #4]
 8007e16:	6054      	str	r4, [r2, #4]
 8007e18:	e7cb      	b.n	8007db2 <_free_r+0x22>
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	2000058c 	.word	0x2000058c

08007e20 <malloc>:
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <malloc+0xc>)
 8007e22:	4601      	mov	r1, r0
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	f000 b823 	b.w	8007e70 <_malloc_r>
 8007e2a:	bf00      	nop
 8007e2c:	20000064 	.word	0x20000064

08007e30 <sbrk_aligned>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	4e0e      	ldr	r6, [pc, #56]	; (8007e6c <sbrk_aligned+0x3c>)
 8007e34:	460c      	mov	r4, r1
 8007e36:	6831      	ldr	r1, [r6, #0]
 8007e38:	4605      	mov	r5, r0
 8007e3a:	b911      	cbnz	r1, 8007e42 <sbrk_aligned+0x12>
 8007e3c:	f001 fdfa 	bl	8009a34 <_sbrk_r>
 8007e40:	6030      	str	r0, [r6, #0]
 8007e42:	4621      	mov	r1, r4
 8007e44:	4628      	mov	r0, r5
 8007e46:	f001 fdf5 	bl	8009a34 <_sbrk_r>
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	d00a      	beq.n	8007e64 <sbrk_aligned+0x34>
 8007e4e:	1cc4      	adds	r4, r0, #3
 8007e50:	f024 0403 	bic.w	r4, r4, #3
 8007e54:	42a0      	cmp	r0, r4
 8007e56:	d007      	beq.n	8007e68 <sbrk_aligned+0x38>
 8007e58:	1a21      	subs	r1, r4, r0
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f001 fdea 	bl	8009a34 <_sbrk_r>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d101      	bne.n	8007e68 <sbrk_aligned+0x38>
 8007e64:	f04f 34ff 	mov.w	r4, #4294967295
 8007e68:	4620      	mov	r0, r4
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	20000590 	.word	0x20000590

08007e70 <_malloc_r>:
 8007e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e74:	1ccd      	adds	r5, r1, #3
 8007e76:	f025 0503 	bic.w	r5, r5, #3
 8007e7a:	3508      	adds	r5, #8
 8007e7c:	2d0c      	cmp	r5, #12
 8007e7e:	bf38      	it	cc
 8007e80:	250c      	movcc	r5, #12
 8007e82:	2d00      	cmp	r5, #0
 8007e84:	4607      	mov	r7, r0
 8007e86:	db01      	blt.n	8007e8c <_malloc_r+0x1c>
 8007e88:	42a9      	cmp	r1, r5
 8007e8a:	d905      	bls.n	8007e98 <_malloc_r+0x28>
 8007e8c:	230c      	movs	r3, #12
 8007e8e:	2600      	movs	r6, #0
 8007e90:	603b      	str	r3, [r7, #0]
 8007e92:	4630      	mov	r0, r6
 8007e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f6c <_malloc_r+0xfc>
 8007e9c:	f000 f868 	bl	8007f70 <__malloc_lock>
 8007ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea4:	461c      	mov	r4, r3
 8007ea6:	bb5c      	cbnz	r4, 8007f00 <_malloc_r+0x90>
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7ff ffc0 	bl	8007e30 <sbrk_aligned>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	d155      	bne.n	8007f62 <_malloc_r+0xf2>
 8007eb6:	f8d8 4000 	ldr.w	r4, [r8]
 8007eba:	4626      	mov	r6, r4
 8007ebc:	2e00      	cmp	r6, #0
 8007ebe:	d145      	bne.n	8007f4c <_malloc_r+0xdc>
 8007ec0:	2c00      	cmp	r4, #0
 8007ec2:	d048      	beq.n	8007f56 <_malloc_r+0xe6>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4638      	mov	r0, r7
 8007eca:	eb04 0903 	add.w	r9, r4, r3
 8007ece:	f001 fdb1 	bl	8009a34 <_sbrk_r>
 8007ed2:	4581      	cmp	r9, r0
 8007ed4:	d13f      	bne.n	8007f56 <_malloc_r+0xe6>
 8007ed6:	6821      	ldr	r1, [r4, #0]
 8007ed8:	4638      	mov	r0, r7
 8007eda:	1a6d      	subs	r5, r5, r1
 8007edc:	4629      	mov	r1, r5
 8007ede:	f7ff ffa7 	bl	8007e30 <sbrk_aligned>
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d037      	beq.n	8007f56 <_malloc_r+0xe6>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	442b      	add	r3, r5
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d038      	beq.n	8007f66 <_malloc_r+0xf6>
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	42a2      	cmp	r2, r4
 8007ef8:	d12b      	bne.n	8007f52 <_malloc_r+0xe2>
 8007efa:	2200      	movs	r2, #0
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	e00f      	b.n	8007f20 <_malloc_r+0xb0>
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	1b52      	subs	r2, r2, r5
 8007f04:	d41f      	bmi.n	8007f46 <_malloc_r+0xd6>
 8007f06:	2a0b      	cmp	r2, #11
 8007f08:	d917      	bls.n	8007f3a <_malloc_r+0xca>
 8007f0a:	1961      	adds	r1, r4, r5
 8007f0c:	42a3      	cmp	r3, r4
 8007f0e:	6025      	str	r5, [r4, #0]
 8007f10:	bf18      	it	ne
 8007f12:	6059      	strne	r1, [r3, #4]
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	bf08      	it	eq
 8007f18:	f8c8 1000 	streq.w	r1, [r8]
 8007f1c:	5162      	str	r2, [r4, r5]
 8007f1e:	604b      	str	r3, [r1, #4]
 8007f20:	4638      	mov	r0, r7
 8007f22:	f104 060b 	add.w	r6, r4, #11
 8007f26:	f000 f829 	bl	8007f7c <__malloc_unlock>
 8007f2a:	f026 0607 	bic.w	r6, r6, #7
 8007f2e:	1d23      	adds	r3, r4, #4
 8007f30:	1af2      	subs	r2, r6, r3
 8007f32:	d0ae      	beq.n	8007e92 <_malloc_r+0x22>
 8007f34:	1b9b      	subs	r3, r3, r6
 8007f36:	50a3      	str	r3, [r4, r2]
 8007f38:	e7ab      	b.n	8007e92 <_malloc_r+0x22>
 8007f3a:	42a3      	cmp	r3, r4
 8007f3c:	6862      	ldr	r2, [r4, #4]
 8007f3e:	d1dd      	bne.n	8007efc <_malloc_r+0x8c>
 8007f40:	f8c8 2000 	str.w	r2, [r8]
 8007f44:	e7ec      	b.n	8007f20 <_malloc_r+0xb0>
 8007f46:	4623      	mov	r3, r4
 8007f48:	6864      	ldr	r4, [r4, #4]
 8007f4a:	e7ac      	b.n	8007ea6 <_malloc_r+0x36>
 8007f4c:	4634      	mov	r4, r6
 8007f4e:	6876      	ldr	r6, [r6, #4]
 8007f50:	e7b4      	b.n	8007ebc <_malloc_r+0x4c>
 8007f52:	4613      	mov	r3, r2
 8007f54:	e7cc      	b.n	8007ef0 <_malloc_r+0x80>
 8007f56:	230c      	movs	r3, #12
 8007f58:	4638      	mov	r0, r7
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	f000 f80e 	bl	8007f7c <__malloc_unlock>
 8007f60:	e797      	b.n	8007e92 <_malloc_r+0x22>
 8007f62:	6025      	str	r5, [r4, #0]
 8007f64:	e7dc      	b.n	8007f20 <_malloc_r+0xb0>
 8007f66:	605b      	str	r3, [r3, #4]
 8007f68:	deff      	udf	#255	; 0xff
 8007f6a:	bf00      	nop
 8007f6c:	2000058c 	.word	0x2000058c

08007f70 <__malloc_lock>:
 8007f70:	4801      	ldr	r0, [pc, #4]	; (8007f78 <__malloc_lock+0x8>)
 8007f72:	f7ff b888 	b.w	8007086 <__retarget_lock_acquire_recursive>
 8007f76:	bf00      	nop
 8007f78:	20000588 	.word	0x20000588

08007f7c <__malloc_unlock>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__malloc_unlock+0x8>)
 8007f7e:	f7ff b883 	b.w	8007088 <__retarget_lock_release_recursive>
 8007f82:	bf00      	nop
 8007f84:	20000588 	.word	0x20000588

08007f88 <_Balloc>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	69c6      	ldr	r6, [r0, #28]
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	460d      	mov	r5, r1
 8007f90:	b976      	cbnz	r6, 8007fb0 <_Balloc+0x28>
 8007f92:	2010      	movs	r0, #16
 8007f94:	f7ff ff44 	bl	8007e20 <malloc>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	61e0      	str	r0, [r4, #28]
 8007f9c:	b920      	cbnz	r0, 8007fa8 <_Balloc+0x20>
 8007f9e:	216b      	movs	r1, #107	; 0x6b
 8007fa0:	4b17      	ldr	r3, [pc, #92]	; (8008000 <_Balloc+0x78>)
 8007fa2:	4818      	ldr	r0, [pc, #96]	; (8008004 <_Balloc+0x7c>)
 8007fa4:	f001 fd6a 	bl	8009a7c <__assert_func>
 8007fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fac:	6006      	str	r6, [r0, #0]
 8007fae:	60c6      	str	r6, [r0, #12]
 8007fb0:	69e6      	ldr	r6, [r4, #28]
 8007fb2:	68f3      	ldr	r3, [r6, #12]
 8007fb4:	b183      	cbz	r3, 8007fd8 <_Balloc+0x50>
 8007fb6:	69e3      	ldr	r3, [r4, #28]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fbe:	b9b8      	cbnz	r0, 8007ff0 <_Balloc+0x68>
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	fa01 f605 	lsl.w	r6, r1, r5
 8007fc6:	1d72      	adds	r2, r6, #5
 8007fc8:	4620      	mov	r0, r4
 8007fca:	0092      	lsls	r2, r2, #2
 8007fcc:	f001 fd74 	bl	8009ab8 <_calloc_r>
 8007fd0:	b160      	cbz	r0, 8007fec <_Balloc+0x64>
 8007fd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fd6:	e00e      	b.n	8007ff6 <_Balloc+0x6e>
 8007fd8:	2221      	movs	r2, #33	; 0x21
 8007fda:	2104      	movs	r1, #4
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f001 fd6b 	bl	8009ab8 <_calloc_r>
 8007fe2:	69e3      	ldr	r3, [r4, #28]
 8007fe4:	60f0      	str	r0, [r6, #12]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e4      	bne.n	8007fb6 <_Balloc+0x2e>
 8007fec:	2000      	movs	r0, #0
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	6802      	ldr	r2, [r0, #0]
 8007ff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ffc:	e7f7      	b.n	8007fee <_Balloc+0x66>
 8007ffe:	bf00      	nop
 8008000:	0800a9c8 	.word	0x0800a9c8
 8008004:	0800aa48 	.word	0x0800aa48

08008008 <_Bfree>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	69c6      	ldr	r6, [r0, #28]
 800800c:	4605      	mov	r5, r0
 800800e:	460c      	mov	r4, r1
 8008010:	b976      	cbnz	r6, 8008030 <_Bfree+0x28>
 8008012:	2010      	movs	r0, #16
 8008014:	f7ff ff04 	bl	8007e20 <malloc>
 8008018:	4602      	mov	r2, r0
 800801a:	61e8      	str	r0, [r5, #28]
 800801c:	b920      	cbnz	r0, 8008028 <_Bfree+0x20>
 800801e:	218f      	movs	r1, #143	; 0x8f
 8008020:	4b08      	ldr	r3, [pc, #32]	; (8008044 <_Bfree+0x3c>)
 8008022:	4809      	ldr	r0, [pc, #36]	; (8008048 <_Bfree+0x40>)
 8008024:	f001 fd2a 	bl	8009a7c <__assert_func>
 8008028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800802c:	6006      	str	r6, [r0, #0]
 800802e:	60c6      	str	r6, [r0, #12]
 8008030:	b13c      	cbz	r4, 8008042 <_Bfree+0x3a>
 8008032:	69eb      	ldr	r3, [r5, #28]
 8008034:	6862      	ldr	r2, [r4, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800803c:	6021      	str	r1, [r4, #0]
 800803e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	0800a9c8 	.word	0x0800a9c8
 8008048:	0800aa48 	.word	0x0800aa48

0800804c <__multadd>:
 800804c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008050:	4607      	mov	r7, r0
 8008052:	460c      	mov	r4, r1
 8008054:	461e      	mov	r6, r3
 8008056:	2000      	movs	r0, #0
 8008058:	690d      	ldr	r5, [r1, #16]
 800805a:	f101 0c14 	add.w	ip, r1, #20
 800805e:	f8dc 3000 	ldr.w	r3, [ip]
 8008062:	3001      	adds	r0, #1
 8008064:	b299      	uxth	r1, r3
 8008066:	fb02 6101 	mla	r1, r2, r1, r6
 800806a:	0c1e      	lsrs	r6, r3, #16
 800806c:	0c0b      	lsrs	r3, r1, #16
 800806e:	fb02 3306 	mla	r3, r2, r6, r3
 8008072:	b289      	uxth	r1, r1
 8008074:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008078:	4285      	cmp	r5, r0
 800807a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800807e:	f84c 1b04 	str.w	r1, [ip], #4
 8008082:	dcec      	bgt.n	800805e <__multadd+0x12>
 8008084:	b30e      	cbz	r6, 80080ca <__multadd+0x7e>
 8008086:	68a3      	ldr	r3, [r4, #8]
 8008088:	42ab      	cmp	r3, r5
 800808a:	dc19      	bgt.n	80080c0 <__multadd+0x74>
 800808c:	6861      	ldr	r1, [r4, #4]
 800808e:	4638      	mov	r0, r7
 8008090:	3101      	adds	r1, #1
 8008092:	f7ff ff79 	bl	8007f88 <_Balloc>
 8008096:	4680      	mov	r8, r0
 8008098:	b928      	cbnz	r0, 80080a6 <__multadd+0x5a>
 800809a:	4602      	mov	r2, r0
 800809c:	21ba      	movs	r1, #186	; 0xba
 800809e:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <__multadd+0x84>)
 80080a0:	480c      	ldr	r0, [pc, #48]	; (80080d4 <__multadd+0x88>)
 80080a2:	f001 fceb 	bl	8009a7c <__assert_func>
 80080a6:	6922      	ldr	r2, [r4, #16]
 80080a8:	f104 010c 	add.w	r1, r4, #12
 80080ac:	3202      	adds	r2, #2
 80080ae:	0092      	lsls	r2, r2, #2
 80080b0:	300c      	adds	r0, #12
 80080b2:	f001 fccf 	bl	8009a54 <memcpy>
 80080b6:	4621      	mov	r1, r4
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff ffa5 	bl	8008008 <_Bfree>
 80080be:	4644      	mov	r4, r8
 80080c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080c4:	3501      	adds	r5, #1
 80080c6:	615e      	str	r6, [r3, #20]
 80080c8:	6125      	str	r5, [r4, #16]
 80080ca:	4620      	mov	r0, r4
 80080cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d0:	0800aa37 	.word	0x0800aa37
 80080d4:	0800aa48 	.word	0x0800aa48

080080d8 <__s2b>:
 80080d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080dc:	4615      	mov	r5, r2
 80080de:	2209      	movs	r2, #9
 80080e0:	461f      	mov	r7, r3
 80080e2:	3308      	adds	r3, #8
 80080e4:	460c      	mov	r4, r1
 80080e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ea:	4606      	mov	r6, r0
 80080ec:	2201      	movs	r2, #1
 80080ee:	2100      	movs	r1, #0
 80080f0:	429a      	cmp	r2, r3
 80080f2:	db09      	blt.n	8008108 <__s2b+0x30>
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff ff47 	bl	8007f88 <_Balloc>
 80080fa:	b940      	cbnz	r0, 800810e <__s2b+0x36>
 80080fc:	4602      	mov	r2, r0
 80080fe:	21d3      	movs	r1, #211	; 0xd3
 8008100:	4b18      	ldr	r3, [pc, #96]	; (8008164 <__s2b+0x8c>)
 8008102:	4819      	ldr	r0, [pc, #100]	; (8008168 <__s2b+0x90>)
 8008104:	f001 fcba 	bl	8009a7c <__assert_func>
 8008108:	0052      	lsls	r2, r2, #1
 800810a:	3101      	adds	r1, #1
 800810c:	e7f0      	b.n	80080f0 <__s2b+0x18>
 800810e:	9b08      	ldr	r3, [sp, #32]
 8008110:	2d09      	cmp	r5, #9
 8008112:	6143      	str	r3, [r0, #20]
 8008114:	f04f 0301 	mov.w	r3, #1
 8008118:	6103      	str	r3, [r0, #16]
 800811a:	dd16      	ble.n	800814a <__s2b+0x72>
 800811c:	f104 0909 	add.w	r9, r4, #9
 8008120:	46c8      	mov	r8, r9
 8008122:	442c      	add	r4, r5
 8008124:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008128:	4601      	mov	r1, r0
 800812a:	220a      	movs	r2, #10
 800812c:	4630      	mov	r0, r6
 800812e:	3b30      	subs	r3, #48	; 0x30
 8008130:	f7ff ff8c 	bl	800804c <__multadd>
 8008134:	45a0      	cmp	r8, r4
 8008136:	d1f5      	bne.n	8008124 <__s2b+0x4c>
 8008138:	f1a5 0408 	sub.w	r4, r5, #8
 800813c:	444c      	add	r4, r9
 800813e:	1b2d      	subs	r5, r5, r4
 8008140:	1963      	adds	r3, r4, r5
 8008142:	42bb      	cmp	r3, r7
 8008144:	db04      	blt.n	8008150 <__s2b+0x78>
 8008146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814a:	2509      	movs	r5, #9
 800814c:	340a      	adds	r4, #10
 800814e:	e7f6      	b.n	800813e <__s2b+0x66>
 8008150:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008154:	4601      	mov	r1, r0
 8008156:	220a      	movs	r2, #10
 8008158:	4630      	mov	r0, r6
 800815a:	3b30      	subs	r3, #48	; 0x30
 800815c:	f7ff ff76 	bl	800804c <__multadd>
 8008160:	e7ee      	b.n	8008140 <__s2b+0x68>
 8008162:	bf00      	nop
 8008164:	0800aa37 	.word	0x0800aa37
 8008168:	0800aa48 	.word	0x0800aa48

0800816c <__hi0bits>:
 800816c:	0c02      	lsrs	r2, r0, #16
 800816e:	0412      	lsls	r2, r2, #16
 8008170:	4603      	mov	r3, r0
 8008172:	b9ca      	cbnz	r2, 80081a8 <__hi0bits+0x3c>
 8008174:	0403      	lsls	r3, r0, #16
 8008176:	2010      	movs	r0, #16
 8008178:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800817c:	bf04      	itt	eq
 800817e:	021b      	lsleq	r3, r3, #8
 8008180:	3008      	addeq	r0, #8
 8008182:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008186:	bf04      	itt	eq
 8008188:	011b      	lsleq	r3, r3, #4
 800818a:	3004      	addeq	r0, #4
 800818c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008190:	bf04      	itt	eq
 8008192:	009b      	lsleq	r3, r3, #2
 8008194:	3002      	addeq	r0, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	db05      	blt.n	80081a6 <__hi0bits+0x3a>
 800819a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800819e:	f100 0001 	add.w	r0, r0, #1
 80081a2:	bf08      	it	eq
 80081a4:	2020      	moveq	r0, #32
 80081a6:	4770      	bx	lr
 80081a8:	2000      	movs	r0, #0
 80081aa:	e7e5      	b.n	8008178 <__hi0bits+0xc>

080081ac <__lo0bits>:
 80081ac:	6803      	ldr	r3, [r0, #0]
 80081ae:	4602      	mov	r2, r0
 80081b0:	f013 0007 	ands.w	r0, r3, #7
 80081b4:	d00b      	beq.n	80081ce <__lo0bits+0x22>
 80081b6:	07d9      	lsls	r1, r3, #31
 80081b8:	d421      	bmi.n	80081fe <__lo0bits+0x52>
 80081ba:	0798      	lsls	r0, r3, #30
 80081bc:	bf49      	itett	mi
 80081be:	085b      	lsrmi	r3, r3, #1
 80081c0:	089b      	lsrpl	r3, r3, #2
 80081c2:	2001      	movmi	r0, #1
 80081c4:	6013      	strmi	r3, [r2, #0]
 80081c6:	bf5c      	itt	pl
 80081c8:	2002      	movpl	r0, #2
 80081ca:	6013      	strpl	r3, [r2, #0]
 80081cc:	4770      	bx	lr
 80081ce:	b299      	uxth	r1, r3
 80081d0:	b909      	cbnz	r1, 80081d6 <__lo0bits+0x2a>
 80081d2:	2010      	movs	r0, #16
 80081d4:	0c1b      	lsrs	r3, r3, #16
 80081d6:	b2d9      	uxtb	r1, r3
 80081d8:	b909      	cbnz	r1, 80081de <__lo0bits+0x32>
 80081da:	3008      	adds	r0, #8
 80081dc:	0a1b      	lsrs	r3, r3, #8
 80081de:	0719      	lsls	r1, r3, #28
 80081e0:	bf04      	itt	eq
 80081e2:	091b      	lsreq	r3, r3, #4
 80081e4:	3004      	addeq	r0, #4
 80081e6:	0799      	lsls	r1, r3, #30
 80081e8:	bf04      	itt	eq
 80081ea:	089b      	lsreq	r3, r3, #2
 80081ec:	3002      	addeq	r0, #2
 80081ee:	07d9      	lsls	r1, r3, #31
 80081f0:	d403      	bmi.n	80081fa <__lo0bits+0x4e>
 80081f2:	085b      	lsrs	r3, r3, #1
 80081f4:	f100 0001 	add.w	r0, r0, #1
 80081f8:	d003      	beq.n	8008202 <__lo0bits+0x56>
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	4770      	bx	lr
 80081fe:	2000      	movs	r0, #0
 8008200:	4770      	bx	lr
 8008202:	2020      	movs	r0, #32
 8008204:	4770      	bx	lr
	...

08008208 <__i2b>:
 8008208:	b510      	push	{r4, lr}
 800820a:	460c      	mov	r4, r1
 800820c:	2101      	movs	r1, #1
 800820e:	f7ff febb 	bl	8007f88 <_Balloc>
 8008212:	4602      	mov	r2, r0
 8008214:	b928      	cbnz	r0, 8008222 <__i2b+0x1a>
 8008216:	f240 1145 	movw	r1, #325	; 0x145
 800821a:	4b04      	ldr	r3, [pc, #16]	; (800822c <__i2b+0x24>)
 800821c:	4804      	ldr	r0, [pc, #16]	; (8008230 <__i2b+0x28>)
 800821e:	f001 fc2d 	bl	8009a7c <__assert_func>
 8008222:	2301      	movs	r3, #1
 8008224:	6144      	str	r4, [r0, #20]
 8008226:	6103      	str	r3, [r0, #16]
 8008228:	bd10      	pop	{r4, pc}
 800822a:	bf00      	nop
 800822c:	0800aa37 	.word	0x0800aa37
 8008230:	0800aa48 	.word	0x0800aa48

08008234 <__multiply>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	4691      	mov	r9, r2
 800823a:	690a      	ldr	r2, [r1, #16]
 800823c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008240:	460c      	mov	r4, r1
 8008242:	429a      	cmp	r2, r3
 8008244:	bfbe      	ittt	lt
 8008246:	460b      	movlt	r3, r1
 8008248:	464c      	movlt	r4, r9
 800824a:	4699      	movlt	r9, r3
 800824c:	6927      	ldr	r7, [r4, #16]
 800824e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	6861      	ldr	r1, [r4, #4]
 8008256:	eb07 060a 	add.w	r6, r7, sl
 800825a:	42b3      	cmp	r3, r6
 800825c:	b085      	sub	sp, #20
 800825e:	bfb8      	it	lt
 8008260:	3101      	addlt	r1, #1
 8008262:	f7ff fe91 	bl	8007f88 <_Balloc>
 8008266:	b930      	cbnz	r0, 8008276 <__multiply+0x42>
 8008268:	4602      	mov	r2, r0
 800826a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800826e:	4b43      	ldr	r3, [pc, #268]	; (800837c <__multiply+0x148>)
 8008270:	4843      	ldr	r0, [pc, #268]	; (8008380 <__multiply+0x14c>)
 8008272:	f001 fc03 	bl	8009a7c <__assert_func>
 8008276:	f100 0514 	add.w	r5, r0, #20
 800827a:	462b      	mov	r3, r5
 800827c:	2200      	movs	r2, #0
 800827e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008282:	4543      	cmp	r3, r8
 8008284:	d321      	bcc.n	80082ca <__multiply+0x96>
 8008286:	f104 0314 	add.w	r3, r4, #20
 800828a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800828e:	f109 0314 	add.w	r3, r9, #20
 8008292:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008296:	9202      	str	r2, [sp, #8]
 8008298:	1b3a      	subs	r2, r7, r4
 800829a:	3a15      	subs	r2, #21
 800829c:	f022 0203 	bic.w	r2, r2, #3
 80082a0:	3204      	adds	r2, #4
 80082a2:	f104 0115 	add.w	r1, r4, #21
 80082a6:	428f      	cmp	r7, r1
 80082a8:	bf38      	it	cc
 80082aa:	2204      	movcc	r2, #4
 80082ac:	9201      	str	r2, [sp, #4]
 80082ae:	9a02      	ldr	r2, [sp, #8]
 80082b0:	9303      	str	r3, [sp, #12]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d80c      	bhi.n	80082d0 <__multiply+0x9c>
 80082b6:	2e00      	cmp	r6, #0
 80082b8:	dd03      	ble.n	80082c2 <__multiply+0x8e>
 80082ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d05a      	beq.n	8008378 <__multiply+0x144>
 80082c2:	6106      	str	r6, [r0, #16]
 80082c4:	b005      	add	sp, #20
 80082c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ca:	f843 2b04 	str.w	r2, [r3], #4
 80082ce:	e7d8      	b.n	8008282 <__multiply+0x4e>
 80082d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80082d4:	f1ba 0f00 	cmp.w	sl, #0
 80082d8:	d023      	beq.n	8008322 <__multiply+0xee>
 80082da:	46a9      	mov	r9, r5
 80082dc:	f04f 0c00 	mov.w	ip, #0
 80082e0:	f104 0e14 	add.w	lr, r4, #20
 80082e4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082e8:	f8d9 1000 	ldr.w	r1, [r9]
 80082ec:	fa1f fb82 	uxth.w	fp, r2
 80082f0:	b289      	uxth	r1, r1
 80082f2:	fb0a 110b 	mla	r1, sl, fp, r1
 80082f6:	4461      	add	r1, ip
 80082f8:	f8d9 c000 	ldr.w	ip, [r9]
 80082fc:	0c12      	lsrs	r2, r2, #16
 80082fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008302:	fb0a c202 	mla	r2, sl, r2, ip
 8008306:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800830a:	b289      	uxth	r1, r1
 800830c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008310:	4577      	cmp	r7, lr
 8008312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008316:	f849 1b04 	str.w	r1, [r9], #4
 800831a:	d8e3      	bhi.n	80082e4 <__multiply+0xb0>
 800831c:	9a01      	ldr	r2, [sp, #4]
 800831e:	f845 c002 	str.w	ip, [r5, r2]
 8008322:	9a03      	ldr	r2, [sp, #12]
 8008324:	3304      	adds	r3, #4
 8008326:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800832a:	f1b9 0f00 	cmp.w	r9, #0
 800832e:	d021      	beq.n	8008374 <__multiply+0x140>
 8008330:	46ae      	mov	lr, r5
 8008332:	f04f 0a00 	mov.w	sl, #0
 8008336:	6829      	ldr	r1, [r5, #0]
 8008338:	f104 0c14 	add.w	ip, r4, #20
 800833c:	f8bc b000 	ldrh.w	fp, [ip]
 8008340:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008344:	b289      	uxth	r1, r1
 8008346:	fb09 220b 	mla	r2, r9, fp, r2
 800834a:	4452      	add	r2, sl
 800834c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008350:	f84e 1b04 	str.w	r1, [lr], #4
 8008354:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008358:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800835c:	f8be 1000 	ldrh.w	r1, [lr]
 8008360:	4567      	cmp	r7, ip
 8008362:	fb09 110a 	mla	r1, r9, sl, r1
 8008366:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800836a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800836e:	d8e5      	bhi.n	800833c <__multiply+0x108>
 8008370:	9a01      	ldr	r2, [sp, #4]
 8008372:	50a9      	str	r1, [r5, r2]
 8008374:	3504      	adds	r5, #4
 8008376:	e79a      	b.n	80082ae <__multiply+0x7a>
 8008378:	3e01      	subs	r6, #1
 800837a:	e79c      	b.n	80082b6 <__multiply+0x82>
 800837c:	0800aa37 	.word	0x0800aa37
 8008380:	0800aa48 	.word	0x0800aa48

08008384 <__pow5mult>:
 8008384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008388:	4615      	mov	r5, r2
 800838a:	f012 0203 	ands.w	r2, r2, #3
 800838e:	4606      	mov	r6, r0
 8008390:	460f      	mov	r7, r1
 8008392:	d007      	beq.n	80083a4 <__pow5mult+0x20>
 8008394:	4c25      	ldr	r4, [pc, #148]	; (800842c <__pow5mult+0xa8>)
 8008396:	3a01      	subs	r2, #1
 8008398:	2300      	movs	r3, #0
 800839a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800839e:	f7ff fe55 	bl	800804c <__multadd>
 80083a2:	4607      	mov	r7, r0
 80083a4:	10ad      	asrs	r5, r5, #2
 80083a6:	d03d      	beq.n	8008424 <__pow5mult+0xa0>
 80083a8:	69f4      	ldr	r4, [r6, #28]
 80083aa:	b97c      	cbnz	r4, 80083cc <__pow5mult+0x48>
 80083ac:	2010      	movs	r0, #16
 80083ae:	f7ff fd37 	bl	8007e20 <malloc>
 80083b2:	4602      	mov	r2, r0
 80083b4:	61f0      	str	r0, [r6, #28]
 80083b6:	b928      	cbnz	r0, 80083c4 <__pow5mult+0x40>
 80083b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80083bc:	4b1c      	ldr	r3, [pc, #112]	; (8008430 <__pow5mult+0xac>)
 80083be:	481d      	ldr	r0, [pc, #116]	; (8008434 <__pow5mult+0xb0>)
 80083c0:	f001 fb5c 	bl	8009a7c <__assert_func>
 80083c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c8:	6004      	str	r4, [r0, #0]
 80083ca:	60c4      	str	r4, [r0, #12]
 80083cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80083d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083d4:	b94c      	cbnz	r4, 80083ea <__pow5mult+0x66>
 80083d6:	f240 2171 	movw	r1, #625	; 0x271
 80083da:	4630      	mov	r0, r6
 80083dc:	f7ff ff14 	bl	8008208 <__i2b>
 80083e0:	2300      	movs	r3, #0
 80083e2:	4604      	mov	r4, r0
 80083e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80083e8:	6003      	str	r3, [r0, #0]
 80083ea:	f04f 0900 	mov.w	r9, #0
 80083ee:	07eb      	lsls	r3, r5, #31
 80083f0:	d50a      	bpl.n	8008408 <__pow5mult+0x84>
 80083f2:	4639      	mov	r1, r7
 80083f4:	4622      	mov	r2, r4
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7ff ff1c 	bl	8008234 <__multiply>
 80083fc:	4680      	mov	r8, r0
 80083fe:	4639      	mov	r1, r7
 8008400:	4630      	mov	r0, r6
 8008402:	f7ff fe01 	bl	8008008 <_Bfree>
 8008406:	4647      	mov	r7, r8
 8008408:	106d      	asrs	r5, r5, #1
 800840a:	d00b      	beq.n	8008424 <__pow5mult+0xa0>
 800840c:	6820      	ldr	r0, [r4, #0]
 800840e:	b938      	cbnz	r0, 8008420 <__pow5mult+0x9c>
 8008410:	4622      	mov	r2, r4
 8008412:	4621      	mov	r1, r4
 8008414:	4630      	mov	r0, r6
 8008416:	f7ff ff0d 	bl	8008234 <__multiply>
 800841a:	6020      	str	r0, [r4, #0]
 800841c:	f8c0 9000 	str.w	r9, [r0]
 8008420:	4604      	mov	r4, r0
 8008422:	e7e4      	b.n	80083ee <__pow5mult+0x6a>
 8008424:	4638      	mov	r0, r7
 8008426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842a:	bf00      	nop
 800842c:	0800ab98 	.word	0x0800ab98
 8008430:	0800a9c8 	.word	0x0800a9c8
 8008434:	0800aa48 	.word	0x0800aa48

08008438 <__lshift>:
 8008438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	460c      	mov	r4, r1
 800843e:	4607      	mov	r7, r0
 8008440:	4691      	mov	r9, r2
 8008442:	6923      	ldr	r3, [r4, #16]
 8008444:	6849      	ldr	r1, [r1, #4]
 8008446:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800844a:	68a3      	ldr	r3, [r4, #8]
 800844c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008450:	f108 0601 	add.w	r6, r8, #1
 8008454:	42b3      	cmp	r3, r6
 8008456:	db0b      	blt.n	8008470 <__lshift+0x38>
 8008458:	4638      	mov	r0, r7
 800845a:	f7ff fd95 	bl	8007f88 <_Balloc>
 800845e:	4605      	mov	r5, r0
 8008460:	b948      	cbnz	r0, 8008476 <__lshift+0x3e>
 8008462:	4602      	mov	r2, r0
 8008464:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008468:	4b27      	ldr	r3, [pc, #156]	; (8008508 <__lshift+0xd0>)
 800846a:	4828      	ldr	r0, [pc, #160]	; (800850c <__lshift+0xd4>)
 800846c:	f001 fb06 	bl	8009a7c <__assert_func>
 8008470:	3101      	adds	r1, #1
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	e7ee      	b.n	8008454 <__lshift+0x1c>
 8008476:	2300      	movs	r3, #0
 8008478:	f100 0114 	add.w	r1, r0, #20
 800847c:	f100 0210 	add.w	r2, r0, #16
 8008480:	4618      	mov	r0, r3
 8008482:	4553      	cmp	r3, sl
 8008484:	db33      	blt.n	80084ee <__lshift+0xb6>
 8008486:	6920      	ldr	r0, [r4, #16]
 8008488:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800848c:	f104 0314 	add.w	r3, r4, #20
 8008490:	f019 091f 	ands.w	r9, r9, #31
 8008494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008498:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800849c:	d02b      	beq.n	80084f6 <__lshift+0xbe>
 800849e:	468a      	mov	sl, r1
 80084a0:	2200      	movs	r2, #0
 80084a2:	f1c9 0e20 	rsb	lr, r9, #32
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	fa00 f009 	lsl.w	r0, r0, r9
 80084ac:	4310      	orrs	r0, r2
 80084ae:	f84a 0b04 	str.w	r0, [sl], #4
 80084b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b6:	459c      	cmp	ip, r3
 80084b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80084bc:	d8f3      	bhi.n	80084a6 <__lshift+0x6e>
 80084be:	ebac 0304 	sub.w	r3, ip, r4
 80084c2:	3b15      	subs	r3, #21
 80084c4:	f023 0303 	bic.w	r3, r3, #3
 80084c8:	3304      	adds	r3, #4
 80084ca:	f104 0015 	add.w	r0, r4, #21
 80084ce:	4584      	cmp	ip, r0
 80084d0:	bf38      	it	cc
 80084d2:	2304      	movcc	r3, #4
 80084d4:	50ca      	str	r2, [r1, r3]
 80084d6:	b10a      	cbz	r2, 80084dc <__lshift+0xa4>
 80084d8:	f108 0602 	add.w	r6, r8, #2
 80084dc:	3e01      	subs	r6, #1
 80084de:	4638      	mov	r0, r7
 80084e0:	4621      	mov	r1, r4
 80084e2:	612e      	str	r6, [r5, #16]
 80084e4:	f7ff fd90 	bl	8008008 <_Bfree>
 80084e8:	4628      	mov	r0, r5
 80084ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80084f2:	3301      	adds	r3, #1
 80084f4:	e7c5      	b.n	8008482 <__lshift+0x4a>
 80084f6:	3904      	subs	r1, #4
 80084f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fc:	459c      	cmp	ip, r3
 80084fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8008502:	d8f9      	bhi.n	80084f8 <__lshift+0xc0>
 8008504:	e7ea      	b.n	80084dc <__lshift+0xa4>
 8008506:	bf00      	nop
 8008508:	0800aa37 	.word	0x0800aa37
 800850c:	0800aa48 	.word	0x0800aa48

08008510 <__mcmp>:
 8008510:	4603      	mov	r3, r0
 8008512:	690a      	ldr	r2, [r1, #16]
 8008514:	6900      	ldr	r0, [r0, #16]
 8008516:	b530      	push	{r4, r5, lr}
 8008518:	1a80      	subs	r0, r0, r2
 800851a:	d10d      	bne.n	8008538 <__mcmp+0x28>
 800851c:	3314      	adds	r3, #20
 800851e:	3114      	adds	r1, #20
 8008520:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008524:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008528:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800852c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008530:	4295      	cmp	r5, r2
 8008532:	d002      	beq.n	800853a <__mcmp+0x2a>
 8008534:	d304      	bcc.n	8008540 <__mcmp+0x30>
 8008536:	2001      	movs	r0, #1
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	42a3      	cmp	r3, r4
 800853c:	d3f4      	bcc.n	8008528 <__mcmp+0x18>
 800853e:	e7fb      	b.n	8008538 <__mcmp+0x28>
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	e7f8      	b.n	8008538 <__mcmp+0x28>
	...

08008548 <__mdiff>:
 8008548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	460d      	mov	r5, r1
 800854e:	4607      	mov	r7, r0
 8008550:	4611      	mov	r1, r2
 8008552:	4628      	mov	r0, r5
 8008554:	4614      	mov	r4, r2
 8008556:	f7ff ffdb 	bl	8008510 <__mcmp>
 800855a:	1e06      	subs	r6, r0, #0
 800855c:	d111      	bne.n	8008582 <__mdiff+0x3a>
 800855e:	4631      	mov	r1, r6
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff fd11 	bl	8007f88 <_Balloc>
 8008566:	4602      	mov	r2, r0
 8008568:	b928      	cbnz	r0, 8008576 <__mdiff+0x2e>
 800856a:	f240 2137 	movw	r1, #567	; 0x237
 800856e:	4b3a      	ldr	r3, [pc, #232]	; (8008658 <__mdiff+0x110>)
 8008570:	483a      	ldr	r0, [pc, #232]	; (800865c <__mdiff+0x114>)
 8008572:	f001 fa83 	bl	8009a7c <__assert_func>
 8008576:	2301      	movs	r3, #1
 8008578:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800857c:	4610      	mov	r0, r2
 800857e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008582:	bfa4      	itt	ge
 8008584:	4623      	movge	r3, r4
 8008586:	462c      	movge	r4, r5
 8008588:	4638      	mov	r0, r7
 800858a:	6861      	ldr	r1, [r4, #4]
 800858c:	bfa6      	itte	ge
 800858e:	461d      	movge	r5, r3
 8008590:	2600      	movge	r6, #0
 8008592:	2601      	movlt	r6, #1
 8008594:	f7ff fcf8 	bl	8007f88 <_Balloc>
 8008598:	4602      	mov	r2, r0
 800859a:	b918      	cbnz	r0, 80085a4 <__mdiff+0x5c>
 800859c:	f240 2145 	movw	r1, #581	; 0x245
 80085a0:	4b2d      	ldr	r3, [pc, #180]	; (8008658 <__mdiff+0x110>)
 80085a2:	e7e5      	b.n	8008570 <__mdiff+0x28>
 80085a4:	f102 0814 	add.w	r8, r2, #20
 80085a8:	46c2      	mov	sl, r8
 80085aa:	f04f 0c00 	mov.w	ip, #0
 80085ae:	6927      	ldr	r7, [r4, #16]
 80085b0:	60c6      	str	r6, [r0, #12]
 80085b2:	692e      	ldr	r6, [r5, #16]
 80085b4:	f104 0014 	add.w	r0, r4, #20
 80085b8:	f105 0914 	add.w	r9, r5, #20
 80085bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80085c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085c4:	3410      	adds	r4, #16
 80085c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80085ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80085ce:	fa1f f18b 	uxth.w	r1, fp
 80085d2:	4461      	add	r1, ip
 80085d4:	fa1f fc83 	uxth.w	ip, r3
 80085d8:	0c1b      	lsrs	r3, r3, #16
 80085da:	eba1 010c 	sub.w	r1, r1, ip
 80085de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80085e6:	b289      	uxth	r1, r1
 80085e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085ec:	454e      	cmp	r6, r9
 80085ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80085f2:	f84a 1b04 	str.w	r1, [sl], #4
 80085f6:	d8e6      	bhi.n	80085c6 <__mdiff+0x7e>
 80085f8:	1b73      	subs	r3, r6, r5
 80085fa:	3b15      	subs	r3, #21
 80085fc:	f023 0303 	bic.w	r3, r3, #3
 8008600:	3515      	adds	r5, #21
 8008602:	3304      	adds	r3, #4
 8008604:	42ae      	cmp	r6, r5
 8008606:	bf38      	it	cc
 8008608:	2304      	movcc	r3, #4
 800860a:	4418      	add	r0, r3
 800860c:	4443      	add	r3, r8
 800860e:	461e      	mov	r6, r3
 8008610:	4605      	mov	r5, r0
 8008612:	4575      	cmp	r5, lr
 8008614:	d30e      	bcc.n	8008634 <__mdiff+0xec>
 8008616:	f10e 0103 	add.w	r1, lr, #3
 800861a:	1a09      	subs	r1, r1, r0
 800861c:	f021 0103 	bic.w	r1, r1, #3
 8008620:	3803      	subs	r0, #3
 8008622:	4586      	cmp	lr, r0
 8008624:	bf38      	it	cc
 8008626:	2100      	movcc	r1, #0
 8008628:	440b      	add	r3, r1
 800862a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800862e:	b189      	cbz	r1, 8008654 <__mdiff+0x10c>
 8008630:	6117      	str	r7, [r2, #16]
 8008632:	e7a3      	b.n	800857c <__mdiff+0x34>
 8008634:	f855 8b04 	ldr.w	r8, [r5], #4
 8008638:	fa1f f188 	uxth.w	r1, r8
 800863c:	4461      	add	r1, ip
 800863e:	140c      	asrs	r4, r1, #16
 8008640:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008644:	b289      	uxth	r1, r1
 8008646:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800864a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800864e:	f846 1b04 	str.w	r1, [r6], #4
 8008652:	e7de      	b.n	8008612 <__mdiff+0xca>
 8008654:	3f01      	subs	r7, #1
 8008656:	e7e8      	b.n	800862a <__mdiff+0xe2>
 8008658:	0800aa37 	.word	0x0800aa37
 800865c:	0800aa48 	.word	0x0800aa48

08008660 <__ulp>:
 8008660:	4b0e      	ldr	r3, [pc, #56]	; (800869c <__ulp+0x3c>)
 8008662:	400b      	ands	r3, r1
 8008664:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008668:	2b00      	cmp	r3, #0
 800866a:	dc08      	bgt.n	800867e <__ulp+0x1e>
 800866c:	425b      	negs	r3, r3
 800866e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008672:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008676:	da04      	bge.n	8008682 <__ulp+0x22>
 8008678:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800867c:	4113      	asrs	r3, r2
 800867e:	2200      	movs	r2, #0
 8008680:	e008      	b.n	8008694 <__ulp+0x34>
 8008682:	f1a2 0314 	sub.w	r3, r2, #20
 8008686:	2b1e      	cmp	r3, #30
 8008688:	bfd6      	itet	le
 800868a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800868e:	2201      	movgt	r2, #1
 8008690:	40da      	lsrle	r2, r3
 8008692:	2300      	movs	r3, #0
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	7ff00000 	.word	0x7ff00000

080086a0 <__b2d>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	6905      	ldr	r5, [r0, #16]
 80086a4:	f100 0714 	add.w	r7, r0, #20
 80086a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80086ac:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80086b0:	1f2e      	subs	r6, r5, #4
 80086b2:	4620      	mov	r0, r4
 80086b4:	f7ff fd5a 	bl	800816c <__hi0bits>
 80086b8:	f1c0 0220 	rsb	r2, r0, #32
 80086bc:	280a      	cmp	r0, #10
 80086be:	4603      	mov	r3, r0
 80086c0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800872c <__b2d+0x8c>
 80086c4:	600a      	str	r2, [r1, #0]
 80086c6:	dc12      	bgt.n	80086ee <__b2d+0x4e>
 80086c8:	f1c0 0e0b 	rsb	lr, r0, #11
 80086cc:	fa24 f20e 	lsr.w	r2, r4, lr
 80086d0:	42b7      	cmp	r7, r6
 80086d2:	ea42 010c 	orr.w	r1, r2, ip
 80086d6:	bf2c      	ite	cs
 80086d8:	2200      	movcs	r2, #0
 80086da:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80086de:	3315      	adds	r3, #21
 80086e0:	fa04 f303 	lsl.w	r3, r4, r3
 80086e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80086e8:	431a      	orrs	r2, r3
 80086ea:	4610      	mov	r0, r2
 80086ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ee:	42b7      	cmp	r7, r6
 80086f0:	bf2e      	itee	cs
 80086f2:	2200      	movcs	r2, #0
 80086f4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80086f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80086fc:	3b0b      	subs	r3, #11
 80086fe:	d012      	beq.n	8008726 <__b2d+0x86>
 8008700:	f1c3 0520 	rsb	r5, r3, #32
 8008704:	fa22 f105 	lsr.w	r1, r2, r5
 8008708:	409c      	lsls	r4, r3
 800870a:	430c      	orrs	r4, r1
 800870c:	42be      	cmp	r6, r7
 800870e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8008712:	bf94      	ite	ls
 8008714:	2400      	movls	r4, #0
 8008716:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800871a:	409a      	lsls	r2, r3
 800871c:	40ec      	lsrs	r4, r5
 800871e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008722:	4322      	orrs	r2, r4
 8008724:	e7e1      	b.n	80086ea <__b2d+0x4a>
 8008726:	ea44 010c 	orr.w	r1, r4, ip
 800872a:	e7de      	b.n	80086ea <__b2d+0x4a>
 800872c:	3ff00000 	.word	0x3ff00000

08008730 <__d2b>:
 8008730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008732:	2101      	movs	r1, #1
 8008734:	4617      	mov	r7, r2
 8008736:	461c      	mov	r4, r3
 8008738:	9e08      	ldr	r6, [sp, #32]
 800873a:	f7ff fc25 	bl	8007f88 <_Balloc>
 800873e:	4605      	mov	r5, r0
 8008740:	b930      	cbnz	r0, 8008750 <__d2b+0x20>
 8008742:	4602      	mov	r2, r0
 8008744:	f240 310f 	movw	r1, #783	; 0x30f
 8008748:	4b22      	ldr	r3, [pc, #136]	; (80087d4 <__d2b+0xa4>)
 800874a:	4823      	ldr	r0, [pc, #140]	; (80087d8 <__d2b+0xa8>)
 800874c:	f001 f996 	bl	8009a7c <__assert_func>
 8008750:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008754:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008758:	bb24      	cbnz	r4, 80087a4 <__d2b+0x74>
 800875a:	2f00      	cmp	r7, #0
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	d026      	beq.n	80087ae <__d2b+0x7e>
 8008760:	4668      	mov	r0, sp
 8008762:	9700      	str	r7, [sp, #0]
 8008764:	f7ff fd22 	bl	80081ac <__lo0bits>
 8008768:	e9dd 1200 	ldrd	r1, r2, [sp]
 800876c:	b1e8      	cbz	r0, 80087aa <__d2b+0x7a>
 800876e:	f1c0 0320 	rsb	r3, r0, #32
 8008772:	fa02 f303 	lsl.w	r3, r2, r3
 8008776:	430b      	orrs	r3, r1
 8008778:	40c2      	lsrs	r2, r0
 800877a:	616b      	str	r3, [r5, #20]
 800877c:	9201      	str	r2, [sp, #4]
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	bf14      	ite	ne
 8008784:	2102      	movne	r1, #2
 8008786:	2101      	moveq	r1, #1
 8008788:	61ab      	str	r3, [r5, #24]
 800878a:	6129      	str	r1, [r5, #16]
 800878c:	b1bc      	cbz	r4, 80087be <__d2b+0x8e>
 800878e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008792:	4404      	add	r4, r0
 8008794:	6034      	str	r4, [r6, #0]
 8008796:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800879a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879c:	6018      	str	r0, [r3, #0]
 800879e:	4628      	mov	r0, r5
 80087a0:	b003      	add	sp, #12
 80087a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087a8:	e7d7      	b.n	800875a <__d2b+0x2a>
 80087aa:	6169      	str	r1, [r5, #20]
 80087ac:	e7e7      	b.n	800877e <__d2b+0x4e>
 80087ae:	a801      	add	r0, sp, #4
 80087b0:	f7ff fcfc 	bl	80081ac <__lo0bits>
 80087b4:	9b01      	ldr	r3, [sp, #4]
 80087b6:	2101      	movs	r1, #1
 80087b8:	616b      	str	r3, [r5, #20]
 80087ba:	3020      	adds	r0, #32
 80087bc:	e7e5      	b.n	800878a <__d2b+0x5a>
 80087be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087c2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80087c6:	6030      	str	r0, [r6, #0]
 80087c8:	6918      	ldr	r0, [r3, #16]
 80087ca:	f7ff fccf 	bl	800816c <__hi0bits>
 80087ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80087d2:	e7e2      	b.n	800879a <__d2b+0x6a>
 80087d4:	0800aa37 	.word	0x0800aa37
 80087d8:	0800aa48 	.word	0x0800aa48

080087dc <__ratio>:
 80087dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	4688      	mov	r8, r1
 80087e2:	4669      	mov	r1, sp
 80087e4:	4681      	mov	r9, r0
 80087e6:	f7ff ff5b 	bl	80086a0 <__b2d>
 80087ea:	460f      	mov	r7, r1
 80087ec:	4604      	mov	r4, r0
 80087ee:	460d      	mov	r5, r1
 80087f0:	4640      	mov	r0, r8
 80087f2:	a901      	add	r1, sp, #4
 80087f4:	f7ff ff54 	bl	80086a0 <__b2d>
 80087f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008800:	468b      	mov	fp, r1
 8008802:	eba3 0c02 	sub.w	ip, r3, r2
 8008806:	e9dd 3200 	ldrd	r3, r2, [sp]
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008810:	2b00      	cmp	r3, #0
 8008812:	bfd5      	itete	le
 8008814:	460a      	movle	r2, r1
 8008816:	462a      	movgt	r2, r5
 8008818:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800881c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008820:	bfd8      	it	le
 8008822:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008826:	465b      	mov	r3, fp
 8008828:	4602      	mov	r2, r0
 800882a:	4639      	mov	r1, r7
 800882c:	4620      	mov	r0, r4
 800882e:	f7f7 ff7d 	bl	800072c <__aeabi_ddiv>
 8008832:	b003      	add	sp, #12
 8008834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008838 <__copybits>:
 8008838:	3901      	subs	r1, #1
 800883a:	b570      	push	{r4, r5, r6, lr}
 800883c:	1149      	asrs	r1, r1, #5
 800883e:	6914      	ldr	r4, [r2, #16]
 8008840:	3101      	adds	r1, #1
 8008842:	f102 0314 	add.w	r3, r2, #20
 8008846:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800884a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800884e:	1f05      	subs	r5, r0, #4
 8008850:	42a3      	cmp	r3, r4
 8008852:	d30c      	bcc.n	800886e <__copybits+0x36>
 8008854:	1aa3      	subs	r3, r4, r2
 8008856:	3b11      	subs	r3, #17
 8008858:	f023 0303 	bic.w	r3, r3, #3
 800885c:	3211      	adds	r2, #17
 800885e:	42a2      	cmp	r2, r4
 8008860:	bf88      	it	hi
 8008862:	2300      	movhi	r3, #0
 8008864:	4418      	add	r0, r3
 8008866:	2300      	movs	r3, #0
 8008868:	4288      	cmp	r0, r1
 800886a:	d305      	bcc.n	8008878 <__copybits+0x40>
 800886c:	bd70      	pop	{r4, r5, r6, pc}
 800886e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008872:	f845 6f04 	str.w	r6, [r5, #4]!
 8008876:	e7eb      	b.n	8008850 <__copybits+0x18>
 8008878:	f840 3b04 	str.w	r3, [r0], #4
 800887c:	e7f4      	b.n	8008868 <__copybits+0x30>

0800887e <__any_on>:
 800887e:	f100 0214 	add.w	r2, r0, #20
 8008882:	6900      	ldr	r0, [r0, #16]
 8008884:	114b      	asrs	r3, r1, #5
 8008886:	4298      	cmp	r0, r3
 8008888:	b510      	push	{r4, lr}
 800888a:	db11      	blt.n	80088b0 <__any_on+0x32>
 800888c:	dd0a      	ble.n	80088a4 <__any_on+0x26>
 800888e:	f011 011f 	ands.w	r1, r1, #31
 8008892:	d007      	beq.n	80088a4 <__any_on+0x26>
 8008894:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008898:	fa24 f001 	lsr.w	r0, r4, r1
 800889c:	fa00 f101 	lsl.w	r1, r0, r1
 80088a0:	428c      	cmp	r4, r1
 80088a2:	d10b      	bne.n	80088bc <__any_on+0x3e>
 80088a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d803      	bhi.n	80088b4 <__any_on+0x36>
 80088ac:	2000      	movs	r0, #0
 80088ae:	bd10      	pop	{r4, pc}
 80088b0:	4603      	mov	r3, r0
 80088b2:	e7f7      	b.n	80088a4 <__any_on+0x26>
 80088b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088b8:	2900      	cmp	r1, #0
 80088ba:	d0f5      	beq.n	80088a8 <__any_on+0x2a>
 80088bc:	2001      	movs	r0, #1
 80088be:	e7f6      	b.n	80088ae <__any_on+0x30>

080088c0 <sulp>:
 80088c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c4:	460f      	mov	r7, r1
 80088c6:	4690      	mov	r8, r2
 80088c8:	f7ff feca 	bl	8008660 <__ulp>
 80088cc:	4604      	mov	r4, r0
 80088ce:	460d      	mov	r5, r1
 80088d0:	f1b8 0f00 	cmp.w	r8, #0
 80088d4:	d011      	beq.n	80088fa <sulp+0x3a>
 80088d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80088da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dd0b      	ble.n	80088fa <sulp+0x3a>
 80088e2:	2400      	movs	r4, #0
 80088e4:	051b      	lsls	r3, r3, #20
 80088e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088ee:	4622      	mov	r2, r4
 80088f0:	462b      	mov	r3, r5
 80088f2:	f7f7 fdf1 	bl	80004d8 <__aeabi_dmul>
 80088f6:	4604      	mov	r4, r0
 80088f8:	460d      	mov	r5, r1
 80088fa:	4620      	mov	r0, r4
 80088fc:	4629      	mov	r1, r5
 80088fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008902:	0000      	movs	r0, r0
 8008904:	0000      	movs	r0, r0
	...

08008908 <_strtod_l>:
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	b09f      	sub	sp, #124	; 0x7c
 800890e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008910:	2200      	movs	r2, #0
 8008912:	4604      	mov	r4, r0
 8008914:	921a      	str	r2, [sp, #104]	; 0x68
 8008916:	460d      	mov	r5, r1
 8008918:	f04f 0800 	mov.w	r8, #0
 800891c:	f04f 0900 	mov.w	r9, #0
 8008920:	460a      	mov	r2, r1
 8008922:	9219      	str	r2, [sp, #100]	; 0x64
 8008924:	7811      	ldrb	r1, [r2, #0]
 8008926:	292b      	cmp	r1, #43	; 0x2b
 8008928:	d04a      	beq.n	80089c0 <_strtod_l+0xb8>
 800892a:	d838      	bhi.n	800899e <_strtod_l+0x96>
 800892c:	290d      	cmp	r1, #13
 800892e:	d832      	bhi.n	8008996 <_strtod_l+0x8e>
 8008930:	2908      	cmp	r1, #8
 8008932:	d832      	bhi.n	800899a <_strtod_l+0x92>
 8008934:	2900      	cmp	r1, #0
 8008936:	d03b      	beq.n	80089b0 <_strtod_l+0xa8>
 8008938:	2200      	movs	r2, #0
 800893a:	920e      	str	r2, [sp, #56]	; 0x38
 800893c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800893e:	7832      	ldrb	r2, [r6, #0]
 8008940:	2a30      	cmp	r2, #48	; 0x30
 8008942:	f040 80b2 	bne.w	8008aaa <_strtod_l+0x1a2>
 8008946:	7872      	ldrb	r2, [r6, #1]
 8008948:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800894c:	2a58      	cmp	r2, #88	; 0x58
 800894e:	d16e      	bne.n	8008a2e <_strtod_l+0x126>
 8008950:	9302      	str	r3, [sp, #8]
 8008952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008954:	4620      	mov	r0, r4
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	ab1a      	add	r3, sp, #104	; 0x68
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	4a8c      	ldr	r2, [pc, #560]	; (8008b90 <_strtod_l+0x288>)
 800895e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008960:	a919      	add	r1, sp, #100	; 0x64
 8008962:	f001 f925 	bl	8009bb0 <__gethex>
 8008966:	f010 070f 	ands.w	r7, r0, #15
 800896a:	4605      	mov	r5, r0
 800896c:	d005      	beq.n	800897a <_strtod_l+0x72>
 800896e:	2f06      	cmp	r7, #6
 8008970:	d128      	bne.n	80089c4 <_strtod_l+0xbc>
 8008972:	2300      	movs	r3, #0
 8008974:	3601      	adds	r6, #1
 8008976:	9619      	str	r6, [sp, #100]	; 0x64
 8008978:	930e      	str	r3, [sp, #56]	; 0x38
 800897a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800897c:	2b00      	cmp	r3, #0
 800897e:	f040 85a0 	bne.w	80094c2 <_strtod_l+0xbba>
 8008982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008984:	b1cb      	cbz	r3, 80089ba <_strtod_l+0xb2>
 8008986:	4642      	mov	r2, r8
 8008988:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800898c:	4610      	mov	r0, r2
 800898e:	4619      	mov	r1, r3
 8008990:	b01f      	add	sp, #124	; 0x7c
 8008992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008996:	2920      	cmp	r1, #32
 8008998:	d1ce      	bne.n	8008938 <_strtod_l+0x30>
 800899a:	3201      	adds	r2, #1
 800899c:	e7c1      	b.n	8008922 <_strtod_l+0x1a>
 800899e:	292d      	cmp	r1, #45	; 0x2d
 80089a0:	d1ca      	bne.n	8008938 <_strtod_l+0x30>
 80089a2:	2101      	movs	r1, #1
 80089a4:	910e      	str	r1, [sp, #56]	; 0x38
 80089a6:	1c51      	adds	r1, r2, #1
 80089a8:	9119      	str	r1, [sp, #100]	; 0x64
 80089aa:	7852      	ldrb	r2, [r2, #1]
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	d1c5      	bne.n	800893c <_strtod_l+0x34>
 80089b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089b2:	9519      	str	r5, [sp, #100]	; 0x64
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f040 8582 	bne.w	80094be <_strtod_l+0xbb6>
 80089ba:	4642      	mov	r2, r8
 80089bc:	464b      	mov	r3, r9
 80089be:	e7e5      	b.n	800898c <_strtod_l+0x84>
 80089c0:	2100      	movs	r1, #0
 80089c2:	e7ef      	b.n	80089a4 <_strtod_l+0x9c>
 80089c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80089c6:	b13a      	cbz	r2, 80089d8 <_strtod_l+0xd0>
 80089c8:	2135      	movs	r1, #53	; 0x35
 80089ca:	a81c      	add	r0, sp, #112	; 0x70
 80089cc:	f7ff ff34 	bl	8008838 <__copybits>
 80089d0:	4620      	mov	r0, r4
 80089d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80089d4:	f7ff fb18 	bl	8008008 <_Bfree>
 80089d8:	3f01      	subs	r7, #1
 80089da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80089dc:	2f04      	cmp	r7, #4
 80089de:	d806      	bhi.n	80089ee <_strtod_l+0xe6>
 80089e0:	e8df f007 	tbb	[pc, r7]
 80089e4:	201d0314 	.word	0x201d0314
 80089e8:	14          	.byte	0x14
 80089e9:	00          	.byte	0x00
 80089ea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80089ee:	05e9      	lsls	r1, r5, #23
 80089f0:	bf48      	it	mi
 80089f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80089f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089fa:	0d1b      	lsrs	r3, r3, #20
 80089fc:	051b      	lsls	r3, r3, #20
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1bb      	bne.n	800897a <_strtod_l+0x72>
 8008a02:	f7fe fb15 	bl	8007030 <__errno>
 8008a06:	2322      	movs	r3, #34	; 0x22
 8008a08:	6003      	str	r3, [r0, #0]
 8008a0a:	e7b6      	b.n	800897a <_strtod_l+0x72>
 8008a0c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a10:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008a14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a1c:	e7e7      	b.n	80089ee <_strtod_l+0xe6>
 8008a1e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008b94 <_strtod_l+0x28c>
 8008a22:	e7e4      	b.n	80089ee <_strtod_l+0xe6>
 8008a24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008a28:	f04f 38ff 	mov.w	r8, #4294967295
 8008a2c:	e7df      	b.n	80089ee <_strtod_l+0xe6>
 8008a2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	9219      	str	r2, [sp, #100]	; 0x64
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	2b30      	cmp	r3, #48	; 0x30
 8008a38:	d0f9      	beq.n	8008a2e <_strtod_l+0x126>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d09d      	beq.n	800897a <_strtod_l+0x72>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f04f 0a00 	mov.w	sl, #0
 8008a44:	220a      	movs	r2, #10
 8008a46:	46d3      	mov	fp, sl
 8008a48:	9305      	str	r3, [sp, #20]
 8008a4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a4c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a52:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008a54:	7806      	ldrb	r6, [r0, #0]
 8008a56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a5a:	b2d9      	uxtb	r1, r3
 8008a5c:	2909      	cmp	r1, #9
 8008a5e:	d926      	bls.n	8008aae <_strtod_l+0x1a6>
 8008a60:	2201      	movs	r2, #1
 8008a62:	494d      	ldr	r1, [pc, #308]	; (8008b98 <_strtod_l+0x290>)
 8008a64:	f7fe fa87 	bl	8006f76 <strncmp>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d030      	beq.n	8008ace <_strtod_l+0x1c6>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	4632      	mov	r2, r6
 8008a70:	4603      	mov	r3, r0
 8008a72:	465e      	mov	r6, fp
 8008a74:	9008      	str	r0, [sp, #32]
 8008a76:	2a65      	cmp	r2, #101	; 0x65
 8008a78:	d001      	beq.n	8008a7e <_strtod_l+0x176>
 8008a7a:	2a45      	cmp	r2, #69	; 0x45
 8008a7c:	d113      	bne.n	8008aa6 <_strtod_l+0x19e>
 8008a7e:	b91e      	cbnz	r6, 8008a88 <_strtod_l+0x180>
 8008a80:	9a05      	ldr	r2, [sp, #20]
 8008a82:	4302      	orrs	r2, r0
 8008a84:	d094      	beq.n	80089b0 <_strtod_l+0xa8>
 8008a86:	2600      	movs	r6, #0
 8008a88:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008a8a:	1c6a      	adds	r2, r5, #1
 8008a8c:	9219      	str	r2, [sp, #100]	; 0x64
 8008a8e:	786a      	ldrb	r2, [r5, #1]
 8008a90:	2a2b      	cmp	r2, #43	; 0x2b
 8008a92:	d074      	beq.n	8008b7e <_strtod_l+0x276>
 8008a94:	2a2d      	cmp	r2, #45	; 0x2d
 8008a96:	d078      	beq.n	8008b8a <_strtod_l+0x282>
 8008a98:	f04f 0c00 	mov.w	ip, #0
 8008a9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008aa0:	2909      	cmp	r1, #9
 8008aa2:	d97f      	bls.n	8008ba4 <_strtod_l+0x29c>
 8008aa4:	9519      	str	r5, [sp, #100]	; 0x64
 8008aa6:	2700      	movs	r7, #0
 8008aa8:	e09e      	b.n	8008be8 <_strtod_l+0x2e0>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e7c8      	b.n	8008a40 <_strtod_l+0x138>
 8008aae:	f1bb 0f08 	cmp.w	fp, #8
 8008ab2:	bfd8      	it	le
 8008ab4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008ab6:	f100 0001 	add.w	r0, r0, #1
 8008aba:	bfd6      	itet	le
 8008abc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ac0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008ac4:	930a      	strle	r3, [sp, #40]	; 0x28
 8008ac6:	f10b 0b01 	add.w	fp, fp, #1
 8008aca:	9019      	str	r0, [sp, #100]	; 0x64
 8008acc:	e7c1      	b.n	8008a52 <_strtod_l+0x14a>
 8008ace:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	9219      	str	r2, [sp, #100]	; 0x64
 8008ad4:	785a      	ldrb	r2, [r3, #1]
 8008ad6:	f1bb 0f00 	cmp.w	fp, #0
 8008ada:	d037      	beq.n	8008b4c <_strtod_l+0x244>
 8008adc:	465e      	mov	r6, fp
 8008ade:	9008      	str	r0, [sp, #32]
 8008ae0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ae4:	2b09      	cmp	r3, #9
 8008ae6:	d912      	bls.n	8008b0e <_strtod_l+0x206>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e7c4      	b.n	8008a76 <_strtod_l+0x16e>
 8008aec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aee:	3001      	adds	r0, #1
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	9219      	str	r2, [sp, #100]	; 0x64
 8008af4:	785a      	ldrb	r2, [r3, #1]
 8008af6:	2a30      	cmp	r2, #48	; 0x30
 8008af8:	d0f8      	beq.n	8008aec <_strtod_l+0x1e4>
 8008afa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008afe:	2b08      	cmp	r3, #8
 8008b00:	f200 84e4 	bhi.w	80094cc <_strtod_l+0xbc4>
 8008b04:	9008      	str	r0, [sp, #32]
 8008b06:	2000      	movs	r0, #0
 8008b08:	4606      	mov	r6, r0
 8008b0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b0e:	3a30      	subs	r2, #48	; 0x30
 8008b10:	f100 0301 	add.w	r3, r0, #1
 8008b14:	d014      	beq.n	8008b40 <_strtod_l+0x238>
 8008b16:	9908      	ldr	r1, [sp, #32]
 8008b18:	eb00 0c06 	add.w	ip, r0, r6
 8008b1c:	4419      	add	r1, r3
 8008b1e:	9108      	str	r1, [sp, #32]
 8008b20:	4633      	mov	r3, r6
 8008b22:	210a      	movs	r1, #10
 8008b24:	4563      	cmp	r3, ip
 8008b26:	d113      	bne.n	8008b50 <_strtod_l+0x248>
 8008b28:	1833      	adds	r3, r6, r0
 8008b2a:	2b08      	cmp	r3, #8
 8008b2c:	f106 0601 	add.w	r6, r6, #1
 8008b30:	4406      	add	r6, r0
 8008b32:	dc1a      	bgt.n	8008b6a <_strtod_l+0x262>
 8008b34:	230a      	movs	r3, #10
 8008b36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b38:	fb03 2301 	mla	r3, r3, r1, r2
 8008b3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b42:	4618      	mov	r0, r3
 8008b44:	1c51      	adds	r1, r2, #1
 8008b46:	9119      	str	r1, [sp, #100]	; 0x64
 8008b48:	7852      	ldrb	r2, [r2, #1]
 8008b4a:	e7c9      	b.n	8008ae0 <_strtod_l+0x1d8>
 8008b4c:	4658      	mov	r0, fp
 8008b4e:	e7d2      	b.n	8008af6 <_strtod_l+0x1ee>
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	f103 0301 	add.w	r3, r3, #1
 8008b56:	dc03      	bgt.n	8008b60 <_strtod_l+0x258>
 8008b58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008b5a:	434f      	muls	r7, r1
 8008b5c:	970a      	str	r7, [sp, #40]	; 0x28
 8008b5e:	e7e1      	b.n	8008b24 <_strtod_l+0x21c>
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	bfd8      	it	le
 8008b64:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008b68:	e7dc      	b.n	8008b24 <_strtod_l+0x21c>
 8008b6a:	2e10      	cmp	r6, #16
 8008b6c:	bfdc      	itt	le
 8008b6e:	230a      	movle	r3, #10
 8008b70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008b74:	e7e3      	b.n	8008b3e <_strtod_l+0x236>
 8008b76:	2300      	movs	r3, #0
 8008b78:	9308      	str	r3, [sp, #32]
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e780      	b.n	8008a80 <_strtod_l+0x178>
 8008b7e:	f04f 0c00 	mov.w	ip, #0
 8008b82:	1caa      	adds	r2, r5, #2
 8008b84:	9219      	str	r2, [sp, #100]	; 0x64
 8008b86:	78aa      	ldrb	r2, [r5, #2]
 8008b88:	e788      	b.n	8008a9c <_strtod_l+0x194>
 8008b8a:	f04f 0c01 	mov.w	ip, #1
 8008b8e:	e7f8      	b.n	8008b82 <_strtod_l+0x27a>
 8008b90:	0800aba8 	.word	0x0800aba8
 8008b94:	7ff00000 	.word	0x7ff00000
 8008b98:	0800aba4 	.word	0x0800aba4
 8008b9c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b9e:	1c51      	adds	r1, r2, #1
 8008ba0:	9119      	str	r1, [sp, #100]	; 0x64
 8008ba2:	7852      	ldrb	r2, [r2, #1]
 8008ba4:	2a30      	cmp	r2, #48	; 0x30
 8008ba6:	d0f9      	beq.n	8008b9c <_strtod_l+0x294>
 8008ba8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008bac:	2908      	cmp	r1, #8
 8008bae:	f63f af7a 	bhi.w	8008aa6 <_strtod_l+0x19e>
 8008bb2:	3a30      	subs	r2, #48	; 0x30
 8008bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bb8:	920c      	str	r2, [sp, #48]	; 0x30
 8008bba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bbc:	1c57      	adds	r7, r2, #1
 8008bbe:	9719      	str	r7, [sp, #100]	; 0x64
 8008bc0:	7852      	ldrb	r2, [r2, #1]
 8008bc2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008bc6:	f1be 0f09 	cmp.w	lr, #9
 8008bca:	d938      	bls.n	8008c3e <_strtod_l+0x336>
 8008bcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bce:	1a7f      	subs	r7, r7, r1
 8008bd0:	2f08      	cmp	r7, #8
 8008bd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008bd6:	dc03      	bgt.n	8008be0 <_strtod_l+0x2d8>
 8008bd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bda:	428f      	cmp	r7, r1
 8008bdc:	bfa8      	it	ge
 8008bde:	460f      	movge	r7, r1
 8008be0:	f1bc 0f00 	cmp.w	ip, #0
 8008be4:	d000      	beq.n	8008be8 <_strtod_l+0x2e0>
 8008be6:	427f      	negs	r7, r7
 8008be8:	2e00      	cmp	r6, #0
 8008bea:	d14f      	bne.n	8008c8c <_strtod_l+0x384>
 8008bec:	9905      	ldr	r1, [sp, #20]
 8008bee:	4301      	orrs	r1, r0
 8008bf0:	f47f aec3 	bne.w	800897a <_strtod_l+0x72>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f47f aedb 	bne.w	80089b0 <_strtod_l+0xa8>
 8008bfa:	2a69      	cmp	r2, #105	; 0x69
 8008bfc:	d029      	beq.n	8008c52 <_strtod_l+0x34a>
 8008bfe:	dc26      	bgt.n	8008c4e <_strtod_l+0x346>
 8008c00:	2a49      	cmp	r2, #73	; 0x49
 8008c02:	d026      	beq.n	8008c52 <_strtod_l+0x34a>
 8008c04:	2a4e      	cmp	r2, #78	; 0x4e
 8008c06:	f47f aed3 	bne.w	80089b0 <_strtod_l+0xa8>
 8008c0a:	499a      	ldr	r1, [pc, #616]	; (8008e74 <_strtod_l+0x56c>)
 8008c0c:	a819      	add	r0, sp, #100	; 0x64
 8008c0e:	f001 fa11 	bl	800a034 <__match>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	f43f aecc 	beq.w	80089b0 <_strtod_l+0xa8>
 8008c18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b28      	cmp	r3, #40	; 0x28
 8008c1e:	d12f      	bne.n	8008c80 <_strtod_l+0x378>
 8008c20:	4995      	ldr	r1, [pc, #596]	; (8008e78 <_strtod_l+0x570>)
 8008c22:	aa1c      	add	r2, sp, #112	; 0x70
 8008c24:	a819      	add	r0, sp, #100	; 0x64
 8008c26:	f001 fa19 	bl	800a05c <__hexnan>
 8008c2a:	2805      	cmp	r0, #5
 8008c2c:	d128      	bne.n	8008c80 <_strtod_l+0x378>
 8008c2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c30:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008c34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c3c:	e69d      	b.n	800897a <_strtod_l+0x72>
 8008c3e:	210a      	movs	r1, #10
 8008c40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c42:	fb01 2107 	mla	r1, r1, r7, r2
 8008c46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c4c:	e7b5      	b.n	8008bba <_strtod_l+0x2b2>
 8008c4e:	2a6e      	cmp	r2, #110	; 0x6e
 8008c50:	e7d9      	b.n	8008c06 <_strtod_l+0x2fe>
 8008c52:	498a      	ldr	r1, [pc, #552]	; (8008e7c <_strtod_l+0x574>)
 8008c54:	a819      	add	r0, sp, #100	; 0x64
 8008c56:	f001 f9ed 	bl	800a034 <__match>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f43f aea8 	beq.w	80089b0 <_strtod_l+0xa8>
 8008c60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c62:	4987      	ldr	r1, [pc, #540]	; (8008e80 <_strtod_l+0x578>)
 8008c64:	3b01      	subs	r3, #1
 8008c66:	a819      	add	r0, sp, #100	; 0x64
 8008c68:	9319      	str	r3, [sp, #100]	; 0x64
 8008c6a:	f001 f9e3 	bl	800a034 <__match>
 8008c6e:	b910      	cbnz	r0, 8008c76 <_strtod_l+0x36e>
 8008c70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c72:	3301      	adds	r3, #1
 8008c74:	9319      	str	r3, [sp, #100]	; 0x64
 8008c76:	f04f 0800 	mov.w	r8, #0
 8008c7a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008e84 <_strtod_l+0x57c>
 8008c7e:	e67c      	b.n	800897a <_strtod_l+0x72>
 8008c80:	4881      	ldr	r0, [pc, #516]	; (8008e88 <_strtod_l+0x580>)
 8008c82:	f000 fef5 	bl	8009a70 <nan>
 8008c86:	4680      	mov	r8, r0
 8008c88:	4689      	mov	r9, r1
 8008c8a:	e676      	b.n	800897a <_strtod_l+0x72>
 8008c8c:	9b08      	ldr	r3, [sp, #32]
 8008c8e:	f1bb 0f00 	cmp.w	fp, #0
 8008c92:	bf08      	it	eq
 8008c94:	46b3      	moveq	fp, r6
 8008c96:	1afb      	subs	r3, r7, r3
 8008c98:	2e10      	cmp	r6, #16
 8008c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c9c:	4635      	mov	r5, r6
 8008c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca0:	bfa8      	it	ge
 8008ca2:	2510      	movge	r5, #16
 8008ca4:	f7f7 fb9e 	bl	80003e4 <__aeabi_ui2d>
 8008ca8:	2e09      	cmp	r6, #9
 8008caa:	4680      	mov	r8, r0
 8008cac:	4689      	mov	r9, r1
 8008cae:	dd13      	ble.n	8008cd8 <_strtod_l+0x3d0>
 8008cb0:	4b76      	ldr	r3, [pc, #472]	; (8008e8c <_strtod_l+0x584>)
 8008cb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008cb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008cba:	f7f7 fc0d 	bl	80004d8 <__aeabi_dmul>
 8008cbe:	4680      	mov	r8, r0
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	4689      	mov	r9, r1
 8008cc4:	f7f7 fb8e 	bl	80003e4 <__aeabi_ui2d>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4640      	mov	r0, r8
 8008cce:	4649      	mov	r1, r9
 8008cd0:	f7f7 fa4c 	bl	800016c <__adddf3>
 8008cd4:	4680      	mov	r8, r0
 8008cd6:	4689      	mov	r9, r1
 8008cd8:	2e0f      	cmp	r6, #15
 8008cda:	dc36      	bgt.n	8008d4a <_strtod_l+0x442>
 8008cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f43f ae4b 	beq.w	800897a <_strtod_l+0x72>
 8008ce4:	dd22      	ble.n	8008d2c <_strtod_l+0x424>
 8008ce6:	2b16      	cmp	r3, #22
 8008ce8:	dc09      	bgt.n	8008cfe <_strtod_l+0x3f6>
 8008cea:	4968      	ldr	r1, [pc, #416]	; (8008e8c <_strtod_l+0x584>)
 8008cec:	4642      	mov	r2, r8
 8008cee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cf8:	f7f7 fbee 	bl	80004d8 <__aeabi_dmul>
 8008cfc:	e7c3      	b.n	8008c86 <_strtod_l+0x37e>
 8008cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d00:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008d04:	4293      	cmp	r3, r2
 8008d06:	db20      	blt.n	8008d4a <_strtod_l+0x442>
 8008d08:	4c60      	ldr	r4, [pc, #384]	; (8008e8c <_strtod_l+0x584>)
 8008d0a:	f1c6 060f 	rsb	r6, r6, #15
 8008d0e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008d12:	4642      	mov	r2, r8
 8008d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d18:	464b      	mov	r3, r9
 8008d1a:	f7f7 fbdd 	bl	80004d8 <__aeabi_dmul>
 8008d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d20:	1b9e      	subs	r6, r3, r6
 8008d22:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008d26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d2a:	e7e5      	b.n	8008cf8 <_strtod_l+0x3f0>
 8008d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2e:	3316      	adds	r3, #22
 8008d30:	db0b      	blt.n	8008d4a <_strtod_l+0x442>
 8008d32:	9b08      	ldr	r3, [sp, #32]
 8008d34:	4640      	mov	r0, r8
 8008d36:	1bdf      	subs	r7, r3, r7
 8008d38:	4b54      	ldr	r3, [pc, #336]	; (8008e8c <_strtod_l+0x584>)
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d44:	f7f7 fcf2 	bl	800072c <__aeabi_ddiv>
 8008d48:	e79d      	b.n	8008c86 <_strtod_l+0x37e>
 8008d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4c:	1b75      	subs	r5, r6, r5
 8008d4e:	441d      	add	r5, r3
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	dd70      	ble.n	8008e36 <_strtod_l+0x52e>
 8008d54:	f015 030f 	ands.w	r3, r5, #15
 8008d58:	d00a      	beq.n	8008d70 <_strtod_l+0x468>
 8008d5a:	494c      	ldr	r1, [pc, #304]	; (8008e8c <_strtod_l+0x584>)
 8008d5c:	4642      	mov	r2, r8
 8008d5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d66:	464b      	mov	r3, r9
 8008d68:	f7f7 fbb6 	bl	80004d8 <__aeabi_dmul>
 8008d6c:	4680      	mov	r8, r0
 8008d6e:	4689      	mov	r9, r1
 8008d70:	f035 050f 	bics.w	r5, r5, #15
 8008d74:	d04d      	beq.n	8008e12 <_strtod_l+0x50a>
 8008d76:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008d7a:	dd22      	ble.n	8008dc2 <_strtod_l+0x4ba>
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	46b3      	mov	fp, r6
 8008d80:	960b      	str	r6, [sp, #44]	; 0x2c
 8008d82:	9608      	str	r6, [sp, #32]
 8008d84:	2322      	movs	r3, #34	; 0x22
 8008d86:	f04f 0800 	mov.w	r8, #0
 8008d8a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008e84 <_strtod_l+0x57c>
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f43f adf1 	beq.w	800897a <_strtod_l+0x72>
 8008d98:	4620      	mov	r0, r4
 8008d9a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d9c:	f7ff f934 	bl	8008008 <_Bfree>
 8008da0:	4620      	mov	r0, r4
 8008da2:	9908      	ldr	r1, [sp, #32]
 8008da4:	f7ff f930 	bl	8008008 <_Bfree>
 8008da8:	4659      	mov	r1, fp
 8008daa:	4620      	mov	r0, r4
 8008dac:	f7ff f92c 	bl	8008008 <_Bfree>
 8008db0:	4620      	mov	r0, r4
 8008db2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008db4:	f7ff f928 	bl	8008008 <_Bfree>
 8008db8:	4631      	mov	r1, r6
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f7ff f924 	bl	8008008 <_Bfree>
 8008dc0:	e5db      	b.n	800897a <_strtod_l+0x72>
 8008dc2:	4b33      	ldr	r3, [pc, #204]	; (8008e90 <_strtod_l+0x588>)
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	9305      	str	r3, [sp, #20]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4649      	mov	r1, r9
 8008dcc:	469a      	mov	sl, r3
 8008dce:	112d      	asrs	r5, r5, #4
 8008dd0:	2d01      	cmp	r5, #1
 8008dd2:	dc21      	bgt.n	8008e18 <_strtod_l+0x510>
 8008dd4:	b10b      	cbz	r3, 8008dda <_strtod_l+0x4d2>
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	4689      	mov	r9, r1
 8008dda:	492d      	ldr	r1, [pc, #180]	; (8008e90 <_strtod_l+0x588>)
 8008ddc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008de0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008de4:	4642      	mov	r2, r8
 8008de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dea:	464b      	mov	r3, r9
 8008dec:	f7f7 fb74 	bl	80004d8 <__aeabi_dmul>
 8008df0:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <_strtod_l+0x57c>)
 8008df2:	460a      	mov	r2, r1
 8008df4:	400b      	ands	r3, r1
 8008df6:	4927      	ldr	r1, [pc, #156]	; (8008e94 <_strtod_l+0x58c>)
 8008df8:	4680      	mov	r8, r0
 8008dfa:	428b      	cmp	r3, r1
 8008dfc:	d8be      	bhi.n	8008d7c <_strtod_l+0x474>
 8008dfe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e02:	428b      	cmp	r3, r1
 8008e04:	bf86      	itte	hi
 8008e06:	f04f 38ff 	movhi.w	r8, #4294967295
 8008e0a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008e98 <_strtod_l+0x590>
 8008e0e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008e12:	2300      	movs	r3, #0
 8008e14:	9305      	str	r3, [sp, #20]
 8008e16:	e07b      	b.n	8008f10 <_strtod_l+0x608>
 8008e18:	07ea      	lsls	r2, r5, #31
 8008e1a:	d505      	bpl.n	8008e28 <_strtod_l+0x520>
 8008e1c:	9b05      	ldr	r3, [sp, #20]
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f7f7 fb59 	bl	80004d8 <__aeabi_dmul>
 8008e26:	2301      	movs	r3, #1
 8008e28:	9a05      	ldr	r2, [sp, #20]
 8008e2a:	f10a 0a01 	add.w	sl, sl, #1
 8008e2e:	3208      	adds	r2, #8
 8008e30:	106d      	asrs	r5, r5, #1
 8008e32:	9205      	str	r2, [sp, #20]
 8008e34:	e7cc      	b.n	8008dd0 <_strtod_l+0x4c8>
 8008e36:	d0ec      	beq.n	8008e12 <_strtod_l+0x50a>
 8008e38:	426d      	negs	r5, r5
 8008e3a:	f015 020f 	ands.w	r2, r5, #15
 8008e3e:	d00a      	beq.n	8008e56 <_strtod_l+0x54e>
 8008e40:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <_strtod_l+0x584>)
 8008e42:	4640      	mov	r0, r8
 8008e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e48:	4649      	mov	r1, r9
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	f7f7 fc6d 	bl	800072c <__aeabi_ddiv>
 8008e52:	4680      	mov	r8, r0
 8008e54:	4689      	mov	r9, r1
 8008e56:	112d      	asrs	r5, r5, #4
 8008e58:	d0db      	beq.n	8008e12 <_strtod_l+0x50a>
 8008e5a:	2d1f      	cmp	r5, #31
 8008e5c:	dd1e      	ble.n	8008e9c <_strtod_l+0x594>
 8008e5e:	2600      	movs	r6, #0
 8008e60:	46b3      	mov	fp, r6
 8008e62:	960b      	str	r6, [sp, #44]	; 0x2c
 8008e64:	9608      	str	r6, [sp, #32]
 8008e66:	2322      	movs	r3, #34	; 0x22
 8008e68:	f04f 0800 	mov.w	r8, #0
 8008e6c:	f04f 0900 	mov.w	r9, #0
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	e78d      	b.n	8008d90 <_strtod_l+0x488>
 8008e74:	0800a98f 	.word	0x0800a98f
 8008e78:	0800abbc 	.word	0x0800abbc
 8008e7c:	0800a987 	.word	0x0800a987
 8008e80:	0800a9be 	.word	0x0800a9be
 8008e84:	7ff00000 	.word	0x7ff00000
 8008e88:	0800ad4d 	.word	0x0800ad4d
 8008e8c:	0800aad0 	.word	0x0800aad0
 8008e90:	0800aaa8 	.word	0x0800aaa8
 8008e94:	7ca00000 	.word	0x7ca00000
 8008e98:	7fefffff 	.word	0x7fefffff
 8008e9c:	f015 0310 	ands.w	r3, r5, #16
 8008ea0:	bf18      	it	ne
 8008ea2:	236a      	movne	r3, #106	; 0x6a
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	9305      	str	r3, [sp, #20]
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009178 <_strtod_l+0x870>
 8008eb0:	07ea      	lsls	r2, r5, #31
 8008eb2:	d504      	bpl.n	8008ebe <_strtod_l+0x5b6>
 8008eb4:	e9da 2300 	ldrd	r2, r3, [sl]
 8008eb8:	f7f7 fb0e 	bl	80004d8 <__aeabi_dmul>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	106d      	asrs	r5, r5, #1
 8008ec0:	f10a 0a08 	add.w	sl, sl, #8
 8008ec4:	d1f4      	bne.n	8008eb0 <_strtod_l+0x5a8>
 8008ec6:	b10b      	cbz	r3, 8008ecc <_strtod_l+0x5c4>
 8008ec8:	4680      	mov	r8, r0
 8008eca:	4689      	mov	r9, r1
 8008ecc:	9b05      	ldr	r3, [sp, #20]
 8008ece:	b1bb      	cbz	r3, 8008f00 <_strtod_l+0x5f8>
 8008ed0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008ed4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	4649      	mov	r1, r9
 8008edc:	dd10      	ble.n	8008f00 <_strtod_l+0x5f8>
 8008ede:	2b1f      	cmp	r3, #31
 8008ee0:	f340 8128 	ble.w	8009134 <_strtod_l+0x82c>
 8008ee4:	2b34      	cmp	r3, #52	; 0x34
 8008ee6:	bfd8      	it	le
 8008ee8:	f04f 33ff 	movle.w	r3, #4294967295
 8008eec:	f04f 0800 	mov.w	r8, #0
 8008ef0:	bfcf      	iteee	gt
 8008ef2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ef6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008efa:	4093      	lslle	r3, r2
 8008efc:	ea03 0901 	andle.w	r9, r3, r1
 8008f00:	2200      	movs	r2, #0
 8008f02:	2300      	movs	r3, #0
 8008f04:	4640      	mov	r0, r8
 8008f06:	4649      	mov	r1, r9
 8008f08:	f7f7 fd4e 	bl	80009a8 <__aeabi_dcmpeq>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d1a6      	bne.n	8008e5e <_strtod_l+0x556>
 8008f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f12:	465a      	mov	r2, fp
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	4620      	mov	r0, r4
 8008f18:	4633      	mov	r3, r6
 8008f1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f1c:	f7ff f8dc 	bl	80080d8 <__s2b>
 8008f20:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f43f af2a 	beq.w	8008d7c <_strtod_l+0x474>
 8008f28:	2600      	movs	r6, #0
 8008f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f2c:	9b08      	ldr	r3, [sp, #32]
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	eba3 0307 	sub.w	r3, r3, r7
 8008f34:	bfa8      	it	ge
 8008f36:	2300      	movge	r3, #0
 8008f38:	46b3      	mov	fp, r6
 8008f3a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f40:	9316      	str	r3, [sp, #88]	; 0x58
 8008f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f44:	4620      	mov	r0, r4
 8008f46:	6859      	ldr	r1, [r3, #4]
 8008f48:	f7ff f81e 	bl	8007f88 <_Balloc>
 8008f4c:	9008      	str	r0, [sp, #32]
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f43f af18 	beq.w	8008d84 <_strtod_l+0x47c>
 8008f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f56:	300c      	adds	r0, #12
 8008f58:	691a      	ldr	r2, [r3, #16]
 8008f5a:	f103 010c 	add.w	r1, r3, #12
 8008f5e:	3202      	adds	r2, #2
 8008f60:	0092      	lsls	r2, r2, #2
 8008f62:	f000 fd77 	bl	8009a54 <memcpy>
 8008f66:	ab1c      	add	r3, sp, #112	; 0x70
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	ab1b      	add	r3, sp, #108	; 0x6c
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	4642      	mov	r2, r8
 8008f70:	464b      	mov	r3, r9
 8008f72:	4620      	mov	r0, r4
 8008f74:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008f78:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008f7c:	f7ff fbd8 	bl	8008730 <__d2b>
 8008f80:	901a      	str	r0, [sp, #104]	; 0x68
 8008f82:	2800      	cmp	r0, #0
 8008f84:	f43f aefe 	beq.w	8008d84 <_strtod_l+0x47c>
 8008f88:	2101      	movs	r1, #1
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f7ff f93c 	bl	8008208 <__i2b>
 8008f90:	4683      	mov	fp, r0
 8008f92:	2800      	cmp	r0, #0
 8008f94:	f43f aef6 	beq.w	8008d84 <_strtod_l+0x47c>
 8008f98:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008f9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008f9c:	2f00      	cmp	r7, #0
 8008f9e:	bfab      	itete	ge
 8008fa0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008fa2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008fa4:	eb07 0a03 	addge.w	sl, r7, r3
 8008fa8:	1bdd      	sublt	r5, r3, r7
 8008faa:	9b05      	ldr	r3, [sp, #20]
 8008fac:	bfa8      	it	ge
 8008fae:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008fb0:	eba7 0703 	sub.w	r7, r7, r3
 8008fb4:	4417      	add	r7, r2
 8008fb6:	4b71      	ldr	r3, [pc, #452]	; (800917c <_strtod_l+0x874>)
 8008fb8:	f107 37ff 	add.w	r7, r7, #4294967295
 8008fbc:	bfb8      	it	lt
 8008fbe:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008fc2:	429f      	cmp	r7, r3
 8008fc4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008fc8:	f280 80c7 	bge.w	800915a <_strtod_l+0x852>
 8008fcc:	1bdb      	subs	r3, r3, r7
 8008fce:	2b1f      	cmp	r3, #31
 8008fd0:	f04f 0101 	mov.w	r1, #1
 8008fd4:	eba2 0203 	sub.w	r2, r2, r3
 8008fd8:	f300 80b3 	bgt.w	8009142 <_strtod_l+0x83a>
 8008fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9310      	str	r3, [sp, #64]	; 0x40
 8008fe6:	eb0a 0702 	add.w	r7, sl, r2
 8008fea:	9b05      	ldr	r3, [sp, #20]
 8008fec:	45ba      	cmp	sl, r7
 8008fee:	4415      	add	r5, r2
 8008ff0:	441d      	add	r5, r3
 8008ff2:	4653      	mov	r3, sl
 8008ff4:	bfa8      	it	ge
 8008ff6:	463b      	movge	r3, r7
 8008ff8:	42ab      	cmp	r3, r5
 8008ffa:	bfa8      	it	ge
 8008ffc:	462b      	movge	r3, r5
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfc2      	ittt	gt
 8009002:	1aff      	subgt	r7, r7, r3
 8009004:	1aed      	subgt	r5, r5, r3
 8009006:	ebaa 0a03 	subgt.w	sl, sl, r3
 800900a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800900c:	2b00      	cmp	r3, #0
 800900e:	dd17      	ble.n	8009040 <_strtod_l+0x738>
 8009010:	4659      	mov	r1, fp
 8009012:	461a      	mov	r2, r3
 8009014:	4620      	mov	r0, r4
 8009016:	f7ff f9b5 	bl	8008384 <__pow5mult>
 800901a:	4683      	mov	fp, r0
 800901c:	2800      	cmp	r0, #0
 800901e:	f43f aeb1 	beq.w	8008d84 <_strtod_l+0x47c>
 8009022:	4601      	mov	r1, r0
 8009024:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009026:	4620      	mov	r0, r4
 8009028:	f7ff f904 	bl	8008234 <__multiply>
 800902c:	900a      	str	r0, [sp, #40]	; 0x28
 800902e:	2800      	cmp	r0, #0
 8009030:	f43f aea8 	beq.w	8008d84 <_strtod_l+0x47c>
 8009034:	4620      	mov	r0, r4
 8009036:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009038:	f7fe ffe6 	bl	8008008 <_Bfree>
 800903c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903e:	931a      	str	r3, [sp, #104]	; 0x68
 8009040:	2f00      	cmp	r7, #0
 8009042:	f300 808f 	bgt.w	8009164 <_strtod_l+0x85c>
 8009046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009048:	2b00      	cmp	r3, #0
 800904a:	dd08      	ble.n	800905e <_strtod_l+0x756>
 800904c:	4620      	mov	r0, r4
 800904e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009050:	9908      	ldr	r1, [sp, #32]
 8009052:	f7ff f997 	bl	8008384 <__pow5mult>
 8009056:	9008      	str	r0, [sp, #32]
 8009058:	2800      	cmp	r0, #0
 800905a:	f43f ae93 	beq.w	8008d84 <_strtod_l+0x47c>
 800905e:	2d00      	cmp	r5, #0
 8009060:	dd08      	ble.n	8009074 <_strtod_l+0x76c>
 8009062:	462a      	mov	r2, r5
 8009064:	4620      	mov	r0, r4
 8009066:	9908      	ldr	r1, [sp, #32]
 8009068:	f7ff f9e6 	bl	8008438 <__lshift>
 800906c:	9008      	str	r0, [sp, #32]
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f ae88 	beq.w	8008d84 <_strtod_l+0x47c>
 8009074:	f1ba 0f00 	cmp.w	sl, #0
 8009078:	dd08      	ble.n	800908c <_strtod_l+0x784>
 800907a:	4659      	mov	r1, fp
 800907c:	4652      	mov	r2, sl
 800907e:	4620      	mov	r0, r4
 8009080:	f7ff f9da 	bl	8008438 <__lshift>
 8009084:	4683      	mov	fp, r0
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f ae7c 	beq.w	8008d84 <_strtod_l+0x47c>
 800908c:	4620      	mov	r0, r4
 800908e:	9a08      	ldr	r2, [sp, #32]
 8009090:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009092:	f7ff fa59 	bl	8008548 <__mdiff>
 8009096:	4606      	mov	r6, r0
 8009098:	2800      	cmp	r0, #0
 800909a:	f43f ae73 	beq.w	8008d84 <_strtod_l+0x47c>
 800909e:	2500      	movs	r5, #0
 80090a0:	68c3      	ldr	r3, [r0, #12]
 80090a2:	4659      	mov	r1, fp
 80090a4:	60c5      	str	r5, [r0, #12]
 80090a6:	930a      	str	r3, [sp, #40]	; 0x28
 80090a8:	f7ff fa32 	bl	8008510 <__mcmp>
 80090ac:	42a8      	cmp	r0, r5
 80090ae:	da6b      	bge.n	8009188 <_strtod_l+0x880>
 80090b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b2:	ea53 0308 	orrs.w	r3, r3, r8
 80090b6:	f040 808f 	bne.w	80091d8 <_strtod_l+0x8d0>
 80090ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f040 808a 	bne.w	80091d8 <_strtod_l+0x8d0>
 80090c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090c8:	0d1b      	lsrs	r3, r3, #20
 80090ca:	051b      	lsls	r3, r3, #20
 80090cc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090d0:	f240 8082 	bls.w	80091d8 <_strtod_l+0x8d0>
 80090d4:	6973      	ldr	r3, [r6, #20]
 80090d6:	b913      	cbnz	r3, 80090de <_strtod_l+0x7d6>
 80090d8:	6933      	ldr	r3, [r6, #16]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	dd7c      	ble.n	80091d8 <_strtod_l+0x8d0>
 80090de:	4631      	mov	r1, r6
 80090e0:	2201      	movs	r2, #1
 80090e2:	4620      	mov	r0, r4
 80090e4:	f7ff f9a8 	bl	8008438 <__lshift>
 80090e8:	4659      	mov	r1, fp
 80090ea:	4606      	mov	r6, r0
 80090ec:	f7ff fa10 	bl	8008510 <__mcmp>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	dd71      	ble.n	80091d8 <_strtod_l+0x8d0>
 80090f4:	9905      	ldr	r1, [sp, #20]
 80090f6:	464b      	mov	r3, r9
 80090f8:	4a21      	ldr	r2, [pc, #132]	; (8009180 <_strtod_l+0x878>)
 80090fa:	2900      	cmp	r1, #0
 80090fc:	f000 808d 	beq.w	800921a <_strtod_l+0x912>
 8009100:	ea02 0109 	and.w	r1, r2, r9
 8009104:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009108:	f300 8087 	bgt.w	800921a <_strtod_l+0x912>
 800910c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009110:	f77f aea9 	ble.w	8008e66 <_strtod_l+0x55e>
 8009114:	4640      	mov	r0, r8
 8009116:	4649      	mov	r1, r9
 8009118:	4b1a      	ldr	r3, [pc, #104]	; (8009184 <_strtod_l+0x87c>)
 800911a:	2200      	movs	r2, #0
 800911c:	f7f7 f9dc 	bl	80004d8 <__aeabi_dmul>
 8009120:	4b17      	ldr	r3, [pc, #92]	; (8009180 <_strtod_l+0x878>)
 8009122:	4680      	mov	r8, r0
 8009124:	400b      	ands	r3, r1
 8009126:	4689      	mov	r9, r1
 8009128:	2b00      	cmp	r3, #0
 800912a:	f47f ae35 	bne.w	8008d98 <_strtod_l+0x490>
 800912e:	2322      	movs	r3, #34	; 0x22
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	e631      	b.n	8008d98 <_strtod_l+0x490>
 8009134:	f04f 32ff 	mov.w	r2, #4294967295
 8009138:	fa02 f303 	lsl.w	r3, r2, r3
 800913c:	ea03 0808 	and.w	r8, r3, r8
 8009140:	e6de      	b.n	8008f00 <_strtod_l+0x5f8>
 8009142:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8009146:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800914a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800914e:	37e2      	adds	r7, #226	; 0xe2
 8009150:	fa01 f307 	lsl.w	r3, r1, r7
 8009154:	9310      	str	r3, [sp, #64]	; 0x40
 8009156:	9113      	str	r1, [sp, #76]	; 0x4c
 8009158:	e745      	b.n	8008fe6 <_strtod_l+0x6de>
 800915a:	2300      	movs	r3, #0
 800915c:	9310      	str	r3, [sp, #64]	; 0x40
 800915e:	2301      	movs	r3, #1
 8009160:	9313      	str	r3, [sp, #76]	; 0x4c
 8009162:	e740      	b.n	8008fe6 <_strtod_l+0x6de>
 8009164:	463a      	mov	r2, r7
 8009166:	4620      	mov	r0, r4
 8009168:	991a      	ldr	r1, [sp, #104]	; 0x68
 800916a:	f7ff f965 	bl	8008438 <__lshift>
 800916e:	901a      	str	r0, [sp, #104]	; 0x68
 8009170:	2800      	cmp	r0, #0
 8009172:	f47f af68 	bne.w	8009046 <_strtod_l+0x73e>
 8009176:	e605      	b.n	8008d84 <_strtod_l+0x47c>
 8009178:	0800abd0 	.word	0x0800abd0
 800917c:	fffffc02 	.word	0xfffffc02
 8009180:	7ff00000 	.word	0x7ff00000
 8009184:	39500000 	.word	0x39500000
 8009188:	46ca      	mov	sl, r9
 800918a:	d165      	bne.n	8009258 <_strtod_l+0x950>
 800918c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800918e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009192:	b352      	cbz	r2, 80091ea <_strtod_l+0x8e2>
 8009194:	4a9e      	ldr	r2, [pc, #632]	; (8009410 <_strtod_l+0xb08>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d12a      	bne.n	80091f0 <_strtod_l+0x8e8>
 800919a:	9b05      	ldr	r3, [sp, #20]
 800919c:	4641      	mov	r1, r8
 800919e:	b1fb      	cbz	r3, 80091e0 <_strtod_l+0x8d8>
 80091a0:	4b9c      	ldr	r3, [pc, #624]	; (8009414 <_strtod_l+0xb0c>)
 80091a2:	f04f 32ff 	mov.w	r2, #4294967295
 80091a6:	ea09 0303 	and.w	r3, r9, r3
 80091aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80091ae:	d81a      	bhi.n	80091e6 <_strtod_l+0x8de>
 80091b0:	0d1b      	lsrs	r3, r3, #20
 80091b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091b6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ba:	4299      	cmp	r1, r3
 80091bc:	d118      	bne.n	80091f0 <_strtod_l+0x8e8>
 80091be:	4b96      	ldr	r3, [pc, #600]	; (8009418 <_strtod_l+0xb10>)
 80091c0:	459a      	cmp	sl, r3
 80091c2:	d102      	bne.n	80091ca <_strtod_l+0x8c2>
 80091c4:	3101      	adds	r1, #1
 80091c6:	f43f addd 	beq.w	8008d84 <_strtod_l+0x47c>
 80091ca:	f04f 0800 	mov.w	r8, #0
 80091ce:	4b91      	ldr	r3, [pc, #580]	; (8009414 <_strtod_l+0xb0c>)
 80091d0:	ea0a 0303 	and.w	r3, sl, r3
 80091d4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d19a      	bne.n	8009114 <_strtod_l+0x80c>
 80091de:	e5db      	b.n	8008d98 <_strtod_l+0x490>
 80091e0:	f04f 33ff 	mov.w	r3, #4294967295
 80091e4:	e7e9      	b.n	80091ba <_strtod_l+0x8b2>
 80091e6:	4613      	mov	r3, r2
 80091e8:	e7e7      	b.n	80091ba <_strtod_l+0x8b2>
 80091ea:	ea53 0308 	orrs.w	r3, r3, r8
 80091ee:	d081      	beq.n	80090f4 <_strtod_l+0x7ec>
 80091f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091f2:	b1e3      	cbz	r3, 800922e <_strtod_l+0x926>
 80091f4:	ea13 0f0a 	tst.w	r3, sl
 80091f8:	d0ee      	beq.n	80091d8 <_strtod_l+0x8d0>
 80091fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091fc:	4640      	mov	r0, r8
 80091fe:	4649      	mov	r1, r9
 8009200:	9a05      	ldr	r2, [sp, #20]
 8009202:	b1c3      	cbz	r3, 8009236 <_strtod_l+0x92e>
 8009204:	f7ff fb5c 	bl	80088c0 <sulp>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800920e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009210:	f7f6 ffac 	bl	800016c <__adddf3>
 8009214:	4680      	mov	r8, r0
 8009216:	4689      	mov	r9, r1
 8009218:	e7de      	b.n	80091d8 <_strtod_l+0x8d0>
 800921a:	4013      	ands	r3, r2
 800921c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009220:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009224:	f04f 38ff 	mov.w	r8, #4294967295
 8009228:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800922c:	e7d4      	b.n	80091d8 <_strtod_l+0x8d0>
 800922e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009230:	ea13 0f08 	tst.w	r3, r8
 8009234:	e7e0      	b.n	80091f8 <_strtod_l+0x8f0>
 8009236:	f7ff fb43 	bl	80088c0 <sulp>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009240:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009242:	f7f6 ff91 	bl	8000168 <__aeabi_dsub>
 8009246:	2200      	movs	r2, #0
 8009248:	2300      	movs	r3, #0
 800924a:	4680      	mov	r8, r0
 800924c:	4689      	mov	r9, r1
 800924e:	f7f7 fbab 	bl	80009a8 <__aeabi_dcmpeq>
 8009252:	2800      	cmp	r0, #0
 8009254:	d0c0      	beq.n	80091d8 <_strtod_l+0x8d0>
 8009256:	e606      	b.n	8008e66 <_strtod_l+0x55e>
 8009258:	4659      	mov	r1, fp
 800925a:	4630      	mov	r0, r6
 800925c:	f7ff fabe 	bl	80087dc <__ratio>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009268:	2200      	movs	r2, #0
 800926a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800926e:	f7f7 fbaf 	bl	80009d0 <__aeabi_dcmple>
 8009272:	2800      	cmp	r0, #0
 8009274:	d06f      	beq.n	8009356 <_strtod_l+0xa4e>
 8009276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009278:	2b00      	cmp	r3, #0
 800927a:	d17c      	bne.n	8009376 <_strtod_l+0xa6e>
 800927c:	f1b8 0f00 	cmp.w	r8, #0
 8009280:	d159      	bne.n	8009336 <_strtod_l+0xa2e>
 8009282:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009286:	2b00      	cmp	r3, #0
 8009288:	d17b      	bne.n	8009382 <_strtod_l+0xa7a>
 800928a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800928e:	2200      	movs	r2, #0
 8009290:	4b62      	ldr	r3, [pc, #392]	; (800941c <_strtod_l+0xb14>)
 8009292:	f7f7 fb93 	bl	80009bc <__aeabi_dcmplt>
 8009296:	2800      	cmp	r0, #0
 8009298:	d15a      	bne.n	8009350 <_strtod_l+0xa48>
 800929a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800929e:	2200      	movs	r2, #0
 80092a0:	4b5f      	ldr	r3, [pc, #380]	; (8009420 <_strtod_l+0xb18>)
 80092a2:	f7f7 f919 	bl	80004d8 <__aeabi_dmul>
 80092a6:	4605      	mov	r5, r0
 80092a8:	460f      	mov	r7, r1
 80092aa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80092ae:	9506      	str	r5, [sp, #24]
 80092b0:	9307      	str	r3, [sp, #28]
 80092b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092b6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80092ba:	4b56      	ldr	r3, [pc, #344]	; (8009414 <_strtod_l+0xb0c>)
 80092bc:	4a55      	ldr	r2, [pc, #340]	; (8009414 <_strtod_l+0xb0c>)
 80092be:	ea0a 0303 	and.w	r3, sl, r3
 80092c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80092c4:	4b57      	ldr	r3, [pc, #348]	; (8009424 <_strtod_l+0xb1c>)
 80092c6:	ea0a 0202 	and.w	r2, sl, r2
 80092ca:	429a      	cmp	r2, r3
 80092cc:	f040 80b0 	bne.w	8009430 <_strtod_l+0xb28>
 80092d0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80092d4:	4640      	mov	r0, r8
 80092d6:	4649      	mov	r1, r9
 80092d8:	f7ff f9c2 	bl	8008660 <__ulp>
 80092dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092e0:	f7f7 f8fa 	bl	80004d8 <__aeabi_dmul>
 80092e4:	4642      	mov	r2, r8
 80092e6:	464b      	mov	r3, r9
 80092e8:	f7f6 ff40 	bl	800016c <__adddf3>
 80092ec:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009414 <_strtod_l+0xb0c>
 80092f0:	4a4d      	ldr	r2, [pc, #308]	; (8009428 <_strtod_l+0xb20>)
 80092f2:	ea01 0a0a 	and.w	sl, r1, sl
 80092f6:	4592      	cmp	sl, r2
 80092f8:	4680      	mov	r8, r0
 80092fa:	d948      	bls.n	800938e <_strtod_l+0xa86>
 80092fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092fe:	4b46      	ldr	r3, [pc, #280]	; (8009418 <_strtod_l+0xb10>)
 8009300:	429a      	cmp	r2, r3
 8009302:	d103      	bne.n	800930c <_strtod_l+0xa04>
 8009304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009306:	3301      	adds	r3, #1
 8009308:	f43f ad3c 	beq.w	8008d84 <_strtod_l+0x47c>
 800930c:	f04f 38ff 	mov.w	r8, #4294967295
 8009310:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009418 <_strtod_l+0xb10>
 8009314:	4620      	mov	r0, r4
 8009316:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009318:	f7fe fe76 	bl	8008008 <_Bfree>
 800931c:	4620      	mov	r0, r4
 800931e:	9908      	ldr	r1, [sp, #32]
 8009320:	f7fe fe72 	bl	8008008 <_Bfree>
 8009324:	4659      	mov	r1, fp
 8009326:	4620      	mov	r0, r4
 8009328:	f7fe fe6e 	bl	8008008 <_Bfree>
 800932c:	4631      	mov	r1, r6
 800932e:	4620      	mov	r0, r4
 8009330:	f7fe fe6a 	bl	8008008 <_Bfree>
 8009334:	e605      	b.n	8008f42 <_strtod_l+0x63a>
 8009336:	f1b8 0f01 	cmp.w	r8, #1
 800933a:	d103      	bne.n	8009344 <_strtod_l+0xa3c>
 800933c:	f1b9 0f00 	cmp.w	r9, #0
 8009340:	f43f ad91 	beq.w	8008e66 <_strtod_l+0x55e>
 8009344:	2200      	movs	r2, #0
 8009346:	4b39      	ldr	r3, [pc, #228]	; (800942c <_strtod_l+0xb24>)
 8009348:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800934a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800934e:	e016      	b.n	800937e <_strtod_l+0xa76>
 8009350:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009352:	4f33      	ldr	r7, [pc, #204]	; (8009420 <_strtod_l+0xb18>)
 8009354:	e7a9      	b.n	80092aa <_strtod_l+0x9a2>
 8009356:	4b32      	ldr	r3, [pc, #200]	; (8009420 <_strtod_l+0xb18>)
 8009358:	2200      	movs	r2, #0
 800935a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800935e:	f7f7 f8bb 	bl	80004d8 <__aeabi_dmul>
 8009362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009364:	4605      	mov	r5, r0
 8009366:	460f      	mov	r7, r1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d09e      	beq.n	80092aa <_strtod_l+0x9a2>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009374:	e79d      	b.n	80092b2 <_strtod_l+0x9aa>
 8009376:	2200      	movs	r2, #0
 8009378:	4b28      	ldr	r3, [pc, #160]	; (800941c <_strtod_l+0xb14>)
 800937a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800937e:	4f27      	ldr	r7, [pc, #156]	; (800941c <_strtod_l+0xb14>)
 8009380:	e797      	b.n	80092b2 <_strtod_l+0x9aa>
 8009382:	2200      	movs	r2, #0
 8009384:	4b29      	ldr	r3, [pc, #164]	; (800942c <_strtod_l+0xb24>)
 8009386:	4645      	mov	r5, r8
 8009388:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800938c:	e7f7      	b.n	800937e <_strtod_l+0xa76>
 800938e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009392:	9b05      	ldr	r3, [sp, #20]
 8009394:	46ca      	mov	sl, r9
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1bc      	bne.n	8009314 <_strtod_l+0xa0c>
 800939a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800939e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093a0:	0d1b      	lsrs	r3, r3, #20
 80093a2:	051b      	lsls	r3, r3, #20
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d1b5      	bne.n	8009314 <_strtod_l+0xa0c>
 80093a8:	4628      	mov	r0, r5
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fcea 	bl	8000d84 <__aeabi_d2lz>
 80093b0:	f7f7 f864 	bl	800047c <__aeabi_l2d>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4628      	mov	r0, r5
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f6 fed4 	bl	8000168 <__aeabi_dsub>
 80093c0:	460b      	mov	r3, r1
 80093c2:	4602      	mov	r2, r0
 80093c4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80093c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80093cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ce:	ea4a 0a08 	orr.w	sl, sl, r8
 80093d2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80093d6:	d06c      	beq.n	80094b2 <_strtod_l+0xbaa>
 80093d8:	a309      	add	r3, pc, #36	; (adr r3, 8009400 <_strtod_l+0xaf8>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f7f7 faed 	bl	80009bc <__aeabi_dcmplt>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f47f acd8 	bne.w	8008d98 <_strtod_l+0x490>
 80093e8:	a307      	add	r3, pc, #28	; (adr r3, 8009408 <_strtod_l+0xb00>)
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093f2:	f7f7 fb01 	bl	80009f8 <__aeabi_dcmpgt>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d08c      	beq.n	8009314 <_strtod_l+0xa0c>
 80093fa:	e4cd      	b.n	8008d98 <_strtod_l+0x490>
 80093fc:	f3af 8000 	nop.w
 8009400:	94a03595 	.word	0x94a03595
 8009404:	3fdfffff 	.word	0x3fdfffff
 8009408:	35afe535 	.word	0x35afe535
 800940c:	3fe00000 	.word	0x3fe00000
 8009410:	000fffff 	.word	0x000fffff
 8009414:	7ff00000 	.word	0x7ff00000
 8009418:	7fefffff 	.word	0x7fefffff
 800941c:	3ff00000 	.word	0x3ff00000
 8009420:	3fe00000 	.word	0x3fe00000
 8009424:	7fe00000 	.word	0x7fe00000
 8009428:	7c9fffff 	.word	0x7c9fffff
 800942c:	bff00000 	.word	0xbff00000
 8009430:	9b05      	ldr	r3, [sp, #20]
 8009432:	b333      	cbz	r3, 8009482 <_strtod_l+0xb7a>
 8009434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009436:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800943a:	d822      	bhi.n	8009482 <_strtod_l+0xb7a>
 800943c:	a328      	add	r3, pc, #160	; (adr r3, 80094e0 <_strtod_l+0xbd8>)
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	4628      	mov	r0, r5
 8009444:	4639      	mov	r1, r7
 8009446:	f7f7 fac3 	bl	80009d0 <__aeabi_dcmple>
 800944a:	b1a0      	cbz	r0, 8009476 <_strtod_l+0xb6e>
 800944c:	4639      	mov	r1, r7
 800944e:	4628      	mov	r0, r5
 8009450:	f7f7 fb1a 	bl	8000a88 <__aeabi_d2uiz>
 8009454:	2801      	cmp	r0, #1
 8009456:	bf38      	it	cc
 8009458:	2001      	movcc	r0, #1
 800945a:	f7f6 ffc3 	bl	80003e4 <__aeabi_ui2d>
 800945e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009460:	4605      	mov	r5, r0
 8009462:	460f      	mov	r7, r1
 8009464:	bb03      	cbnz	r3, 80094a8 <_strtod_l+0xba0>
 8009466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800946a:	9014      	str	r0, [sp, #80]	; 0x50
 800946c:	9315      	str	r3, [sp, #84]	; 0x54
 800946e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009472:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009478:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800947a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	9311      	str	r3, [sp, #68]	; 0x44
 8009482:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009484:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009486:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800948a:	f7ff f8e9 	bl	8008660 <__ulp>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4640      	mov	r0, r8
 8009494:	4649      	mov	r1, r9
 8009496:	f7f7 f81f 	bl	80004d8 <__aeabi_dmul>
 800949a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800949c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800949e:	f7f6 fe65 	bl	800016c <__adddf3>
 80094a2:	4680      	mov	r8, r0
 80094a4:	4689      	mov	r9, r1
 80094a6:	e774      	b.n	8009392 <_strtod_l+0xa8a>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80094b0:	e7dd      	b.n	800946e <_strtod_l+0xb66>
 80094b2:	a30d      	add	r3, pc, #52	; (adr r3, 80094e8 <_strtod_l+0xbe0>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f7f7 fa80 	bl	80009bc <__aeabi_dcmplt>
 80094bc:	e79b      	b.n	80093f6 <_strtod_l+0xaee>
 80094be:	2300      	movs	r3, #0
 80094c0:	930e      	str	r3, [sp, #56]	; 0x38
 80094c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	f7ff ba5b 	b.w	8008982 <_strtod_l+0x7a>
 80094cc:	2a65      	cmp	r2, #101	; 0x65
 80094ce:	f43f ab52 	beq.w	8008b76 <_strtod_l+0x26e>
 80094d2:	2a45      	cmp	r2, #69	; 0x45
 80094d4:	f43f ab4f 	beq.w	8008b76 <_strtod_l+0x26e>
 80094d8:	2301      	movs	r3, #1
 80094da:	f7ff bb87 	b.w	8008bec <_strtod_l+0x2e4>
 80094de:	bf00      	nop
 80094e0:	ffc00000 	.word	0xffc00000
 80094e4:	41dfffff 	.word	0x41dfffff
 80094e8:	94a03595 	.word	0x94a03595
 80094ec:	3fcfffff 	.word	0x3fcfffff

080094f0 <_strtod_r>:
 80094f0:	4b01      	ldr	r3, [pc, #4]	; (80094f8 <_strtod_r+0x8>)
 80094f2:	f7ff ba09 	b.w	8008908 <_strtod_l>
 80094f6:	bf00      	nop
 80094f8:	20000068 	.word	0x20000068

080094fc <_strtol_l.constprop.0>:
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009502:	4686      	mov	lr, r0
 8009504:	4690      	mov	r8, r2
 8009506:	d001      	beq.n	800950c <_strtol_l.constprop.0+0x10>
 8009508:	2b24      	cmp	r3, #36	; 0x24
 800950a:	d906      	bls.n	800951a <_strtol_l.constprop.0+0x1e>
 800950c:	f7fd fd90 	bl	8007030 <__errno>
 8009510:	2316      	movs	r3, #22
 8009512:	6003      	str	r3, [r0, #0]
 8009514:	2000      	movs	r0, #0
 8009516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800951a:	460d      	mov	r5, r1
 800951c:	4835      	ldr	r0, [pc, #212]	; (80095f4 <_strtol_l.constprop.0+0xf8>)
 800951e:	462a      	mov	r2, r5
 8009520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009524:	5d06      	ldrb	r6, [r0, r4]
 8009526:	f016 0608 	ands.w	r6, r6, #8
 800952a:	d1f8      	bne.n	800951e <_strtol_l.constprop.0+0x22>
 800952c:	2c2d      	cmp	r4, #45	; 0x2d
 800952e:	d12e      	bne.n	800958e <_strtol_l.constprop.0+0x92>
 8009530:	2601      	movs	r6, #1
 8009532:	782c      	ldrb	r4, [r5, #0]
 8009534:	1c95      	adds	r5, r2, #2
 8009536:	2b00      	cmp	r3, #0
 8009538:	d057      	beq.n	80095ea <_strtol_l.constprop.0+0xee>
 800953a:	2b10      	cmp	r3, #16
 800953c:	d109      	bne.n	8009552 <_strtol_l.constprop.0+0x56>
 800953e:	2c30      	cmp	r4, #48	; 0x30
 8009540:	d107      	bne.n	8009552 <_strtol_l.constprop.0+0x56>
 8009542:	782a      	ldrb	r2, [r5, #0]
 8009544:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009548:	2a58      	cmp	r2, #88	; 0x58
 800954a:	d149      	bne.n	80095e0 <_strtol_l.constprop.0+0xe4>
 800954c:	2310      	movs	r3, #16
 800954e:	786c      	ldrb	r4, [r5, #1]
 8009550:	3502      	adds	r5, #2
 8009552:	2200      	movs	r2, #0
 8009554:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009558:	f10c 3cff 	add.w	ip, ip, #4294967295
 800955c:	fbbc f9f3 	udiv	r9, ip, r3
 8009560:	4610      	mov	r0, r2
 8009562:	fb03 ca19 	mls	sl, r3, r9, ip
 8009566:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800956a:	2f09      	cmp	r7, #9
 800956c:	d814      	bhi.n	8009598 <_strtol_l.constprop.0+0x9c>
 800956e:	463c      	mov	r4, r7
 8009570:	42a3      	cmp	r3, r4
 8009572:	dd20      	ble.n	80095b6 <_strtol_l.constprop.0+0xba>
 8009574:	1c57      	adds	r7, r2, #1
 8009576:	d007      	beq.n	8009588 <_strtol_l.constprop.0+0x8c>
 8009578:	4581      	cmp	r9, r0
 800957a:	d319      	bcc.n	80095b0 <_strtol_l.constprop.0+0xb4>
 800957c:	d101      	bne.n	8009582 <_strtol_l.constprop.0+0x86>
 800957e:	45a2      	cmp	sl, r4
 8009580:	db16      	blt.n	80095b0 <_strtol_l.constprop.0+0xb4>
 8009582:	2201      	movs	r2, #1
 8009584:	fb00 4003 	mla	r0, r0, r3, r4
 8009588:	f815 4b01 	ldrb.w	r4, [r5], #1
 800958c:	e7eb      	b.n	8009566 <_strtol_l.constprop.0+0x6a>
 800958e:	2c2b      	cmp	r4, #43	; 0x2b
 8009590:	bf04      	itt	eq
 8009592:	782c      	ldrbeq	r4, [r5, #0]
 8009594:	1c95      	addeq	r5, r2, #2
 8009596:	e7ce      	b.n	8009536 <_strtol_l.constprop.0+0x3a>
 8009598:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800959c:	2f19      	cmp	r7, #25
 800959e:	d801      	bhi.n	80095a4 <_strtol_l.constprop.0+0xa8>
 80095a0:	3c37      	subs	r4, #55	; 0x37
 80095a2:	e7e5      	b.n	8009570 <_strtol_l.constprop.0+0x74>
 80095a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80095a8:	2f19      	cmp	r7, #25
 80095aa:	d804      	bhi.n	80095b6 <_strtol_l.constprop.0+0xba>
 80095ac:	3c57      	subs	r4, #87	; 0x57
 80095ae:	e7df      	b.n	8009570 <_strtol_l.constprop.0+0x74>
 80095b0:	f04f 32ff 	mov.w	r2, #4294967295
 80095b4:	e7e8      	b.n	8009588 <_strtol_l.constprop.0+0x8c>
 80095b6:	1c53      	adds	r3, r2, #1
 80095b8:	d108      	bne.n	80095cc <_strtol_l.constprop.0+0xd0>
 80095ba:	2322      	movs	r3, #34	; 0x22
 80095bc:	4660      	mov	r0, ip
 80095be:	f8ce 3000 	str.w	r3, [lr]
 80095c2:	f1b8 0f00 	cmp.w	r8, #0
 80095c6:	d0a6      	beq.n	8009516 <_strtol_l.constprop.0+0x1a>
 80095c8:	1e69      	subs	r1, r5, #1
 80095ca:	e006      	b.n	80095da <_strtol_l.constprop.0+0xde>
 80095cc:	b106      	cbz	r6, 80095d0 <_strtol_l.constprop.0+0xd4>
 80095ce:	4240      	negs	r0, r0
 80095d0:	f1b8 0f00 	cmp.w	r8, #0
 80095d4:	d09f      	beq.n	8009516 <_strtol_l.constprop.0+0x1a>
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	d1f6      	bne.n	80095c8 <_strtol_l.constprop.0+0xcc>
 80095da:	f8c8 1000 	str.w	r1, [r8]
 80095de:	e79a      	b.n	8009516 <_strtol_l.constprop.0+0x1a>
 80095e0:	2430      	movs	r4, #48	; 0x30
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1b5      	bne.n	8009552 <_strtol_l.constprop.0+0x56>
 80095e6:	2308      	movs	r3, #8
 80095e8:	e7b3      	b.n	8009552 <_strtol_l.constprop.0+0x56>
 80095ea:	2c30      	cmp	r4, #48	; 0x30
 80095ec:	d0a9      	beq.n	8009542 <_strtol_l.constprop.0+0x46>
 80095ee:	230a      	movs	r3, #10
 80095f0:	e7af      	b.n	8009552 <_strtol_l.constprop.0+0x56>
 80095f2:	bf00      	nop
 80095f4:	0800abf9 	.word	0x0800abf9

080095f8 <_strtol_r>:
 80095f8:	f7ff bf80 	b.w	80094fc <_strtol_l.constprop.0>

080095fc <__ssputs_r>:
 80095fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009600:	461f      	mov	r7, r3
 8009602:	688e      	ldr	r6, [r1, #8]
 8009604:	4682      	mov	sl, r0
 8009606:	42be      	cmp	r6, r7
 8009608:	460c      	mov	r4, r1
 800960a:	4690      	mov	r8, r2
 800960c:	680b      	ldr	r3, [r1, #0]
 800960e:	d82c      	bhi.n	800966a <__ssputs_r+0x6e>
 8009610:	898a      	ldrh	r2, [r1, #12]
 8009612:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009616:	d026      	beq.n	8009666 <__ssputs_r+0x6a>
 8009618:	6965      	ldr	r5, [r4, #20]
 800961a:	6909      	ldr	r1, [r1, #16]
 800961c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009620:	eba3 0901 	sub.w	r9, r3, r1
 8009624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009628:	1c7b      	adds	r3, r7, #1
 800962a:	444b      	add	r3, r9
 800962c:	106d      	asrs	r5, r5, #1
 800962e:	429d      	cmp	r5, r3
 8009630:	bf38      	it	cc
 8009632:	461d      	movcc	r5, r3
 8009634:	0553      	lsls	r3, r2, #21
 8009636:	d527      	bpl.n	8009688 <__ssputs_r+0x8c>
 8009638:	4629      	mov	r1, r5
 800963a:	f7fe fc19 	bl	8007e70 <_malloc_r>
 800963e:	4606      	mov	r6, r0
 8009640:	b360      	cbz	r0, 800969c <__ssputs_r+0xa0>
 8009642:	464a      	mov	r2, r9
 8009644:	6921      	ldr	r1, [r4, #16]
 8009646:	f000 fa05 	bl	8009a54 <memcpy>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	6126      	str	r6, [r4, #16]
 8009658:	444e      	add	r6, r9
 800965a:	6026      	str	r6, [r4, #0]
 800965c:	463e      	mov	r6, r7
 800965e:	6165      	str	r5, [r4, #20]
 8009660:	eba5 0509 	sub.w	r5, r5, r9
 8009664:	60a5      	str	r5, [r4, #8]
 8009666:	42be      	cmp	r6, r7
 8009668:	d900      	bls.n	800966c <__ssputs_r+0x70>
 800966a:	463e      	mov	r6, r7
 800966c:	4632      	mov	r2, r6
 800966e:	4641      	mov	r1, r8
 8009670:	6820      	ldr	r0, [r4, #0]
 8009672:	f000 f9c5 	bl	8009a00 <memmove>
 8009676:	2000      	movs	r0, #0
 8009678:	68a3      	ldr	r3, [r4, #8]
 800967a:	1b9b      	subs	r3, r3, r6
 800967c:	60a3      	str	r3, [r4, #8]
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	4433      	add	r3, r6
 8009682:	6023      	str	r3, [r4, #0]
 8009684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009688:	462a      	mov	r2, r5
 800968a:	f000 fd94 	bl	800a1b6 <_realloc_r>
 800968e:	4606      	mov	r6, r0
 8009690:	2800      	cmp	r0, #0
 8009692:	d1e0      	bne.n	8009656 <__ssputs_r+0x5a>
 8009694:	4650      	mov	r0, sl
 8009696:	6921      	ldr	r1, [r4, #16]
 8009698:	f7fe fb7a 	bl	8007d90 <_free_r>
 800969c:	230c      	movs	r3, #12
 800969e:	f8ca 3000 	str.w	r3, [sl]
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	e7e9      	b.n	8009684 <__ssputs_r+0x88>

080096b0 <_svfiprintf_r>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	4698      	mov	r8, r3
 80096b6:	898b      	ldrh	r3, [r1, #12]
 80096b8:	4607      	mov	r7, r0
 80096ba:	061b      	lsls	r3, r3, #24
 80096bc:	460d      	mov	r5, r1
 80096be:	4614      	mov	r4, r2
 80096c0:	b09d      	sub	sp, #116	; 0x74
 80096c2:	d50e      	bpl.n	80096e2 <_svfiprintf_r+0x32>
 80096c4:	690b      	ldr	r3, [r1, #16]
 80096c6:	b963      	cbnz	r3, 80096e2 <_svfiprintf_r+0x32>
 80096c8:	2140      	movs	r1, #64	; 0x40
 80096ca:	f7fe fbd1 	bl	8007e70 <_malloc_r>
 80096ce:	6028      	str	r0, [r5, #0]
 80096d0:	6128      	str	r0, [r5, #16]
 80096d2:	b920      	cbnz	r0, 80096de <_svfiprintf_r+0x2e>
 80096d4:	230c      	movs	r3, #12
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	e0d0      	b.n	8009880 <_svfiprintf_r+0x1d0>
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	616b      	str	r3, [r5, #20]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9309      	str	r3, [sp, #36]	; 0x24
 80096e6:	2320      	movs	r3, #32
 80096e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096ec:	2330      	movs	r3, #48	; 0x30
 80096ee:	f04f 0901 	mov.w	r9, #1
 80096f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009898 <_svfiprintf_r+0x1e8>
 80096fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096fe:	4623      	mov	r3, r4
 8009700:	469a      	mov	sl, r3
 8009702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009706:	b10a      	cbz	r2, 800970c <_svfiprintf_r+0x5c>
 8009708:	2a25      	cmp	r2, #37	; 0x25
 800970a:	d1f9      	bne.n	8009700 <_svfiprintf_r+0x50>
 800970c:	ebba 0b04 	subs.w	fp, sl, r4
 8009710:	d00b      	beq.n	800972a <_svfiprintf_r+0x7a>
 8009712:	465b      	mov	r3, fp
 8009714:	4622      	mov	r2, r4
 8009716:	4629      	mov	r1, r5
 8009718:	4638      	mov	r0, r7
 800971a:	f7ff ff6f 	bl	80095fc <__ssputs_r>
 800971e:	3001      	adds	r0, #1
 8009720:	f000 80a9 	beq.w	8009876 <_svfiprintf_r+0x1c6>
 8009724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009726:	445a      	add	r2, fp
 8009728:	9209      	str	r2, [sp, #36]	; 0x24
 800972a:	f89a 3000 	ldrb.w	r3, [sl]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 80a1 	beq.w	8009876 <_svfiprintf_r+0x1c6>
 8009734:	2300      	movs	r3, #0
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800973e:	f10a 0a01 	add.w	sl, sl, #1
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800974a:	931a      	str	r3, [sp, #104]	; 0x68
 800974c:	4654      	mov	r4, sl
 800974e:	2205      	movs	r2, #5
 8009750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009754:	4850      	ldr	r0, [pc, #320]	; (8009898 <_svfiprintf_r+0x1e8>)
 8009756:	f7fd fc98 	bl	800708a <memchr>
 800975a:	9a04      	ldr	r2, [sp, #16]
 800975c:	b9d8      	cbnz	r0, 8009796 <_svfiprintf_r+0xe6>
 800975e:	06d0      	lsls	r0, r2, #27
 8009760:	bf44      	itt	mi
 8009762:	2320      	movmi	r3, #32
 8009764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009768:	0711      	lsls	r1, r2, #28
 800976a:	bf44      	itt	mi
 800976c:	232b      	movmi	r3, #43	; 0x2b
 800976e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b2a      	cmp	r3, #42	; 0x2a
 8009778:	d015      	beq.n	80097a6 <_svfiprintf_r+0xf6>
 800977a:	4654      	mov	r4, sl
 800977c:	2000      	movs	r0, #0
 800977e:	f04f 0c0a 	mov.w	ip, #10
 8009782:	9a07      	ldr	r2, [sp, #28]
 8009784:	4621      	mov	r1, r4
 8009786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800978a:	3b30      	subs	r3, #48	; 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d94d      	bls.n	800982c <_svfiprintf_r+0x17c>
 8009790:	b1b0      	cbz	r0, 80097c0 <_svfiprintf_r+0x110>
 8009792:	9207      	str	r2, [sp, #28]
 8009794:	e014      	b.n	80097c0 <_svfiprintf_r+0x110>
 8009796:	eba0 0308 	sub.w	r3, r0, r8
 800979a:	fa09 f303 	lsl.w	r3, r9, r3
 800979e:	4313      	orrs	r3, r2
 80097a0:	46a2      	mov	sl, r4
 80097a2:	9304      	str	r3, [sp, #16]
 80097a4:	e7d2      	b.n	800974c <_svfiprintf_r+0x9c>
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	1d19      	adds	r1, r3, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	9103      	str	r1, [sp, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfbb      	ittet	lt
 80097b2:	425b      	neglt	r3, r3
 80097b4:	f042 0202 	orrlt.w	r2, r2, #2
 80097b8:	9307      	strge	r3, [sp, #28]
 80097ba:	9307      	strlt	r3, [sp, #28]
 80097bc:	bfb8      	it	lt
 80097be:	9204      	strlt	r2, [sp, #16]
 80097c0:	7823      	ldrb	r3, [r4, #0]
 80097c2:	2b2e      	cmp	r3, #46	; 0x2e
 80097c4:	d10c      	bne.n	80097e0 <_svfiprintf_r+0x130>
 80097c6:	7863      	ldrb	r3, [r4, #1]
 80097c8:	2b2a      	cmp	r3, #42	; 0x2a
 80097ca:	d134      	bne.n	8009836 <_svfiprintf_r+0x186>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	3402      	adds	r4, #2
 80097d0:	1d1a      	adds	r2, r3, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	9203      	str	r2, [sp, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bfb8      	it	lt
 80097da:	f04f 33ff 	movlt.w	r3, #4294967295
 80097de:	9305      	str	r3, [sp, #20]
 80097e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800989c <_svfiprintf_r+0x1ec>
 80097e4:	2203      	movs	r2, #3
 80097e6:	4650      	mov	r0, sl
 80097e8:	7821      	ldrb	r1, [r4, #0]
 80097ea:	f7fd fc4e 	bl	800708a <memchr>
 80097ee:	b138      	cbz	r0, 8009800 <_svfiprintf_r+0x150>
 80097f0:	2240      	movs	r2, #64	; 0x40
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	eba0 000a 	sub.w	r0, r0, sl
 80097f8:	4082      	lsls	r2, r0
 80097fa:	4313      	orrs	r3, r2
 80097fc:	3401      	adds	r4, #1
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009804:	2206      	movs	r2, #6
 8009806:	4826      	ldr	r0, [pc, #152]	; (80098a0 <_svfiprintf_r+0x1f0>)
 8009808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800980c:	f7fd fc3d 	bl	800708a <memchr>
 8009810:	2800      	cmp	r0, #0
 8009812:	d038      	beq.n	8009886 <_svfiprintf_r+0x1d6>
 8009814:	4b23      	ldr	r3, [pc, #140]	; (80098a4 <_svfiprintf_r+0x1f4>)
 8009816:	bb1b      	cbnz	r3, 8009860 <_svfiprintf_r+0x1b0>
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	3307      	adds	r3, #7
 800981c:	f023 0307 	bic.w	r3, r3, #7
 8009820:	3308      	adds	r3, #8
 8009822:	9303      	str	r3, [sp, #12]
 8009824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009826:	4433      	add	r3, r6
 8009828:	9309      	str	r3, [sp, #36]	; 0x24
 800982a:	e768      	b.n	80096fe <_svfiprintf_r+0x4e>
 800982c:	460c      	mov	r4, r1
 800982e:	2001      	movs	r0, #1
 8009830:	fb0c 3202 	mla	r2, ip, r2, r3
 8009834:	e7a6      	b.n	8009784 <_svfiprintf_r+0xd4>
 8009836:	2300      	movs	r3, #0
 8009838:	f04f 0c0a 	mov.w	ip, #10
 800983c:	4619      	mov	r1, r3
 800983e:	3401      	adds	r4, #1
 8009840:	9305      	str	r3, [sp, #20]
 8009842:	4620      	mov	r0, r4
 8009844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009848:	3a30      	subs	r2, #48	; 0x30
 800984a:	2a09      	cmp	r2, #9
 800984c:	d903      	bls.n	8009856 <_svfiprintf_r+0x1a6>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d0c6      	beq.n	80097e0 <_svfiprintf_r+0x130>
 8009852:	9105      	str	r1, [sp, #20]
 8009854:	e7c4      	b.n	80097e0 <_svfiprintf_r+0x130>
 8009856:	4604      	mov	r4, r0
 8009858:	2301      	movs	r3, #1
 800985a:	fb0c 2101 	mla	r1, ip, r1, r2
 800985e:	e7f0      	b.n	8009842 <_svfiprintf_r+0x192>
 8009860:	ab03      	add	r3, sp, #12
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	462a      	mov	r2, r5
 8009866:	4638      	mov	r0, r7
 8009868:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <_svfiprintf_r+0x1f8>)
 800986a:	a904      	add	r1, sp, #16
 800986c:	f7fc fc52 	bl	8006114 <_printf_float>
 8009870:	1c42      	adds	r2, r0, #1
 8009872:	4606      	mov	r6, r0
 8009874:	d1d6      	bne.n	8009824 <_svfiprintf_r+0x174>
 8009876:	89ab      	ldrh	r3, [r5, #12]
 8009878:	065b      	lsls	r3, r3, #25
 800987a:	f53f af2d 	bmi.w	80096d8 <_svfiprintf_r+0x28>
 800987e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009880:	b01d      	add	sp, #116	; 0x74
 8009882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009886:	ab03      	add	r3, sp, #12
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	462a      	mov	r2, r5
 800988c:	4638      	mov	r0, r7
 800988e:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <_svfiprintf_r+0x1f8>)
 8009890:	a904      	add	r1, sp, #16
 8009892:	f7fc fedf 	bl	8006654 <_printf_i>
 8009896:	e7eb      	b.n	8009870 <_svfiprintf_r+0x1c0>
 8009898:	0800acf9 	.word	0x0800acf9
 800989c:	0800acff 	.word	0x0800acff
 80098a0:	0800ad03 	.word	0x0800ad03
 80098a4:	08006115 	.word	0x08006115
 80098a8:	080095fd 	.word	0x080095fd

080098ac <__sflush_r>:
 80098ac:	898a      	ldrh	r2, [r1, #12]
 80098ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b0:	4605      	mov	r5, r0
 80098b2:	0710      	lsls	r0, r2, #28
 80098b4:	460c      	mov	r4, r1
 80098b6:	d457      	bmi.n	8009968 <__sflush_r+0xbc>
 80098b8:	684b      	ldr	r3, [r1, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dc04      	bgt.n	80098c8 <__sflush_r+0x1c>
 80098be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	dc01      	bgt.n	80098c8 <__sflush_r+0x1c>
 80098c4:	2000      	movs	r0, #0
 80098c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	d0fa      	beq.n	80098c4 <__sflush_r+0x18>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098d4:	682f      	ldr	r7, [r5, #0]
 80098d6:	6a21      	ldr	r1, [r4, #32]
 80098d8:	602b      	str	r3, [r5, #0]
 80098da:	d032      	beq.n	8009942 <__sflush_r+0x96>
 80098dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	075a      	lsls	r2, r3, #29
 80098e2:	d505      	bpl.n	80098f0 <__sflush_r+0x44>
 80098e4:	6863      	ldr	r3, [r4, #4]
 80098e6:	1ac0      	subs	r0, r0, r3
 80098e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098ea:	b10b      	cbz	r3, 80098f0 <__sflush_r+0x44>
 80098ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ee:	1ac0      	subs	r0, r0, r3
 80098f0:	2300      	movs	r3, #0
 80098f2:	4602      	mov	r2, r0
 80098f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098f6:	4628      	mov	r0, r5
 80098f8:	6a21      	ldr	r1, [r4, #32]
 80098fa:	47b0      	blx	r6
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	d106      	bne.n	8009910 <__sflush_r+0x64>
 8009902:	6829      	ldr	r1, [r5, #0]
 8009904:	291d      	cmp	r1, #29
 8009906:	d82b      	bhi.n	8009960 <__sflush_r+0xb4>
 8009908:	4a28      	ldr	r2, [pc, #160]	; (80099ac <__sflush_r+0x100>)
 800990a:	410a      	asrs	r2, r1
 800990c:	07d6      	lsls	r6, r2, #31
 800990e:	d427      	bmi.n	8009960 <__sflush_r+0xb4>
 8009910:	2200      	movs	r2, #0
 8009912:	6062      	str	r2, [r4, #4]
 8009914:	6922      	ldr	r2, [r4, #16]
 8009916:	04d9      	lsls	r1, r3, #19
 8009918:	6022      	str	r2, [r4, #0]
 800991a:	d504      	bpl.n	8009926 <__sflush_r+0x7a>
 800991c:	1c42      	adds	r2, r0, #1
 800991e:	d101      	bne.n	8009924 <__sflush_r+0x78>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b903      	cbnz	r3, 8009926 <__sflush_r+0x7a>
 8009924:	6560      	str	r0, [r4, #84]	; 0x54
 8009926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009928:	602f      	str	r7, [r5, #0]
 800992a:	2900      	cmp	r1, #0
 800992c:	d0ca      	beq.n	80098c4 <__sflush_r+0x18>
 800992e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009932:	4299      	cmp	r1, r3
 8009934:	d002      	beq.n	800993c <__sflush_r+0x90>
 8009936:	4628      	mov	r0, r5
 8009938:	f7fe fa2a 	bl	8007d90 <_free_r>
 800993c:	2000      	movs	r0, #0
 800993e:	6360      	str	r0, [r4, #52]	; 0x34
 8009940:	e7c1      	b.n	80098c6 <__sflush_r+0x1a>
 8009942:	2301      	movs	r3, #1
 8009944:	4628      	mov	r0, r5
 8009946:	47b0      	blx	r6
 8009948:	1c41      	adds	r1, r0, #1
 800994a:	d1c8      	bne.n	80098de <__sflush_r+0x32>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0c5      	beq.n	80098de <__sflush_r+0x32>
 8009952:	2b1d      	cmp	r3, #29
 8009954:	d001      	beq.n	800995a <__sflush_r+0xae>
 8009956:	2b16      	cmp	r3, #22
 8009958:	d101      	bne.n	800995e <__sflush_r+0xb2>
 800995a:	602f      	str	r7, [r5, #0]
 800995c:	e7b2      	b.n	80098c4 <__sflush_r+0x18>
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009964:	81a3      	strh	r3, [r4, #12]
 8009966:	e7ae      	b.n	80098c6 <__sflush_r+0x1a>
 8009968:	690f      	ldr	r7, [r1, #16]
 800996a:	2f00      	cmp	r7, #0
 800996c:	d0aa      	beq.n	80098c4 <__sflush_r+0x18>
 800996e:	0793      	lsls	r3, r2, #30
 8009970:	bf18      	it	ne
 8009972:	2300      	movne	r3, #0
 8009974:	680e      	ldr	r6, [r1, #0]
 8009976:	bf08      	it	eq
 8009978:	694b      	ldreq	r3, [r1, #20]
 800997a:	1bf6      	subs	r6, r6, r7
 800997c:	600f      	str	r7, [r1, #0]
 800997e:	608b      	str	r3, [r1, #8]
 8009980:	2e00      	cmp	r6, #0
 8009982:	dd9f      	ble.n	80098c4 <__sflush_r+0x18>
 8009984:	4633      	mov	r3, r6
 8009986:	463a      	mov	r2, r7
 8009988:	4628      	mov	r0, r5
 800998a:	6a21      	ldr	r1, [r4, #32]
 800998c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009990:	47e0      	blx	ip
 8009992:	2800      	cmp	r0, #0
 8009994:	dc06      	bgt.n	80099a4 <__sflush_r+0xf8>
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	f04f 30ff 	mov.w	r0, #4294967295
 800999c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	e790      	b.n	80098c6 <__sflush_r+0x1a>
 80099a4:	4407      	add	r7, r0
 80099a6:	1a36      	subs	r6, r6, r0
 80099a8:	e7ea      	b.n	8009980 <__sflush_r+0xd4>
 80099aa:	bf00      	nop
 80099ac:	dfbffffe 	.word	0xdfbffffe

080099b0 <_fflush_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	690b      	ldr	r3, [r1, #16]
 80099b4:	4605      	mov	r5, r0
 80099b6:	460c      	mov	r4, r1
 80099b8:	b913      	cbnz	r3, 80099c0 <_fflush_r+0x10>
 80099ba:	2500      	movs	r5, #0
 80099bc:	4628      	mov	r0, r5
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	b118      	cbz	r0, 80099ca <_fflush_r+0x1a>
 80099c2:	6a03      	ldr	r3, [r0, #32]
 80099c4:	b90b      	cbnz	r3, 80099ca <_fflush_r+0x1a>
 80099c6:	f7fd fa01 	bl	8006dcc <__sinit>
 80099ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0f3      	beq.n	80099ba <_fflush_r+0xa>
 80099d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099d4:	07d0      	lsls	r0, r2, #31
 80099d6:	d404      	bmi.n	80099e2 <_fflush_r+0x32>
 80099d8:	0599      	lsls	r1, r3, #22
 80099da:	d402      	bmi.n	80099e2 <_fflush_r+0x32>
 80099dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099de:	f7fd fb52 	bl	8007086 <__retarget_lock_acquire_recursive>
 80099e2:	4628      	mov	r0, r5
 80099e4:	4621      	mov	r1, r4
 80099e6:	f7ff ff61 	bl	80098ac <__sflush_r>
 80099ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ec:	4605      	mov	r5, r0
 80099ee:	07da      	lsls	r2, r3, #31
 80099f0:	d4e4      	bmi.n	80099bc <_fflush_r+0xc>
 80099f2:	89a3      	ldrh	r3, [r4, #12]
 80099f4:	059b      	lsls	r3, r3, #22
 80099f6:	d4e1      	bmi.n	80099bc <_fflush_r+0xc>
 80099f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099fa:	f7fd fb45 	bl	8007088 <__retarget_lock_release_recursive>
 80099fe:	e7dd      	b.n	80099bc <_fflush_r+0xc>

08009a00 <memmove>:
 8009a00:	4288      	cmp	r0, r1
 8009a02:	b510      	push	{r4, lr}
 8009a04:	eb01 0402 	add.w	r4, r1, r2
 8009a08:	d902      	bls.n	8009a10 <memmove+0x10>
 8009a0a:	4284      	cmp	r4, r0
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	d807      	bhi.n	8009a20 <memmove+0x20>
 8009a10:	1e43      	subs	r3, r0, #1
 8009a12:	42a1      	cmp	r1, r4
 8009a14:	d008      	beq.n	8009a28 <memmove+0x28>
 8009a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a1e:	e7f8      	b.n	8009a12 <memmove+0x12>
 8009a20:	4601      	mov	r1, r0
 8009a22:	4402      	add	r2, r0
 8009a24:	428a      	cmp	r2, r1
 8009a26:	d100      	bne.n	8009a2a <memmove+0x2a>
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a32:	e7f7      	b.n	8009a24 <memmove+0x24>

08009a34 <_sbrk_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	2300      	movs	r3, #0
 8009a38:	4d05      	ldr	r5, [pc, #20]	; (8009a50 <_sbrk_r+0x1c>)
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	602b      	str	r3, [r5, #0]
 8009a40:	f7f8 f800 	bl	8001a44 <_sbrk>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_sbrk_r+0x1a>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_sbrk_r+0x1a>
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	20000584 	.word	0x20000584

08009a54 <memcpy>:
 8009a54:	440a      	add	r2, r1
 8009a56:	4291      	cmp	r1, r2
 8009a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a5c:	d100      	bne.n	8009a60 <memcpy+0xc>
 8009a5e:	4770      	bx	lr
 8009a60:	b510      	push	{r4, lr}
 8009a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a66:	4291      	cmp	r1, r2
 8009a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a6c:	d1f9      	bne.n	8009a62 <memcpy+0xe>
 8009a6e:	bd10      	pop	{r4, pc}

08009a70 <nan>:
 8009a70:	2000      	movs	r0, #0
 8009a72:	4901      	ldr	r1, [pc, #4]	; (8009a78 <nan+0x8>)
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	7ff80000 	.word	0x7ff80000

08009a7c <__assert_func>:
 8009a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a7e:	4614      	mov	r4, r2
 8009a80:	461a      	mov	r2, r3
 8009a82:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <__assert_func+0x2c>)
 8009a84:	4605      	mov	r5, r0
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68d8      	ldr	r0, [r3, #12]
 8009a8a:	b14c      	cbz	r4, 8009aa0 <__assert_func+0x24>
 8009a8c:	4b07      	ldr	r3, [pc, #28]	; (8009aac <__assert_func+0x30>)
 8009a8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a92:	9100      	str	r1, [sp, #0]
 8009a94:	462b      	mov	r3, r5
 8009a96:	4906      	ldr	r1, [pc, #24]	; (8009ab0 <__assert_func+0x34>)
 8009a98:	f000 fbca 	bl	800a230 <fiprintf>
 8009a9c:	f000 fbda 	bl	800a254 <abort>
 8009aa0:	4b04      	ldr	r3, [pc, #16]	; (8009ab4 <__assert_func+0x38>)
 8009aa2:	461c      	mov	r4, r3
 8009aa4:	e7f3      	b.n	8009a8e <__assert_func+0x12>
 8009aa6:	bf00      	nop
 8009aa8:	20000064 	.word	0x20000064
 8009aac:	0800ad12 	.word	0x0800ad12
 8009ab0:	0800ad1f 	.word	0x0800ad1f
 8009ab4:	0800ad4d 	.word	0x0800ad4d

08009ab8 <_calloc_r>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	fba1 5402 	umull	r5, r4, r1, r2
 8009abe:	b934      	cbnz	r4, 8009ace <_calloc_r+0x16>
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	f7fe f9d5 	bl	8007e70 <_malloc_r>
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	b928      	cbnz	r0, 8009ad6 <_calloc_r+0x1e>
 8009aca:	4630      	mov	r0, r6
 8009acc:	bd70      	pop	{r4, r5, r6, pc}
 8009ace:	220c      	movs	r2, #12
 8009ad0:	2600      	movs	r6, #0
 8009ad2:	6002      	str	r2, [r0, #0]
 8009ad4:	e7f9      	b.n	8009aca <_calloc_r+0x12>
 8009ad6:	462a      	mov	r2, r5
 8009ad8:	4621      	mov	r1, r4
 8009ada:	f7fd fa44 	bl	8006f66 <memset>
 8009ade:	e7f4      	b.n	8009aca <_calloc_r+0x12>

08009ae0 <rshift>:
 8009ae0:	6903      	ldr	r3, [r0, #16]
 8009ae2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ae6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009aea:	f100 0414 	add.w	r4, r0, #20
 8009aee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009af2:	dd46      	ble.n	8009b82 <rshift+0xa2>
 8009af4:	f011 011f 	ands.w	r1, r1, #31
 8009af8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009afc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b00:	d10c      	bne.n	8009b1c <rshift+0x3c>
 8009b02:	4629      	mov	r1, r5
 8009b04:	f100 0710 	add.w	r7, r0, #16
 8009b08:	42b1      	cmp	r1, r6
 8009b0a:	d335      	bcc.n	8009b78 <rshift+0x98>
 8009b0c:	1a9b      	subs	r3, r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	1eea      	subs	r2, r5, #3
 8009b12:	4296      	cmp	r6, r2
 8009b14:	bf38      	it	cc
 8009b16:	2300      	movcc	r3, #0
 8009b18:	4423      	add	r3, r4
 8009b1a:	e015      	b.n	8009b48 <rshift+0x68>
 8009b1c:	46a1      	mov	r9, r4
 8009b1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b22:	f1c1 0820 	rsb	r8, r1, #32
 8009b26:	40cf      	lsrs	r7, r1
 8009b28:	f105 0e04 	add.w	lr, r5, #4
 8009b2c:	4576      	cmp	r6, lr
 8009b2e:	46f4      	mov	ip, lr
 8009b30:	d816      	bhi.n	8009b60 <rshift+0x80>
 8009b32:	1a9a      	subs	r2, r3, r2
 8009b34:	0092      	lsls	r2, r2, #2
 8009b36:	3a04      	subs	r2, #4
 8009b38:	3501      	adds	r5, #1
 8009b3a:	42ae      	cmp	r6, r5
 8009b3c:	bf38      	it	cc
 8009b3e:	2200      	movcc	r2, #0
 8009b40:	18a3      	adds	r3, r4, r2
 8009b42:	50a7      	str	r7, [r4, r2]
 8009b44:	b107      	cbz	r7, 8009b48 <rshift+0x68>
 8009b46:	3304      	adds	r3, #4
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	eba3 0204 	sub.w	r2, r3, r4
 8009b4e:	bf08      	it	eq
 8009b50:	2300      	moveq	r3, #0
 8009b52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b56:	6102      	str	r2, [r0, #16]
 8009b58:	bf08      	it	eq
 8009b5a:	6143      	streq	r3, [r0, #20]
 8009b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b60:	f8dc c000 	ldr.w	ip, [ip]
 8009b64:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b68:	ea4c 0707 	orr.w	r7, ip, r7
 8009b6c:	f849 7b04 	str.w	r7, [r9], #4
 8009b70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b74:	40cf      	lsrs	r7, r1
 8009b76:	e7d9      	b.n	8009b2c <rshift+0x4c>
 8009b78:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b7c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b80:	e7c2      	b.n	8009b08 <rshift+0x28>
 8009b82:	4623      	mov	r3, r4
 8009b84:	e7e0      	b.n	8009b48 <rshift+0x68>

08009b86 <__hexdig_fun>:
 8009b86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b8a:	2b09      	cmp	r3, #9
 8009b8c:	d802      	bhi.n	8009b94 <__hexdig_fun+0xe>
 8009b8e:	3820      	subs	r0, #32
 8009b90:	b2c0      	uxtb	r0, r0
 8009b92:	4770      	bx	lr
 8009b94:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b98:	2b05      	cmp	r3, #5
 8009b9a:	d801      	bhi.n	8009ba0 <__hexdig_fun+0x1a>
 8009b9c:	3847      	subs	r0, #71	; 0x47
 8009b9e:	e7f7      	b.n	8009b90 <__hexdig_fun+0xa>
 8009ba0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009ba4:	2b05      	cmp	r3, #5
 8009ba6:	d801      	bhi.n	8009bac <__hexdig_fun+0x26>
 8009ba8:	3827      	subs	r0, #39	; 0x27
 8009baa:	e7f1      	b.n	8009b90 <__hexdig_fun+0xa>
 8009bac:	2000      	movs	r0, #0
 8009bae:	4770      	bx	lr

08009bb0 <__gethex>:
 8009bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	4681      	mov	r9, r0
 8009bb6:	468a      	mov	sl, r1
 8009bb8:	4617      	mov	r7, r2
 8009bba:	680a      	ldr	r2, [r1, #0]
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	f102 0b02 	add.w	fp, r2, #2
 8009bc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009bc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009bca:	9302      	str	r3, [sp, #8]
 8009bcc:	32fe      	adds	r2, #254	; 0xfe
 8009bce:	eb02 030b 	add.w	r3, r2, fp
 8009bd2:	46d8      	mov	r8, fp
 8009bd4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	2830      	cmp	r0, #48	; 0x30
 8009bdc:	d0f7      	beq.n	8009bce <__gethex+0x1e>
 8009bde:	f7ff ffd2 	bl	8009b86 <__hexdig_fun>
 8009be2:	4604      	mov	r4, r0
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d138      	bne.n	8009c5a <__gethex+0xaa>
 8009be8:	2201      	movs	r2, #1
 8009bea:	4640      	mov	r0, r8
 8009bec:	49a7      	ldr	r1, [pc, #668]	; (8009e8c <__gethex+0x2dc>)
 8009bee:	f7fd f9c2 	bl	8006f76 <strncmp>
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d169      	bne.n	8009ccc <__gethex+0x11c>
 8009bf8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009bfc:	465d      	mov	r5, fp
 8009bfe:	f7ff ffc2 	bl	8009b86 <__hexdig_fun>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d064      	beq.n	8009cd0 <__gethex+0x120>
 8009c06:	465a      	mov	r2, fp
 8009c08:	7810      	ldrb	r0, [r2, #0]
 8009c0a:	4690      	mov	r8, r2
 8009c0c:	2830      	cmp	r0, #48	; 0x30
 8009c0e:	f102 0201 	add.w	r2, r2, #1
 8009c12:	d0f9      	beq.n	8009c08 <__gethex+0x58>
 8009c14:	f7ff ffb7 	bl	8009b86 <__hexdig_fun>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	fab0 f480 	clz	r4, r0
 8009c1e:	465e      	mov	r6, fp
 8009c20:	0964      	lsrs	r4, r4, #5
 8009c22:	9301      	str	r3, [sp, #4]
 8009c24:	4642      	mov	r2, r8
 8009c26:	4615      	mov	r5, r2
 8009c28:	7828      	ldrb	r0, [r5, #0]
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	f7ff ffab 	bl	8009b86 <__hexdig_fun>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1f8      	bne.n	8009c26 <__gethex+0x76>
 8009c34:	2201      	movs	r2, #1
 8009c36:	4628      	mov	r0, r5
 8009c38:	4994      	ldr	r1, [pc, #592]	; (8009e8c <__gethex+0x2dc>)
 8009c3a:	f7fd f99c 	bl	8006f76 <strncmp>
 8009c3e:	b978      	cbnz	r0, 8009c60 <__gethex+0xb0>
 8009c40:	b946      	cbnz	r6, 8009c54 <__gethex+0xa4>
 8009c42:	1c6e      	adds	r6, r5, #1
 8009c44:	4632      	mov	r2, r6
 8009c46:	4615      	mov	r5, r2
 8009c48:	7828      	ldrb	r0, [r5, #0]
 8009c4a:	3201      	adds	r2, #1
 8009c4c:	f7ff ff9b 	bl	8009b86 <__hexdig_fun>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d1f8      	bne.n	8009c46 <__gethex+0x96>
 8009c54:	1b73      	subs	r3, r6, r5
 8009c56:	009e      	lsls	r6, r3, #2
 8009c58:	e004      	b.n	8009c64 <__gethex+0xb4>
 8009c5a:	2400      	movs	r4, #0
 8009c5c:	4626      	mov	r6, r4
 8009c5e:	e7e1      	b.n	8009c24 <__gethex+0x74>
 8009c60:	2e00      	cmp	r6, #0
 8009c62:	d1f7      	bne.n	8009c54 <__gethex+0xa4>
 8009c64:	782b      	ldrb	r3, [r5, #0]
 8009c66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c6a:	2b50      	cmp	r3, #80	; 0x50
 8009c6c:	d13d      	bne.n	8009cea <__gethex+0x13a>
 8009c6e:	786b      	ldrb	r3, [r5, #1]
 8009c70:	2b2b      	cmp	r3, #43	; 0x2b
 8009c72:	d02f      	beq.n	8009cd4 <__gethex+0x124>
 8009c74:	2b2d      	cmp	r3, #45	; 0x2d
 8009c76:	d031      	beq.n	8009cdc <__gethex+0x12c>
 8009c78:	f04f 0b00 	mov.w	fp, #0
 8009c7c:	1c69      	adds	r1, r5, #1
 8009c7e:	7808      	ldrb	r0, [r1, #0]
 8009c80:	f7ff ff81 	bl	8009b86 <__hexdig_fun>
 8009c84:	1e42      	subs	r2, r0, #1
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	2a18      	cmp	r2, #24
 8009c8a:	d82e      	bhi.n	8009cea <__gethex+0x13a>
 8009c8c:	f1a0 0210 	sub.w	r2, r0, #16
 8009c90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c94:	f7ff ff77 	bl	8009b86 <__hexdig_fun>
 8009c98:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c9c:	fa5f fc8c 	uxtb.w	ip, ip
 8009ca0:	f1bc 0f18 	cmp.w	ip, #24
 8009ca4:	d91d      	bls.n	8009ce2 <__gethex+0x132>
 8009ca6:	f1bb 0f00 	cmp.w	fp, #0
 8009caa:	d000      	beq.n	8009cae <__gethex+0xfe>
 8009cac:	4252      	negs	r2, r2
 8009cae:	4416      	add	r6, r2
 8009cb0:	f8ca 1000 	str.w	r1, [sl]
 8009cb4:	b1dc      	cbz	r4, 8009cee <__gethex+0x13e>
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	bf14      	ite	ne
 8009cbc:	f04f 0800 	movne.w	r8, #0
 8009cc0:	f04f 0806 	moveq.w	r8, #6
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	b005      	add	sp, #20
 8009cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ccc:	4645      	mov	r5, r8
 8009cce:	4626      	mov	r6, r4
 8009cd0:	2401      	movs	r4, #1
 8009cd2:	e7c7      	b.n	8009c64 <__gethex+0xb4>
 8009cd4:	f04f 0b00 	mov.w	fp, #0
 8009cd8:	1ca9      	adds	r1, r5, #2
 8009cda:	e7d0      	b.n	8009c7e <__gethex+0xce>
 8009cdc:	f04f 0b01 	mov.w	fp, #1
 8009ce0:	e7fa      	b.n	8009cd8 <__gethex+0x128>
 8009ce2:	230a      	movs	r3, #10
 8009ce4:	fb03 0002 	mla	r0, r3, r2, r0
 8009ce8:	e7d0      	b.n	8009c8c <__gethex+0xdc>
 8009cea:	4629      	mov	r1, r5
 8009cec:	e7e0      	b.n	8009cb0 <__gethex+0x100>
 8009cee:	4621      	mov	r1, r4
 8009cf0:	eba5 0308 	sub.w	r3, r5, r8
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	2b07      	cmp	r3, #7
 8009cf8:	dc0a      	bgt.n	8009d10 <__gethex+0x160>
 8009cfa:	4648      	mov	r0, r9
 8009cfc:	f7fe f944 	bl	8007f88 <_Balloc>
 8009d00:	4604      	mov	r4, r0
 8009d02:	b940      	cbnz	r0, 8009d16 <__gethex+0x166>
 8009d04:	4602      	mov	r2, r0
 8009d06:	21e4      	movs	r1, #228	; 0xe4
 8009d08:	4b61      	ldr	r3, [pc, #388]	; (8009e90 <__gethex+0x2e0>)
 8009d0a:	4862      	ldr	r0, [pc, #392]	; (8009e94 <__gethex+0x2e4>)
 8009d0c:	f7ff feb6 	bl	8009a7c <__assert_func>
 8009d10:	3101      	adds	r1, #1
 8009d12:	105b      	asrs	r3, r3, #1
 8009d14:	e7ef      	b.n	8009cf6 <__gethex+0x146>
 8009d16:	2300      	movs	r3, #0
 8009d18:	469b      	mov	fp, r3
 8009d1a:	f100 0a14 	add.w	sl, r0, #20
 8009d1e:	f8cd a004 	str.w	sl, [sp, #4]
 8009d22:	45a8      	cmp	r8, r5
 8009d24:	d344      	bcc.n	8009db0 <__gethex+0x200>
 8009d26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d2a:	4658      	mov	r0, fp
 8009d2c:	f848 bb04 	str.w	fp, [r8], #4
 8009d30:	eba8 080a 	sub.w	r8, r8, sl
 8009d34:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009d38:	6122      	str	r2, [r4, #16]
 8009d3a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009d3e:	f7fe fa15 	bl	800816c <__hi0bits>
 8009d42:	683d      	ldr	r5, [r7, #0]
 8009d44:	eba8 0800 	sub.w	r8, r8, r0
 8009d48:	45a8      	cmp	r8, r5
 8009d4a:	dd59      	ble.n	8009e00 <__gethex+0x250>
 8009d4c:	eba8 0805 	sub.w	r8, r8, r5
 8009d50:	4641      	mov	r1, r8
 8009d52:	4620      	mov	r0, r4
 8009d54:	f7fe fd93 	bl	800887e <__any_on>
 8009d58:	4683      	mov	fp, r0
 8009d5a:	b1b8      	cbz	r0, 8009d8c <__gethex+0x1dc>
 8009d5c:	f04f 0b01 	mov.w	fp, #1
 8009d60:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d64:	1159      	asrs	r1, r3, #5
 8009d66:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d6a:	f003 021f 	and.w	r2, r3, #31
 8009d6e:	fa0b f202 	lsl.w	r2, fp, r2
 8009d72:	420a      	tst	r2, r1
 8009d74:	d00a      	beq.n	8009d8c <__gethex+0x1dc>
 8009d76:	455b      	cmp	r3, fp
 8009d78:	dd06      	ble.n	8009d88 <__gethex+0x1d8>
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f1a8 0102 	sub.w	r1, r8, #2
 8009d80:	f7fe fd7d 	bl	800887e <__any_on>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d138      	bne.n	8009dfa <__gethex+0x24a>
 8009d88:	f04f 0b02 	mov.w	fp, #2
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f7ff fea6 	bl	8009ae0 <rshift>
 8009d94:	4446      	add	r6, r8
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	42b3      	cmp	r3, r6
 8009d9a:	da41      	bge.n	8009e20 <__gethex+0x270>
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	4648      	mov	r0, r9
 8009da0:	f7fe f932 	bl	8008008 <_Bfree>
 8009da4:	2300      	movs	r3, #0
 8009da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009da8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	e789      	b.n	8009cc4 <__gethex+0x114>
 8009db0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009db4:	2a2e      	cmp	r2, #46	; 0x2e
 8009db6:	d014      	beq.n	8009de2 <__gethex+0x232>
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	d106      	bne.n	8009dca <__gethex+0x21a>
 8009dbc:	9b01      	ldr	r3, [sp, #4]
 8009dbe:	f843 bb04 	str.w	fp, [r3], #4
 8009dc2:	f04f 0b00 	mov.w	fp, #0
 8009dc6:	9301      	str	r3, [sp, #4]
 8009dc8:	465b      	mov	r3, fp
 8009dca:	7828      	ldrb	r0, [r5, #0]
 8009dcc:	9303      	str	r3, [sp, #12]
 8009dce:	f7ff feda 	bl	8009b86 <__hexdig_fun>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	f000 000f 	and.w	r0, r0, #15
 8009dd8:	4098      	lsls	r0, r3
 8009dda:	ea4b 0b00 	orr.w	fp, fp, r0
 8009dde:	3304      	adds	r3, #4
 8009de0:	e79f      	b.n	8009d22 <__gethex+0x172>
 8009de2:	45a8      	cmp	r8, r5
 8009de4:	d8e8      	bhi.n	8009db8 <__gethex+0x208>
 8009de6:	2201      	movs	r2, #1
 8009de8:	4628      	mov	r0, r5
 8009dea:	4928      	ldr	r1, [pc, #160]	; (8009e8c <__gethex+0x2dc>)
 8009dec:	9303      	str	r3, [sp, #12]
 8009dee:	f7fd f8c2 	bl	8006f76 <strncmp>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d1df      	bne.n	8009db8 <__gethex+0x208>
 8009df8:	e793      	b.n	8009d22 <__gethex+0x172>
 8009dfa:	f04f 0b03 	mov.w	fp, #3
 8009dfe:	e7c5      	b.n	8009d8c <__gethex+0x1dc>
 8009e00:	da0b      	bge.n	8009e1a <__gethex+0x26a>
 8009e02:	eba5 0808 	sub.w	r8, r5, r8
 8009e06:	4621      	mov	r1, r4
 8009e08:	4642      	mov	r2, r8
 8009e0a:	4648      	mov	r0, r9
 8009e0c:	f7fe fb14 	bl	8008438 <__lshift>
 8009e10:	4604      	mov	r4, r0
 8009e12:	eba6 0608 	sub.w	r6, r6, r8
 8009e16:	f100 0a14 	add.w	sl, r0, #20
 8009e1a:	f04f 0b00 	mov.w	fp, #0
 8009e1e:	e7ba      	b.n	8009d96 <__gethex+0x1e6>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	42b3      	cmp	r3, r6
 8009e24:	dd74      	ble.n	8009f10 <__gethex+0x360>
 8009e26:	1b9e      	subs	r6, r3, r6
 8009e28:	42b5      	cmp	r5, r6
 8009e2a:	dc35      	bgt.n	8009e98 <__gethex+0x2e8>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d023      	beq.n	8009e7a <__gethex+0x2ca>
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d025      	beq.n	8009e82 <__gethex+0x2d2>
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d115      	bne.n	8009e66 <__gethex+0x2b6>
 8009e3a:	42b5      	cmp	r5, r6
 8009e3c:	d113      	bne.n	8009e66 <__gethex+0x2b6>
 8009e3e:	2d01      	cmp	r5, #1
 8009e40:	d10b      	bne.n	8009e5a <__gethex+0x2aa>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	9a02      	ldr	r2, [sp, #8]
 8009e46:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	6123      	str	r3, [r4, #16]
 8009e50:	f8ca 3000 	str.w	r3, [sl]
 8009e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e56:	601c      	str	r4, [r3, #0]
 8009e58:	e734      	b.n	8009cc4 <__gethex+0x114>
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	1e69      	subs	r1, r5, #1
 8009e5e:	f7fe fd0e 	bl	800887e <__any_on>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d1ed      	bne.n	8009e42 <__gethex+0x292>
 8009e66:	4621      	mov	r1, r4
 8009e68:	4648      	mov	r0, r9
 8009e6a:	f7fe f8cd 	bl	8008008 <_Bfree>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e72:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	e724      	b.n	8009cc4 <__gethex+0x114>
 8009e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1f2      	bne.n	8009e66 <__gethex+0x2b6>
 8009e80:	e7df      	b.n	8009e42 <__gethex+0x292>
 8009e82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1dc      	bne.n	8009e42 <__gethex+0x292>
 8009e88:	e7ed      	b.n	8009e66 <__gethex+0x2b6>
 8009e8a:	bf00      	nop
 8009e8c:	0800aba4 	.word	0x0800aba4
 8009e90:	0800aa37 	.word	0x0800aa37
 8009e94:	0800ad4e 	.word	0x0800ad4e
 8009e98:	f106 38ff 	add.w	r8, r6, #4294967295
 8009e9c:	f1bb 0f00 	cmp.w	fp, #0
 8009ea0:	d133      	bne.n	8009f0a <__gethex+0x35a>
 8009ea2:	f1b8 0f00 	cmp.w	r8, #0
 8009ea6:	d004      	beq.n	8009eb2 <__gethex+0x302>
 8009ea8:	4641      	mov	r1, r8
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f7fe fce7 	bl	800887e <__any_on>
 8009eb0:	4683      	mov	fp, r0
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009eb8:	f008 081f 	and.w	r8, r8, #31
 8009ebc:	fa03 f308 	lsl.w	r3, r3, r8
 8009ec0:	f04f 0802 	mov.w	r8, #2
 8009ec4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4213      	tst	r3, r2
 8009ecc:	4620      	mov	r0, r4
 8009ece:	bf18      	it	ne
 8009ed0:	f04b 0b02 	orrne.w	fp, fp, #2
 8009ed4:	1bad      	subs	r5, r5, r6
 8009ed6:	f7ff fe03 	bl	8009ae0 <rshift>
 8009eda:	687e      	ldr	r6, [r7, #4]
 8009edc:	f1bb 0f00 	cmp.w	fp, #0
 8009ee0:	d04a      	beq.n	8009f78 <__gethex+0x3c8>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d016      	beq.n	8009f16 <__gethex+0x366>
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d018      	beq.n	8009f1e <__gethex+0x36e>
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d109      	bne.n	8009f04 <__gethex+0x354>
 8009ef0:	f01b 0f02 	tst.w	fp, #2
 8009ef4:	d006      	beq.n	8009f04 <__gethex+0x354>
 8009ef6:	f8da 3000 	ldr.w	r3, [sl]
 8009efa:	ea4b 0b03 	orr.w	fp, fp, r3
 8009efe:	f01b 0f01 	tst.w	fp, #1
 8009f02:	d10f      	bne.n	8009f24 <__gethex+0x374>
 8009f04:	f048 0810 	orr.w	r8, r8, #16
 8009f08:	e036      	b.n	8009f78 <__gethex+0x3c8>
 8009f0a:	f04f 0b01 	mov.w	fp, #1
 8009f0e:	e7d0      	b.n	8009eb2 <__gethex+0x302>
 8009f10:	f04f 0801 	mov.w	r8, #1
 8009f14:	e7e2      	b.n	8009edc <__gethex+0x32c>
 8009f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f18:	f1c3 0301 	rsb	r3, r3, #1
 8009f1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d0ef      	beq.n	8009f04 <__gethex+0x354>
 8009f24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f28:	f104 0214 	add.w	r2, r4, #20
 8009f2c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	2300      	movs	r3, #0
 8009f34:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009f38:	4694      	mov	ip, r2
 8009f3a:	f852 1b04 	ldr.w	r1, [r2], #4
 8009f3e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009f42:	d01e      	beq.n	8009f82 <__gethex+0x3d2>
 8009f44:	3101      	adds	r1, #1
 8009f46:	f8cc 1000 	str.w	r1, [ip]
 8009f4a:	f1b8 0f02 	cmp.w	r8, #2
 8009f4e:	f104 0214 	add.w	r2, r4, #20
 8009f52:	d13d      	bne.n	8009fd0 <__gethex+0x420>
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	42ab      	cmp	r3, r5
 8009f5a:	d10b      	bne.n	8009f74 <__gethex+0x3c4>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	1169      	asrs	r1, r5, #5
 8009f60:	f005 051f 	and.w	r5, r5, #31
 8009f64:	fa03 f505 	lsl.w	r5, r3, r5
 8009f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f6c:	421d      	tst	r5, r3
 8009f6e:	bf18      	it	ne
 8009f70:	f04f 0801 	movne.w	r8, #1
 8009f74:	f048 0820 	orr.w	r8, r8, #32
 8009f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f7a:	601c      	str	r4, [r3, #0]
 8009f7c:	9b02      	ldr	r3, [sp, #8]
 8009f7e:	601e      	str	r6, [r3, #0]
 8009f80:	e6a0      	b.n	8009cc4 <__gethex+0x114>
 8009f82:	4290      	cmp	r0, r2
 8009f84:	f842 3c04 	str.w	r3, [r2, #-4]
 8009f88:	d8d6      	bhi.n	8009f38 <__gethex+0x388>
 8009f8a:	68a2      	ldr	r2, [r4, #8]
 8009f8c:	4593      	cmp	fp, r2
 8009f8e:	db17      	blt.n	8009fc0 <__gethex+0x410>
 8009f90:	6861      	ldr	r1, [r4, #4]
 8009f92:	4648      	mov	r0, r9
 8009f94:	3101      	adds	r1, #1
 8009f96:	f7fd fff7 	bl	8007f88 <_Balloc>
 8009f9a:	4682      	mov	sl, r0
 8009f9c:	b918      	cbnz	r0, 8009fa6 <__gethex+0x3f6>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	2184      	movs	r1, #132	; 0x84
 8009fa2:	4b1a      	ldr	r3, [pc, #104]	; (800a00c <__gethex+0x45c>)
 8009fa4:	e6b1      	b.n	8009d0a <__gethex+0x15a>
 8009fa6:	6922      	ldr	r2, [r4, #16]
 8009fa8:	f104 010c 	add.w	r1, r4, #12
 8009fac:	3202      	adds	r2, #2
 8009fae:	0092      	lsls	r2, r2, #2
 8009fb0:	300c      	adds	r0, #12
 8009fb2:	f7ff fd4f 	bl	8009a54 <memcpy>
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4648      	mov	r0, r9
 8009fba:	f7fe f825 	bl	8008008 <_Bfree>
 8009fbe:	4654      	mov	r4, sl
 8009fc0:	6922      	ldr	r2, [r4, #16]
 8009fc2:	1c51      	adds	r1, r2, #1
 8009fc4:	6121      	str	r1, [r4, #16]
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009fcc:	6151      	str	r1, [r2, #20]
 8009fce:	e7bc      	b.n	8009f4a <__gethex+0x39a>
 8009fd0:	6921      	ldr	r1, [r4, #16]
 8009fd2:	4559      	cmp	r1, fp
 8009fd4:	dd0b      	ble.n	8009fee <__gethex+0x43e>
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f7ff fd81 	bl	8009ae0 <rshift>
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	3601      	adds	r6, #1
 8009fe2:	42b3      	cmp	r3, r6
 8009fe4:	f6ff aeda 	blt.w	8009d9c <__gethex+0x1ec>
 8009fe8:	f04f 0801 	mov.w	r8, #1
 8009fec:	e7c2      	b.n	8009f74 <__gethex+0x3c4>
 8009fee:	f015 051f 	ands.w	r5, r5, #31
 8009ff2:	d0f9      	beq.n	8009fe8 <__gethex+0x438>
 8009ff4:	9b01      	ldr	r3, [sp, #4]
 8009ff6:	f1c5 0520 	rsb	r5, r5, #32
 8009ffa:	441a      	add	r2, r3
 8009ffc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a000:	f7fe f8b4 	bl	800816c <__hi0bits>
 800a004:	42a8      	cmp	r0, r5
 800a006:	dbe6      	blt.n	8009fd6 <__gethex+0x426>
 800a008:	e7ee      	b.n	8009fe8 <__gethex+0x438>
 800a00a:	bf00      	nop
 800a00c:	0800aa37 	.word	0x0800aa37

0800a010 <L_shift>:
 800a010:	f1c2 0208 	rsb	r2, r2, #8
 800a014:	0092      	lsls	r2, r2, #2
 800a016:	b570      	push	{r4, r5, r6, lr}
 800a018:	f1c2 0620 	rsb	r6, r2, #32
 800a01c:	6843      	ldr	r3, [r0, #4]
 800a01e:	6804      	ldr	r4, [r0, #0]
 800a020:	fa03 f506 	lsl.w	r5, r3, r6
 800a024:	432c      	orrs	r4, r5
 800a026:	40d3      	lsrs	r3, r2
 800a028:	6004      	str	r4, [r0, #0]
 800a02a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a02e:	4288      	cmp	r0, r1
 800a030:	d3f4      	bcc.n	800a01c <L_shift+0xc>
 800a032:	bd70      	pop	{r4, r5, r6, pc}

0800a034 <__match>:
 800a034:	b530      	push	{r4, r5, lr}
 800a036:	6803      	ldr	r3, [r0, #0]
 800a038:	3301      	adds	r3, #1
 800a03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a03e:	b914      	cbnz	r4, 800a046 <__match+0x12>
 800a040:	6003      	str	r3, [r0, #0]
 800a042:	2001      	movs	r0, #1
 800a044:	bd30      	pop	{r4, r5, pc}
 800a046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a04a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a04e:	2d19      	cmp	r5, #25
 800a050:	bf98      	it	ls
 800a052:	3220      	addls	r2, #32
 800a054:	42a2      	cmp	r2, r4
 800a056:	d0f0      	beq.n	800a03a <__match+0x6>
 800a058:	2000      	movs	r0, #0
 800a05a:	e7f3      	b.n	800a044 <__match+0x10>

0800a05c <__hexnan>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	2500      	movs	r5, #0
 800a062:	680b      	ldr	r3, [r1, #0]
 800a064:	4682      	mov	sl, r0
 800a066:	115e      	asrs	r6, r3, #5
 800a068:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a06c:	f013 031f 	ands.w	r3, r3, #31
 800a070:	bf18      	it	ne
 800a072:	3604      	addne	r6, #4
 800a074:	1f37      	subs	r7, r6, #4
 800a076:	4690      	mov	r8, r2
 800a078:	46b9      	mov	r9, r7
 800a07a:	463c      	mov	r4, r7
 800a07c:	46ab      	mov	fp, r5
 800a07e:	b087      	sub	sp, #28
 800a080:	6801      	ldr	r1, [r0, #0]
 800a082:	9301      	str	r3, [sp, #4]
 800a084:	f846 5c04 	str.w	r5, [r6, #-4]
 800a088:	9502      	str	r5, [sp, #8]
 800a08a:	784a      	ldrb	r2, [r1, #1]
 800a08c:	1c4b      	adds	r3, r1, #1
 800a08e:	9303      	str	r3, [sp, #12]
 800a090:	b342      	cbz	r2, 800a0e4 <__hexnan+0x88>
 800a092:	4610      	mov	r0, r2
 800a094:	9105      	str	r1, [sp, #20]
 800a096:	9204      	str	r2, [sp, #16]
 800a098:	f7ff fd75 	bl	8009b86 <__hexdig_fun>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d14f      	bne.n	800a140 <__hexnan+0xe4>
 800a0a0:	9a04      	ldr	r2, [sp, #16]
 800a0a2:	9905      	ldr	r1, [sp, #20]
 800a0a4:	2a20      	cmp	r2, #32
 800a0a6:	d818      	bhi.n	800a0da <__hexnan+0x7e>
 800a0a8:	9b02      	ldr	r3, [sp, #8]
 800a0aa:	459b      	cmp	fp, r3
 800a0ac:	dd13      	ble.n	800a0d6 <__hexnan+0x7a>
 800a0ae:	454c      	cmp	r4, r9
 800a0b0:	d206      	bcs.n	800a0c0 <__hexnan+0x64>
 800a0b2:	2d07      	cmp	r5, #7
 800a0b4:	dc04      	bgt.n	800a0c0 <__hexnan+0x64>
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4649      	mov	r1, r9
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f7ff ffa8 	bl	800a010 <L_shift>
 800a0c0:	4544      	cmp	r4, r8
 800a0c2:	d950      	bls.n	800a166 <__hexnan+0x10a>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f1a4 0904 	sub.w	r9, r4, #4
 800a0ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ce:	461d      	mov	r5, r3
 800a0d0:	464c      	mov	r4, r9
 800a0d2:	f8cd b008 	str.w	fp, [sp, #8]
 800a0d6:	9903      	ldr	r1, [sp, #12]
 800a0d8:	e7d7      	b.n	800a08a <__hexnan+0x2e>
 800a0da:	2a29      	cmp	r2, #41	; 0x29
 800a0dc:	d155      	bne.n	800a18a <__hexnan+0x12e>
 800a0de:	3102      	adds	r1, #2
 800a0e0:	f8ca 1000 	str.w	r1, [sl]
 800a0e4:	f1bb 0f00 	cmp.w	fp, #0
 800a0e8:	d04f      	beq.n	800a18a <__hexnan+0x12e>
 800a0ea:	454c      	cmp	r4, r9
 800a0ec:	d206      	bcs.n	800a0fc <__hexnan+0xa0>
 800a0ee:	2d07      	cmp	r5, #7
 800a0f0:	dc04      	bgt.n	800a0fc <__hexnan+0xa0>
 800a0f2:	462a      	mov	r2, r5
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7ff ff8a 	bl	800a010 <L_shift>
 800a0fc:	4544      	cmp	r4, r8
 800a0fe:	d934      	bls.n	800a16a <__hexnan+0x10e>
 800a100:	4623      	mov	r3, r4
 800a102:	f1a8 0204 	sub.w	r2, r8, #4
 800a106:	f853 1b04 	ldr.w	r1, [r3], #4
 800a10a:	429f      	cmp	r7, r3
 800a10c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a110:	d2f9      	bcs.n	800a106 <__hexnan+0xaa>
 800a112:	1b3b      	subs	r3, r7, r4
 800a114:	f023 0303 	bic.w	r3, r3, #3
 800a118:	3304      	adds	r3, #4
 800a11a:	3e03      	subs	r6, #3
 800a11c:	3401      	adds	r4, #1
 800a11e:	42a6      	cmp	r6, r4
 800a120:	bf38      	it	cc
 800a122:	2304      	movcc	r3, #4
 800a124:	2200      	movs	r2, #0
 800a126:	4443      	add	r3, r8
 800a128:	f843 2b04 	str.w	r2, [r3], #4
 800a12c:	429f      	cmp	r7, r3
 800a12e:	d2fb      	bcs.n	800a128 <__hexnan+0xcc>
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	b91b      	cbnz	r3, 800a13c <__hexnan+0xe0>
 800a134:	4547      	cmp	r7, r8
 800a136:	d126      	bne.n	800a186 <__hexnan+0x12a>
 800a138:	2301      	movs	r3, #1
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	2005      	movs	r0, #5
 800a13e:	e025      	b.n	800a18c <__hexnan+0x130>
 800a140:	3501      	adds	r5, #1
 800a142:	2d08      	cmp	r5, #8
 800a144:	f10b 0b01 	add.w	fp, fp, #1
 800a148:	dd06      	ble.n	800a158 <__hexnan+0xfc>
 800a14a:	4544      	cmp	r4, r8
 800a14c:	d9c3      	bls.n	800a0d6 <__hexnan+0x7a>
 800a14e:	2300      	movs	r3, #0
 800a150:	2501      	movs	r5, #1
 800a152:	f844 3c04 	str.w	r3, [r4, #-4]
 800a156:	3c04      	subs	r4, #4
 800a158:	6822      	ldr	r2, [r4, #0]
 800a15a:	f000 000f 	and.w	r0, r0, #15
 800a15e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a162:	6020      	str	r0, [r4, #0]
 800a164:	e7b7      	b.n	800a0d6 <__hexnan+0x7a>
 800a166:	2508      	movs	r5, #8
 800a168:	e7b5      	b.n	800a0d6 <__hexnan+0x7a>
 800a16a:	9b01      	ldr	r3, [sp, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d0df      	beq.n	800a130 <__hexnan+0xd4>
 800a170:	f04f 32ff 	mov.w	r2, #4294967295
 800a174:	f1c3 0320 	rsb	r3, r3, #32
 800a178:	40da      	lsrs	r2, r3
 800a17a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a17e:	4013      	ands	r3, r2
 800a180:	f846 3c04 	str.w	r3, [r6, #-4]
 800a184:	e7d4      	b.n	800a130 <__hexnan+0xd4>
 800a186:	3f04      	subs	r7, #4
 800a188:	e7d2      	b.n	800a130 <__hexnan+0xd4>
 800a18a:	2004      	movs	r0, #4
 800a18c:	b007      	add	sp, #28
 800a18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a192 <__ascii_mbtowc>:
 800a192:	b082      	sub	sp, #8
 800a194:	b901      	cbnz	r1, 800a198 <__ascii_mbtowc+0x6>
 800a196:	a901      	add	r1, sp, #4
 800a198:	b142      	cbz	r2, 800a1ac <__ascii_mbtowc+0x1a>
 800a19a:	b14b      	cbz	r3, 800a1b0 <__ascii_mbtowc+0x1e>
 800a19c:	7813      	ldrb	r3, [r2, #0]
 800a19e:	600b      	str	r3, [r1, #0]
 800a1a0:	7812      	ldrb	r2, [r2, #0]
 800a1a2:	1e10      	subs	r0, r2, #0
 800a1a4:	bf18      	it	ne
 800a1a6:	2001      	movne	r0, #1
 800a1a8:	b002      	add	sp, #8
 800a1aa:	4770      	bx	lr
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	e7fb      	b.n	800a1a8 <__ascii_mbtowc+0x16>
 800a1b0:	f06f 0001 	mvn.w	r0, #1
 800a1b4:	e7f8      	b.n	800a1a8 <__ascii_mbtowc+0x16>

0800a1b6 <_realloc_r>:
 800a1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ba:	4680      	mov	r8, r0
 800a1bc:	4614      	mov	r4, r2
 800a1be:	460e      	mov	r6, r1
 800a1c0:	b921      	cbnz	r1, 800a1cc <_realloc_r+0x16>
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	f7fd be52 	b.w	8007e70 <_malloc_r>
 800a1cc:	b92a      	cbnz	r2, 800a1da <_realloc_r+0x24>
 800a1ce:	f7fd fddf 	bl	8007d90 <_free_r>
 800a1d2:	4625      	mov	r5, r4
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1da:	f000 f842 	bl	800a262 <_malloc_usable_size_r>
 800a1de:	4284      	cmp	r4, r0
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	d802      	bhi.n	800a1ea <_realloc_r+0x34>
 800a1e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1e8:	d812      	bhi.n	800a210 <_realloc_r+0x5a>
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	f7fd fe3f 	bl	8007e70 <_malloc_r>
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d0ed      	beq.n	800a1d4 <_realloc_r+0x1e>
 800a1f8:	42bc      	cmp	r4, r7
 800a1fa:	4622      	mov	r2, r4
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	bf28      	it	cs
 800a200:	463a      	movcs	r2, r7
 800a202:	f7ff fc27 	bl	8009a54 <memcpy>
 800a206:	4631      	mov	r1, r6
 800a208:	4640      	mov	r0, r8
 800a20a:	f7fd fdc1 	bl	8007d90 <_free_r>
 800a20e:	e7e1      	b.n	800a1d4 <_realloc_r+0x1e>
 800a210:	4635      	mov	r5, r6
 800a212:	e7df      	b.n	800a1d4 <_realloc_r+0x1e>

0800a214 <__ascii_wctomb>:
 800a214:	4603      	mov	r3, r0
 800a216:	4608      	mov	r0, r1
 800a218:	b141      	cbz	r1, 800a22c <__ascii_wctomb+0x18>
 800a21a:	2aff      	cmp	r2, #255	; 0xff
 800a21c:	d904      	bls.n	800a228 <__ascii_wctomb+0x14>
 800a21e:	228a      	movs	r2, #138	; 0x8a
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	4770      	bx	lr
 800a228:	2001      	movs	r0, #1
 800a22a:	700a      	strb	r2, [r1, #0]
 800a22c:	4770      	bx	lr
	...

0800a230 <fiprintf>:
 800a230:	b40e      	push	{r1, r2, r3}
 800a232:	b503      	push	{r0, r1, lr}
 800a234:	4601      	mov	r1, r0
 800a236:	ab03      	add	r3, sp, #12
 800a238:	4805      	ldr	r0, [pc, #20]	; (800a250 <fiprintf+0x20>)
 800a23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a23e:	6800      	ldr	r0, [r0, #0]
 800a240:	9301      	str	r3, [sp, #4]
 800a242:	f000 f83d 	bl	800a2c0 <_vfiprintf_r>
 800a246:	b002      	add	sp, #8
 800a248:	f85d eb04 	ldr.w	lr, [sp], #4
 800a24c:	b003      	add	sp, #12
 800a24e:	4770      	bx	lr
 800a250:	20000064 	.word	0x20000064

0800a254 <abort>:
 800a254:	2006      	movs	r0, #6
 800a256:	b508      	push	{r3, lr}
 800a258:	f000 fa0a 	bl	800a670 <raise>
 800a25c:	2001      	movs	r0, #1
 800a25e:	f7f7 fb7e 	bl	800195e <_exit>

0800a262 <_malloc_usable_size_r>:
 800a262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a266:	1f18      	subs	r0, r3, #4
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfbc      	itt	lt
 800a26c:	580b      	ldrlt	r3, [r1, r0]
 800a26e:	18c0      	addlt	r0, r0, r3
 800a270:	4770      	bx	lr

0800a272 <__sfputc_r>:
 800a272:	6893      	ldr	r3, [r2, #8]
 800a274:	b410      	push	{r4}
 800a276:	3b01      	subs	r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	6093      	str	r3, [r2, #8]
 800a27c:	da07      	bge.n	800a28e <__sfputc_r+0x1c>
 800a27e:	6994      	ldr	r4, [r2, #24]
 800a280:	42a3      	cmp	r3, r4
 800a282:	db01      	blt.n	800a288 <__sfputc_r+0x16>
 800a284:	290a      	cmp	r1, #10
 800a286:	d102      	bne.n	800a28e <__sfputc_r+0x1c>
 800a288:	bc10      	pop	{r4}
 800a28a:	f000 b933 	b.w	800a4f4 <__swbuf_r>
 800a28e:	6813      	ldr	r3, [r2, #0]
 800a290:	1c58      	adds	r0, r3, #1
 800a292:	6010      	str	r0, [r2, #0]
 800a294:	7019      	strb	r1, [r3, #0]
 800a296:	4608      	mov	r0, r1
 800a298:	bc10      	pop	{r4}
 800a29a:	4770      	bx	lr

0800a29c <__sfputs_r>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	4614      	mov	r4, r2
 800a2a4:	18d5      	adds	r5, r2, r3
 800a2a6:	42ac      	cmp	r4, r5
 800a2a8:	d101      	bne.n	800a2ae <__sfputs_r+0x12>
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e007      	b.n	800a2be <__sfputs_r+0x22>
 800a2ae:	463a      	mov	r2, r7
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b6:	f7ff ffdc 	bl	800a272 <__sfputc_r>
 800a2ba:	1c43      	adds	r3, r0, #1
 800a2bc:	d1f3      	bne.n	800a2a6 <__sfputs_r+0xa>
 800a2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2c0 <_vfiprintf_r>:
 800a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	460d      	mov	r5, r1
 800a2c6:	4614      	mov	r4, r2
 800a2c8:	4698      	mov	r8, r3
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	b09d      	sub	sp, #116	; 0x74
 800a2ce:	b118      	cbz	r0, 800a2d8 <_vfiprintf_r+0x18>
 800a2d0:	6a03      	ldr	r3, [r0, #32]
 800a2d2:	b90b      	cbnz	r3, 800a2d8 <_vfiprintf_r+0x18>
 800a2d4:	f7fc fd7a 	bl	8006dcc <__sinit>
 800a2d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2da:	07d9      	lsls	r1, r3, #31
 800a2dc:	d405      	bmi.n	800a2ea <_vfiprintf_r+0x2a>
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	059a      	lsls	r2, r3, #22
 800a2e2:	d402      	bmi.n	800a2ea <_vfiprintf_r+0x2a>
 800a2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2e6:	f7fc fece 	bl	8007086 <__retarget_lock_acquire_recursive>
 800a2ea:	89ab      	ldrh	r3, [r5, #12]
 800a2ec:	071b      	lsls	r3, r3, #28
 800a2ee:	d501      	bpl.n	800a2f4 <_vfiprintf_r+0x34>
 800a2f0:	692b      	ldr	r3, [r5, #16]
 800a2f2:	b99b      	cbnz	r3, 800a31c <_vfiprintf_r+0x5c>
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f000 f93a 	bl	800a570 <__swsetup_r>
 800a2fc:	b170      	cbz	r0, 800a31c <_vfiprintf_r+0x5c>
 800a2fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a300:	07dc      	lsls	r4, r3, #31
 800a302:	d504      	bpl.n	800a30e <_vfiprintf_r+0x4e>
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	b01d      	add	sp, #116	; 0x74
 800a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30e:	89ab      	ldrh	r3, [r5, #12]
 800a310:	0598      	lsls	r0, r3, #22
 800a312:	d4f7      	bmi.n	800a304 <_vfiprintf_r+0x44>
 800a314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a316:	f7fc feb7 	bl	8007088 <__retarget_lock_release_recursive>
 800a31a:	e7f3      	b.n	800a304 <_vfiprintf_r+0x44>
 800a31c:	2300      	movs	r3, #0
 800a31e:	9309      	str	r3, [sp, #36]	; 0x24
 800a320:	2320      	movs	r3, #32
 800a322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a326:	2330      	movs	r3, #48	; 0x30
 800a328:	f04f 0901 	mov.w	r9, #1
 800a32c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a330:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a4e0 <_vfiprintf_r+0x220>
 800a334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a338:	4623      	mov	r3, r4
 800a33a:	469a      	mov	sl, r3
 800a33c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a340:	b10a      	cbz	r2, 800a346 <_vfiprintf_r+0x86>
 800a342:	2a25      	cmp	r2, #37	; 0x25
 800a344:	d1f9      	bne.n	800a33a <_vfiprintf_r+0x7a>
 800a346:	ebba 0b04 	subs.w	fp, sl, r4
 800a34a:	d00b      	beq.n	800a364 <_vfiprintf_r+0xa4>
 800a34c:	465b      	mov	r3, fp
 800a34e:	4622      	mov	r2, r4
 800a350:	4629      	mov	r1, r5
 800a352:	4630      	mov	r0, r6
 800a354:	f7ff ffa2 	bl	800a29c <__sfputs_r>
 800a358:	3001      	adds	r0, #1
 800a35a:	f000 80a9 	beq.w	800a4b0 <_vfiprintf_r+0x1f0>
 800a35e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a360:	445a      	add	r2, fp
 800a362:	9209      	str	r2, [sp, #36]	; 0x24
 800a364:	f89a 3000 	ldrb.w	r3, [sl]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 80a1 	beq.w	800a4b0 <_vfiprintf_r+0x1f0>
 800a36e:	2300      	movs	r3, #0
 800a370:	f04f 32ff 	mov.w	r2, #4294967295
 800a374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a378:	f10a 0a01 	add.w	sl, sl, #1
 800a37c:	9304      	str	r3, [sp, #16]
 800a37e:	9307      	str	r3, [sp, #28]
 800a380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a384:	931a      	str	r3, [sp, #104]	; 0x68
 800a386:	4654      	mov	r4, sl
 800a388:	2205      	movs	r2, #5
 800a38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38e:	4854      	ldr	r0, [pc, #336]	; (800a4e0 <_vfiprintf_r+0x220>)
 800a390:	f7fc fe7b 	bl	800708a <memchr>
 800a394:	9a04      	ldr	r2, [sp, #16]
 800a396:	b9d8      	cbnz	r0, 800a3d0 <_vfiprintf_r+0x110>
 800a398:	06d1      	lsls	r1, r2, #27
 800a39a:	bf44      	itt	mi
 800a39c:	2320      	movmi	r3, #32
 800a39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a2:	0713      	lsls	r3, r2, #28
 800a3a4:	bf44      	itt	mi
 800a3a6:	232b      	movmi	r3, #43	; 0x2b
 800a3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b2:	d015      	beq.n	800a3e0 <_vfiprintf_r+0x120>
 800a3b4:	4654      	mov	r4, sl
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	f04f 0c0a 	mov.w	ip, #10
 800a3bc:	9a07      	ldr	r2, [sp, #28]
 800a3be:	4621      	mov	r1, r4
 800a3c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3c4:	3b30      	subs	r3, #48	; 0x30
 800a3c6:	2b09      	cmp	r3, #9
 800a3c8:	d94d      	bls.n	800a466 <_vfiprintf_r+0x1a6>
 800a3ca:	b1b0      	cbz	r0, 800a3fa <_vfiprintf_r+0x13a>
 800a3cc:	9207      	str	r2, [sp, #28]
 800a3ce:	e014      	b.n	800a3fa <_vfiprintf_r+0x13a>
 800a3d0:	eba0 0308 	sub.w	r3, r0, r8
 800a3d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	46a2      	mov	sl, r4
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	e7d2      	b.n	800a386 <_vfiprintf_r+0xc6>
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	1d19      	adds	r1, r3, #4
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	9103      	str	r1, [sp, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	bfbb      	ittet	lt
 800a3ec:	425b      	neglt	r3, r3
 800a3ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a3f2:	9307      	strge	r3, [sp, #28]
 800a3f4:	9307      	strlt	r3, [sp, #28]
 800a3f6:	bfb8      	it	lt
 800a3f8:	9204      	strlt	r2, [sp, #16]
 800a3fa:	7823      	ldrb	r3, [r4, #0]
 800a3fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a3fe:	d10c      	bne.n	800a41a <_vfiprintf_r+0x15a>
 800a400:	7863      	ldrb	r3, [r4, #1]
 800a402:	2b2a      	cmp	r3, #42	; 0x2a
 800a404:	d134      	bne.n	800a470 <_vfiprintf_r+0x1b0>
 800a406:	9b03      	ldr	r3, [sp, #12]
 800a408:	3402      	adds	r4, #2
 800a40a:	1d1a      	adds	r2, r3, #4
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	9203      	str	r2, [sp, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfb8      	it	lt
 800a414:	f04f 33ff 	movlt.w	r3, #4294967295
 800a418:	9305      	str	r3, [sp, #20]
 800a41a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4e4 <_vfiprintf_r+0x224>
 800a41e:	2203      	movs	r2, #3
 800a420:	4650      	mov	r0, sl
 800a422:	7821      	ldrb	r1, [r4, #0]
 800a424:	f7fc fe31 	bl	800708a <memchr>
 800a428:	b138      	cbz	r0, 800a43a <_vfiprintf_r+0x17a>
 800a42a:	2240      	movs	r2, #64	; 0x40
 800a42c:	9b04      	ldr	r3, [sp, #16]
 800a42e:	eba0 000a 	sub.w	r0, r0, sl
 800a432:	4082      	lsls	r2, r0
 800a434:	4313      	orrs	r3, r2
 800a436:	3401      	adds	r4, #1
 800a438:	9304      	str	r3, [sp, #16]
 800a43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43e:	2206      	movs	r2, #6
 800a440:	4829      	ldr	r0, [pc, #164]	; (800a4e8 <_vfiprintf_r+0x228>)
 800a442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a446:	f7fc fe20 	bl	800708a <memchr>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d03f      	beq.n	800a4ce <_vfiprintf_r+0x20e>
 800a44e:	4b27      	ldr	r3, [pc, #156]	; (800a4ec <_vfiprintf_r+0x22c>)
 800a450:	bb1b      	cbnz	r3, 800a49a <_vfiprintf_r+0x1da>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	3307      	adds	r3, #7
 800a456:	f023 0307 	bic.w	r3, r3, #7
 800a45a:	3308      	adds	r3, #8
 800a45c:	9303      	str	r3, [sp, #12]
 800a45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a460:	443b      	add	r3, r7
 800a462:	9309      	str	r3, [sp, #36]	; 0x24
 800a464:	e768      	b.n	800a338 <_vfiprintf_r+0x78>
 800a466:	460c      	mov	r4, r1
 800a468:	2001      	movs	r0, #1
 800a46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a46e:	e7a6      	b.n	800a3be <_vfiprintf_r+0xfe>
 800a470:	2300      	movs	r3, #0
 800a472:	f04f 0c0a 	mov.w	ip, #10
 800a476:	4619      	mov	r1, r3
 800a478:	3401      	adds	r4, #1
 800a47a:	9305      	str	r3, [sp, #20]
 800a47c:	4620      	mov	r0, r4
 800a47e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a482:	3a30      	subs	r2, #48	; 0x30
 800a484:	2a09      	cmp	r2, #9
 800a486:	d903      	bls.n	800a490 <_vfiprintf_r+0x1d0>
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d0c6      	beq.n	800a41a <_vfiprintf_r+0x15a>
 800a48c:	9105      	str	r1, [sp, #20]
 800a48e:	e7c4      	b.n	800a41a <_vfiprintf_r+0x15a>
 800a490:	4604      	mov	r4, r0
 800a492:	2301      	movs	r3, #1
 800a494:	fb0c 2101 	mla	r1, ip, r1, r2
 800a498:	e7f0      	b.n	800a47c <_vfiprintf_r+0x1bc>
 800a49a:	ab03      	add	r3, sp, #12
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	462a      	mov	r2, r5
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4b13      	ldr	r3, [pc, #76]	; (800a4f0 <_vfiprintf_r+0x230>)
 800a4a4:	a904      	add	r1, sp, #16
 800a4a6:	f7fb fe35 	bl	8006114 <_printf_float>
 800a4aa:	4607      	mov	r7, r0
 800a4ac:	1c78      	adds	r0, r7, #1
 800a4ae:	d1d6      	bne.n	800a45e <_vfiprintf_r+0x19e>
 800a4b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4b2:	07d9      	lsls	r1, r3, #31
 800a4b4:	d405      	bmi.n	800a4c2 <_vfiprintf_r+0x202>
 800a4b6:	89ab      	ldrh	r3, [r5, #12]
 800a4b8:	059a      	lsls	r2, r3, #22
 800a4ba:	d402      	bmi.n	800a4c2 <_vfiprintf_r+0x202>
 800a4bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4be:	f7fc fde3 	bl	8007088 <__retarget_lock_release_recursive>
 800a4c2:	89ab      	ldrh	r3, [r5, #12]
 800a4c4:	065b      	lsls	r3, r3, #25
 800a4c6:	f53f af1d 	bmi.w	800a304 <_vfiprintf_r+0x44>
 800a4ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4cc:	e71c      	b.n	800a308 <_vfiprintf_r+0x48>
 800a4ce:	ab03      	add	r3, sp, #12
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	462a      	mov	r2, r5
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	4b06      	ldr	r3, [pc, #24]	; (800a4f0 <_vfiprintf_r+0x230>)
 800a4d8:	a904      	add	r1, sp, #16
 800a4da:	f7fc f8bb 	bl	8006654 <_printf_i>
 800a4de:	e7e4      	b.n	800a4aa <_vfiprintf_r+0x1ea>
 800a4e0:	0800acf9 	.word	0x0800acf9
 800a4e4:	0800acff 	.word	0x0800acff
 800a4e8:	0800ad03 	.word	0x0800ad03
 800a4ec:	08006115 	.word	0x08006115
 800a4f0:	0800a29d 	.word	0x0800a29d

0800a4f4 <__swbuf_r>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	460e      	mov	r6, r1
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	b118      	cbz	r0, 800a506 <__swbuf_r+0x12>
 800a4fe:	6a03      	ldr	r3, [r0, #32]
 800a500:	b90b      	cbnz	r3, 800a506 <__swbuf_r+0x12>
 800a502:	f7fc fc63 	bl	8006dcc <__sinit>
 800a506:	69a3      	ldr	r3, [r4, #24]
 800a508:	60a3      	str	r3, [r4, #8]
 800a50a:	89a3      	ldrh	r3, [r4, #12]
 800a50c:	071a      	lsls	r2, r3, #28
 800a50e:	d525      	bpl.n	800a55c <__swbuf_r+0x68>
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	b31b      	cbz	r3, 800a55c <__swbuf_r+0x68>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	6922      	ldr	r2, [r4, #16]
 800a518:	b2f6      	uxtb	r6, r6
 800a51a:	1a98      	subs	r0, r3, r2
 800a51c:	6963      	ldr	r3, [r4, #20]
 800a51e:	4637      	mov	r7, r6
 800a520:	4283      	cmp	r3, r0
 800a522:	dc04      	bgt.n	800a52e <__swbuf_r+0x3a>
 800a524:	4621      	mov	r1, r4
 800a526:	4628      	mov	r0, r5
 800a528:	f7ff fa42 	bl	80099b0 <_fflush_r>
 800a52c:	b9e0      	cbnz	r0, 800a568 <__swbuf_r+0x74>
 800a52e:	68a3      	ldr	r3, [r4, #8]
 800a530:	3b01      	subs	r3, #1
 800a532:	60a3      	str	r3, [r4, #8]
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	6022      	str	r2, [r4, #0]
 800a53a:	701e      	strb	r6, [r3, #0]
 800a53c:	6962      	ldr	r2, [r4, #20]
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	429a      	cmp	r2, r3
 800a542:	d004      	beq.n	800a54e <__swbuf_r+0x5a>
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	07db      	lsls	r3, r3, #31
 800a548:	d506      	bpl.n	800a558 <__swbuf_r+0x64>
 800a54a:	2e0a      	cmp	r6, #10
 800a54c:	d104      	bne.n	800a558 <__swbuf_r+0x64>
 800a54e:	4621      	mov	r1, r4
 800a550:	4628      	mov	r0, r5
 800a552:	f7ff fa2d 	bl	80099b0 <_fflush_r>
 800a556:	b938      	cbnz	r0, 800a568 <__swbuf_r+0x74>
 800a558:	4638      	mov	r0, r7
 800a55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a55c:	4621      	mov	r1, r4
 800a55e:	4628      	mov	r0, r5
 800a560:	f000 f806 	bl	800a570 <__swsetup_r>
 800a564:	2800      	cmp	r0, #0
 800a566:	d0d5      	beq.n	800a514 <__swbuf_r+0x20>
 800a568:	f04f 37ff 	mov.w	r7, #4294967295
 800a56c:	e7f4      	b.n	800a558 <__swbuf_r+0x64>
	...

0800a570 <__swsetup_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4b2a      	ldr	r3, [pc, #168]	; (800a61c <__swsetup_r+0xac>)
 800a574:	4605      	mov	r5, r0
 800a576:	6818      	ldr	r0, [r3, #0]
 800a578:	460c      	mov	r4, r1
 800a57a:	b118      	cbz	r0, 800a584 <__swsetup_r+0x14>
 800a57c:	6a03      	ldr	r3, [r0, #32]
 800a57e:	b90b      	cbnz	r3, 800a584 <__swsetup_r+0x14>
 800a580:	f7fc fc24 	bl	8006dcc <__sinit>
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a58a:	0718      	lsls	r0, r3, #28
 800a58c:	d422      	bmi.n	800a5d4 <__swsetup_r+0x64>
 800a58e:	06d9      	lsls	r1, r3, #27
 800a590:	d407      	bmi.n	800a5a2 <__swsetup_r+0x32>
 800a592:	2309      	movs	r3, #9
 800a594:	602b      	str	r3, [r5, #0]
 800a596:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a59a:	f04f 30ff 	mov.w	r0, #4294967295
 800a59e:	81a3      	strh	r3, [r4, #12]
 800a5a0:	e034      	b.n	800a60c <__swsetup_r+0x9c>
 800a5a2:	0758      	lsls	r0, r3, #29
 800a5a4:	d512      	bpl.n	800a5cc <__swsetup_r+0x5c>
 800a5a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5a8:	b141      	cbz	r1, 800a5bc <__swsetup_r+0x4c>
 800a5aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5ae:	4299      	cmp	r1, r3
 800a5b0:	d002      	beq.n	800a5b8 <__swsetup_r+0x48>
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f7fd fbec 	bl	8007d90 <_free_r>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	6363      	str	r3, [r4, #52]	; 0x34
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	6063      	str	r3, [r4, #4]
 800a5c8:	6923      	ldr	r3, [r4, #16]
 800a5ca:	6023      	str	r3, [r4, #0]
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	f043 0308 	orr.w	r3, r3, #8
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	b94b      	cbnz	r3, 800a5ec <__swsetup_r+0x7c>
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e2:	d003      	beq.n	800a5ec <__swsetup_r+0x7c>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f000 f883 	bl	800a6f2 <__smakebuf_r>
 800a5ec:	89a0      	ldrh	r0, [r4, #12]
 800a5ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5f2:	f010 0301 	ands.w	r3, r0, #1
 800a5f6:	d00a      	beq.n	800a60e <__swsetup_r+0x9e>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	60a3      	str	r3, [r4, #8]
 800a5fc:	6963      	ldr	r3, [r4, #20]
 800a5fe:	425b      	negs	r3, r3
 800a600:	61a3      	str	r3, [r4, #24]
 800a602:	6923      	ldr	r3, [r4, #16]
 800a604:	b943      	cbnz	r3, 800a618 <__swsetup_r+0xa8>
 800a606:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a60a:	d1c4      	bne.n	800a596 <__swsetup_r+0x26>
 800a60c:	bd38      	pop	{r3, r4, r5, pc}
 800a60e:	0781      	lsls	r1, r0, #30
 800a610:	bf58      	it	pl
 800a612:	6963      	ldrpl	r3, [r4, #20]
 800a614:	60a3      	str	r3, [r4, #8]
 800a616:	e7f4      	b.n	800a602 <__swsetup_r+0x92>
 800a618:	2000      	movs	r0, #0
 800a61a:	e7f7      	b.n	800a60c <__swsetup_r+0x9c>
 800a61c:	20000064 	.word	0x20000064

0800a620 <_raise_r>:
 800a620:	291f      	cmp	r1, #31
 800a622:	b538      	push	{r3, r4, r5, lr}
 800a624:	4604      	mov	r4, r0
 800a626:	460d      	mov	r5, r1
 800a628:	d904      	bls.n	800a634 <_raise_r+0x14>
 800a62a:	2316      	movs	r3, #22
 800a62c:	6003      	str	r3, [r0, #0]
 800a62e:	f04f 30ff 	mov.w	r0, #4294967295
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a636:	b112      	cbz	r2, 800a63e <_raise_r+0x1e>
 800a638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a63c:	b94b      	cbnz	r3, 800a652 <_raise_r+0x32>
 800a63e:	4620      	mov	r0, r4
 800a640:	f000 f830 	bl	800a6a4 <_getpid_r>
 800a644:	462a      	mov	r2, r5
 800a646:	4601      	mov	r1, r0
 800a648:	4620      	mov	r0, r4
 800a64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a64e:	f000 b817 	b.w	800a680 <_kill_r>
 800a652:	2b01      	cmp	r3, #1
 800a654:	d00a      	beq.n	800a66c <_raise_r+0x4c>
 800a656:	1c59      	adds	r1, r3, #1
 800a658:	d103      	bne.n	800a662 <_raise_r+0x42>
 800a65a:	2316      	movs	r3, #22
 800a65c:	6003      	str	r3, [r0, #0]
 800a65e:	2001      	movs	r0, #1
 800a660:	e7e7      	b.n	800a632 <_raise_r+0x12>
 800a662:	2400      	movs	r4, #0
 800a664:	4628      	mov	r0, r5
 800a666:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a66a:	4798      	blx	r3
 800a66c:	2000      	movs	r0, #0
 800a66e:	e7e0      	b.n	800a632 <_raise_r+0x12>

0800a670 <raise>:
 800a670:	4b02      	ldr	r3, [pc, #8]	; (800a67c <raise+0xc>)
 800a672:	4601      	mov	r1, r0
 800a674:	6818      	ldr	r0, [r3, #0]
 800a676:	f7ff bfd3 	b.w	800a620 <_raise_r>
 800a67a:	bf00      	nop
 800a67c:	20000064 	.word	0x20000064

0800a680 <_kill_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	2300      	movs	r3, #0
 800a684:	4d06      	ldr	r5, [pc, #24]	; (800a6a0 <_kill_r+0x20>)
 800a686:	4604      	mov	r4, r0
 800a688:	4608      	mov	r0, r1
 800a68a:	4611      	mov	r1, r2
 800a68c:	602b      	str	r3, [r5, #0]
 800a68e:	f7f7 f956 	bl	800193e <_kill>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	d102      	bne.n	800a69c <_kill_r+0x1c>
 800a696:	682b      	ldr	r3, [r5, #0]
 800a698:	b103      	cbz	r3, 800a69c <_kill_r+0x1c>
 800a69a:	6023      	str	r3, [r4, #0]
 800a69c:	bd38      	pop	{r3, r4, r5, pc}
 800a69e:	bf00      	nop
 800a6a0:	20000584 	.word	0x20000584

0800a6a4 <_getpid_r>:
 800a6a4:	f7f7 b944 	b.w	8001930 <_getpid>

0800a6a8 <__swhatbuf_r>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b0:	4615      	mov	r5, r2
 800a6b2:	2900      	cmp	r1, #0
 800a6b4:	461e      	mov	r6, r3
 800a6b6:	b096      	sub	sp, #88	; 0x58
 800a6b8:	da0c      	bge.n	800a6d4 <__swhatbuf_r+0x2c>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a6c2:	bf0c      	ite	eq
 800a6c4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a6c8:	2340      	movne	r3, #64	; 0x40
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	6031      	str	r1, [r6, #0]
 800a6ce:	602b      	str	r3, [r5, #0]
 800a6d0:	b016      	add	sp, #88	; 0x58
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	466a      	mov	r2, sp
 800a6d6:	f000 f849 	bl	800a76c <_fstat_r>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	dbed      	blt.n	800a6ba <__swhatbuf_r+0x12>
 800a6de:	9901      	ldr	r1, [sp, #4]
 800a6e0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a6e4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a6e8:	4259      	negs	r1, r3
 800a6ea:	4159      	adcs	r1, r3
 800a6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6f0:	e7eb      	b.n	800a6ca <__swhatbuf_r+0x22>

0800a6f2 <__smakebuf_r>:
 800a6f2:	898b      	ldrh	r3, [r1, #12]
 800a6f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6f6:	079d      	lsls	r5, r3, #30
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	d507      	bpl.n	800a70e <__smakebuf_r+0x1c>
 800a6fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	6123      	str	r3, [r4, #16]
 800a706:	2301      	movs	r3, #1
 800a708:	6163      	str	r3, [r4, #20]
 800a70a:	b002      	add	sp, #8
 800a70c:	bd70      	pop	{r4, r5, r6, pc}
 800a70e:	466a      	mov	r2, sp
 800a710:	ab01      	add	r3, sp, #4
 800a712:	f7ff ffc9 	bl	800a6a8 <__swhatbuf_r>
 800a716:	9900      	ldr	r1, [sp, #0]
 800a718:	4605      	mov	r5, r0
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7fd fba8 	bl	8007e70 <_malloc_r>
 800a720:	b948      	cbnz	r0, 800a736 <__smakebuf_r+0x44>
 800a722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a726:	059a      	lsls	r2, r3, #22
 800a728:	d4ef      	bmi.n	800a70a <__smakebuf_r+0x18>
 800a72a:	f023 0303 	bic.w	r3, r3, #3
 800a72e:	f043 0302 	orr.w	r3, r3, #2
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	e7e3      	b.n	800a6fe <__smakebuf_r+0xc>
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	6020      	str	r0, [r4, #0]
 800a73a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	9b00      	ldr	r3, [sp, #0]
 800a742:	6120      	str	r0, [r4, #16]
 800a744:	6163      	str	r3, [r4, #20]
 800a746:	9b01      	ldr	r3, [sp, #4]
 800a748:	b15b      	cbz	r3, 800a762 <__smakebuf_r+0x70>
 800a74a:	4630      	mov	r0, r6
 800a74c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a750:	f000 f81e 	bl	800a790 <_isatty_r>
 800a754:	b128      	cbz	r0, 800a762 <__smakebuf_r+0x70>
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	f023 0303 	bic.w	r3, r3, #3
 800a75c:	f043 0301 	orr.w	r3, r3, #1
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	431d      	orrs	r5, r3
 800a766:	81a5      	strh	r5, [r4, #12]
 800a768:	e7cf      	b.n	800a70a <__smakebuf_r+0x18>
	...

0800a76c <_fstat_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	2300      	movs	r3, #0
 800a770:	4d06      	ldr	r5, [pc, #24]	; (800a78c <_fstat_r+0x20>)
 800a772:	4604      	mov	r4, r0
 800a774:	4608      	mov	r0, r1
 800a776:	4611      	mov	r1, r2
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	f7f7 f93e 	bl	80019fa <_fstat>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d102      	bne.n	800a788 <_fstat_r+0x1c>
 800a782:	682b      	ldr	r3, [r5, #0]
 800a784:	b103      	cbz	r3, 800a788 <_fstat_r+0x1c>
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	bd38      	pop	{r3, r4, r5, pc}
 800a78a:	bf00      	nop
 800a78c:	20000584 	.word	0x20000584

0800a790 <_isatty_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	2300      	movs	r3, #0
 800a794:	4d05      	ldr	r5, [pc, #20]	; (800a7ac <_isatty_r+0x1c>)
 800a796:	4604      	mov	r4, r0
 800a798:	4608      	mov	r0, r1
 800a79a:	602b      	str	r3, [r5, #0]
 800a79c:	f7f7 f93c 	bl	8001a18 <_isatty>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d102      	bne.n	800a7aa <_isatty_r+0x1a>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	b103      	cbz	r3, 800a7aa <_isatty_r+0x1a>
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	20000584 	.word	0x20000584

0800a7b0 <_init>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr

0800a7bc <_fini>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr
