
01_Simple_Period.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da04  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  0800db18  0800db18  0001db18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2f4  0800e2f4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800e2f4  0800e2f4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e2f4  0800e2f4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2f4  0800e2f4  0001e2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2f8  0800e2f8  0001e2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee4  200001ec  0800e4e8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020d0  0800e4e8  000220d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d23  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a7e  00000000  00000000  00037f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  0003ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e2  00000000  00000000  0003d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2d2  00000000  00000000  0003e2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b72f  00000000  00000000  0005959c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097cf0  00000000  00000000  00074ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077a8  00000000  00000000  0010c9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00114164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dafc 	.word	0x0800dafc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800dafc 	.word	0x0800dafc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_f2iz>:
 8000d84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d8c:	d30f      	bcc.n	8000dae <__aeabi_f2iz+0x2a>
 8000d8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d96:	d90d      	bls.n	8000db4 <__aeabi_f2iz+0x30>
 8000d98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000da0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000da4:	fa23 f002 	lsr.w	r0, r3, r2
 8000da8:	bf18      	it	ne
 8000daa:	4240      	negne	r0, r0
 8000dac:	4770      	bx	lr
 8000dae:	f04f 0000 	mov.w	r0, #0
 8000db2:	4770      	bx	lr
 8000db4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000db8:	d101      	bne.n	8000dbe <__aeabi_f2iz+0x3a>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	d105      	bne.n	8000dca <__aeabi_f2iz+0x46>
 8000dbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	bf08      	it	eq
 8000dc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_d2lz>:
 8000dd0:	b538      	push	{r3, r4, r5, lr}
 8000dd2:	4605      	mov	r5, r0
 8000dd4:	460c      	mov	r4, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2300      	movs	r3, #0
 8000dda:	4628      	mov	r0, r5
 8000ddc:	4621      	mov	r1, r4
 8000dde:	f7ff fded 	bl	80009bc <__aeabi_dcmplt>
 8000de2:	b928      	cbnz	r0, 8000df0 <__aeabi_d2lz+0x20>
 8000de4:	4628      	mov	r0, r5
 8000de6:	4621      	mov	r1, r4
 8000de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dec:	f000 b80a 	b.w	8000e04 <__aeabi_d2ulz>
 8000df0:	4628      	mov	r0, r5
 8000df2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000df6:	f000 f805 	bl	8000e04 <__aeabi_d2ulz>
 8000dfa:	4240      	negs	r0, r0
 8000dfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e00:	bd38      	pop	{r3, r4, r5, pc}
 8000e02:	bf00      	nop

08000e04 <__aeabi_d2ulz>:
 8000e04:	b5d0      	push	{r4, r6, r7, lr}
 8000e06:	2200      	movs	r2, #0
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <__aeabi_d2ulz+0x34>)
 8000e0a:	4606      	mov	r6, r0
 8000e0c:	460f      	mov	r7, r1
 8000e0e:	f7ff fb63 	bl	80004d8 <__aeabi_dmul>
 8000e12:	f7ff fe39 	bl	8000a88 <__aeabi_d2uiz>
 8000e16:	4604      	mov	r4, r0
 8000e18:	f7ff fae4 	bl	80003e4 <__aeabi_ui2d>
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <__aeabi_d2ulz+0x38>)
 8000e20:	f7ff fb5a 	bl	80004d8 <__aeabi_dmul>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4630      	mov	r0, r6
 8000e2a:	4639      	mov	r1, r7
 8000e2c:	f7ff f99c 	bl	8000168 <__aeabi_dsub>
 8000e30:	f7ff fe2a 	bl	8000a88 <__aeabi_d2uiz>
 8000e34:	4621      	mov	r1, r4
 8000e36:	bdd0      	pop	{r4, r6, r7, pc}
 8000e38:	3df00000 	.word	0x3df00000
 8000e3c:	41f00000 	.word	0x41f00000

08000e40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <vApplicationGetIdleTaskMemory+0x28>)
 8000e50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000e56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20000208 	.word	0x20000208
 8000e6c:	2000025c 	.word	0x2000025c

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b0ac      	sub	sp, #176	; 0xb0
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f001 fc5b 	bl	8002730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 f8cd 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 fae7 	bl	8001450 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000e82:	f000 f90f 	bl	80010a4 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000e86:	f000 fa49 	bl	800131c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000e8a:	f000 fab7 	bl	80013fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e8e:	f000 f989 	bl	80011a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e92:	f000 f9ef 	bl	8001274 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e96:	f000 f933 	bl	8001100 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start(&htim4);
  HAL_TIM_Base_Start_IT(&htim1);
 8000e9a:	484d      	ldr	r0, [pc, #308]	; (8000fd0 <main+0x160>)
 8000e9c:	f003 f988 	bl	80041b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	484c      	ldr	r0, [pc, #304]	; (8000fd4 <main+0x164>)
 8000ea4:	f003 fa26 	bl	80042f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	484a      	ldr	r0, [pc, #296]	; (8000fd4 <main+0x164>)
 8000eac:	f003 fa22 	bl	80042f4 <HAL_TIM_PWM_Start>
  Frequency1_Init(&htim3); // HAL_TIM_IC_Start_IT
 8000eb0:	4849      	ldr	r0, [pc, #292]	; (8000fd8 <main+0x168>)
 8000eb2:	f001 f8b7 	bl	8002024 <Frequency1_Init>
  Frequency2_Init(&htim4);
 8000eb6:	4849      	ldr	r0, [pc, #292]	; (8000fdc <main+0x16c>)
 8000eb8:	f001 f8c8 	bl	800204c <Frequency2_Init>
  UART_StartReceive_IT();
 8000ebc:	f001 fad4 	bl	8002468 <UART_StartReceive_IT>
  DHT11_Init(&htim4);
 8000ec0:	4846      	ldr	r0, [pc, #280]	; (8000fdc <main+0x16c>)
 8000ec2:	f000 ff61 	bl	8001d88 <DHT11_Init>
  LCD_Init(&hi2c2);
 8000ec6:	4846      	ldr	r0, [pc, #280]	; (8000fe0 <main+0x170>)
 8000ec8:	f001 fa4a 	bl	8002360 <LCD_Init>

  osMutexDef(dataMutex);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  dataMutexHandle = osMutexCreate(osMutex(dataMutex));
 8000ed8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 fadf 	bl	80064a0 <osMutexCreate>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a3f      	ldr	r2, [pc, #252]	; (8000fe4 <main+0x174>)
 8000ee6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <main+0x178>)
 8000eea:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000eee:	461d      	mov	r5, r3
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000efc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f005 fa4e 	bl	80063a4 <osThreadCreate>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a38      	ldr	r2, [pc, #224]	; (8000fec <main+0x17c>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Sensor_Dht */
  osThreadDef(Task_Sensor_Dht, StartTask_Sensor_Dht, osPriorityAboveNormal, 0, 256);
 8000f0e:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <main+0x180>)
 8000f10:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000f14:	461d      	mov	r5, r3
 8000f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_Sensor_DhtHandle = osThreadCreate(osThread(Task_Sensor_Dht), NULL);
 8000f22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f005 fa3b 	bl	80063a4 <osThreadCreate>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a30      	ldr	r2, [pc, #192]	; (8000ff4 <main+0x184>)
 8000f32:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Fre_1 */
  osThreadDef(Task_Fre_1, StartTaskFre_1, osPriorityHigh, 0, 128);
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <main+0x188>)
 8000f36:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f3a:	461d      	mov	r5, r3
 8000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_Fre_1Handle = osThreadCreate(osThread(Task_Fre_1), NULL);
 8000f48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f005 fa28 	bl	80063a4 <osThreadCreate>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <main+0x18c>)
 8000f58:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Fre_2 */
  osThreadDef(Task_Fre_2, StartTaskFre_2, osPriorityHigh, 0, 128);
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <main+0x190>)
 8000f5c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f60:	461d      	mov	r5, r3
 8000f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_Fre_2Handle = osThreadCreate(osThread(Task_Fre_2), NULL);
 8000f6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 fa15 	bl	80063a4 <osThreadCreate>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <main+0x194>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Lcd */
  osThreadDef(Task_Lcd, StartTask05, osPriorityNormal, 0, 128);
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <main+0x198>)
 8000f82:	f107 041c 	add.w	r4, r7, #28
 8000f86:	461d      	mov	r5, r3
 8000f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_LcdHandle = osThreadCreate(osThread(Task_Lcd), NULL);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f005 fa02 	bl	80063a4 <osThreadCreate>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a1a      	ldr	r2, [pc, #104]	; (800100c <main+0x19c>)
 8000fa4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskUart */
  osThreadDef(TaskUart, StartTaskUart, osPriorityBelowNormal, 0, 128);
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <main+0x1a0>)
 8000fa8:	463c      	mov	r4, r7
 8000faa:	461d      	mov	r5, r3
 8000fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskUartHandle = osThreadCreate(osThread(TaskUart), NULL);
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 f9f1 	bl	80063a4 <osThreadCreate>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <main+0x1a4>)
 8000fc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fc8:	f005 f9e5 	bl	8006396 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0x15c>
 8000fce:	bf00      	nop
 8000fd0:	200004b0 	.word	0x200004b0
 8000fd4:	200004f8 	.word	0x200004f8
 8000fd8:	20000540 	.word	0x20000540
 8000fdc:	20000588 	.word	0x20000588
 8000fe0:	2000045c 	.word	0x2000045c
 8000fe4:	20000630 	.word	0x20000630
 8000fe8:	0800db24 	.word	0x0800db24
 8000fec:	20000618 	.word	0x20000618
 8000ff0:	0800db50 	.word	0x0800db50
 8000ff4:	2000061c 	.word	0x2000061c
 8000ff8:	0800db78 	.word	0x0800db78
 8000ffc:	20000620 	.word	0x20000620
 8001000:	0800dba0 	.word	0x0800dba0
 8001004:	20000624 	.word	0x20000624
 8001008:	0800dbc8 	.word	0x0800dbc8
 800100c:	20000628 	.word	0x20000628
 8001010:	0800dbf0 	.word	0x0800dbf0
 8001014:	2000062c 	.word	0x2000062c

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b090      	sub	sp, #64	; 0x40
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	2228      	movs	r2, #40	; 0x28
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f008 fd41 	bl	8009aae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103a:	2301      	movs	r3, #1
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001042:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001056:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fbfb 	bl	800385c <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800106c:	f000 fb92 	bl	8001794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2102      	movs	r1, #2
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fe68 	bl	8003d60 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001096:	f000 fb7d 	bl	8001794 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3740      	adds	r7, #64	; 0x40
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_I2C2_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_I2C2_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010e2:	f001 ff1f 	bl	8002f24 <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 fb52 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000045c 	.word	0x2000045c
 80010f8:	40005800 	.word	0x40005800
 80010fc:	000186a0 	.word	0x000186a0

08001100 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_TIM1_Init+0x9c>)
 800111e:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <MX_TIM1_Init+0xa0>)
 8001120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_TIM1_Init+0x9c>)
 8001124:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001128:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_TIM1_Init+0x9c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_TIM1_Init+0x9c>)
 8001132:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001136:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_TIM1_Init+0x9c>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_TIM1_Init+0x9c>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_TIM1_Init+0x9c>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <MX_TIM1_Init+0x9c>)
 800114c:	f002 ff96 	bl	800407c <HAL_TIM_Base_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001156:	f000 fb1d 	bl	8001794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4619      	mov	r1, r3
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_TIM1_Init+0x9c>)
 8001168:	f003 fd10 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001172:	f000 fb0f 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_TIM1_Init+0x9c>)
 8001184:	f004 f9f0 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800118e:	f000 fb01 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200004b0 	.word	0x200004b0
 80011a0:	40012c00 	.word	0x40012c00

080011a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	615a      	str	r2, [r3, #20]
 80011c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_TIM2_Init+0xcc>)
 80011c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_TIM2_Init+0xcc>)
 80011d0:	2247      	movs	r2, #71	; 0x47
 80011d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <MX_TIM2_Init+0xcc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_TIM2_Init+0xcc>)
 80011dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_TIM2_Init+0xcc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <MX_TIM2_Init+0xcc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <MX_TIM2_Init+0xcc>)
 80011f0:	f003 f830 	bl	8004254 <HAL_TIM_PWM_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011fa:	f000 facb 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	4619      	mov	r1, r3
 800120c:	4818      	ldr	r0, [pc, #96]	; (8001270 <MX_TIM2_Init+0xcc>)
 800120e:	f004 f9ab 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001218:	f000 fabc 	bl	8001794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121c:	2360      	movs	r3, #96	; 0x60
 800121e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001220:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001224:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_TIM2_Init+0xcc>)
 8001236:	f003 fbe7 	bl	8004a08 <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001240:	f000 faa8 	bl	8001794 <Error_Handler>
  }
  sConfigOC.Pulse = 300;
 8001244:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2204      	movs	r2, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_TIM2_Init+0xcc>)
 8001252:	f003 fbd9 	bl	8004a08 <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800125c:	f000 fa9a 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <MX_TIM2_Init+0xcc>)
 8001262:	f000 fbd9 	bl	8001a18 <HAL_TIM_MspPostInit>

}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200004f8 	.word	0x200004f8

08001274 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_TIM3_Init+0xa0>)
 8001292:	4a21      	ldr	r2, [pc, #132]	; (8001318 <MX_TIM3_Init+0xa4>)
 8001294:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_TIM3_Init+0xa0>)
 8001298:	2247      	movs	r2, #71	; 0x47
 800129a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_TIM3_Init+0xa0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012b6:	4817      	ldr	r0, [pc, #92]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012b8:	f003 f8be 	bl	8004438 <HAL_TIM_IC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012c2:	f000 fa67 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4619      	mov	r1, r3
 80012d4:	480f      	ldr	r0, [pc, #60]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012d6:	f004 f947 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012e0:	f000 fa58 	bl	8001794 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e8:	2301      	movs	r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012fc:	f003 fae8 	bl	80048d0 <HAL_TIM_IC_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001306:	f000 fa45 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000540 	.word	0x20000540
 8001318:	40000400 	.word	0x40000400

0800131c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <MX_TIM4_Init+0xd8>)
 8001348:	4a2b      	ldr	r2, [pc, #172]	; (80013f8 <MX_TIM4_Init+0xdc>)
 800134a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <MX_TIM4_Init+0xd8>)
 800134e:	2247      	movs	r2, #71	; 0x47
 8001350:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <MX_TIM4_Init+0xd8>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff - 1;
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MX_TIM4_Init+0xd8>)
 800135a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800135e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <MX_TIM4_Init+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_TIM4_Init+0xd8>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800136c:	4821      	ldr	r0, [pc, #132]	; (80013f4 <MX_TIM4_Init+0xd8>)
 800136e:	f002 fe85 	bl	800407c <HAL_TIM_Base_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001378:	f000 fa0c 	bl	8001794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	4619      	mov	r1, r3
 8001388:	481a      	ldr	r0, [pc, #104]	; (80013f4 <MX_TIM4_Init+0xd8>)
 800138a:	f003 fbff 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001394:	f000 f9fe 	bl	8001794 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001398:	4816      	ldr	r0, [pc, #88]	; (80013f4 <MX_TIM4_Init+0xd8>)
 800139a:	f003 f84d 	bl	8004438 <HAL_TIM_IC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f000 f9f6 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4619      	mov	r1, r3
 80013b6:	480f      	ldr	r0, [pc, #60]	; (80013f4 <MX_TIM4_Init+0xd8>)
 80013b8:	f004 f8d6 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80013c2:	f000 f9e7 	bl	8001794 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ca:	2301      	movs	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_TIM4_Init+0xd8>)
 80013de:	f003 fa77 	bl	80048d0 <HAL_TIM_IC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80013e8:	f000 f9d4 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000588 	.word	0x20000588
 80013f8:	40000800 	.word	0x40000800

080013fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART2_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001434:	f004 f908 	bl	8005648 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f000 f9a9 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200005d0 	.word	0x200005d0
 800144c:	40004400 	.word	0x40004400

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <MX_GPIO_Init+0x90>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <MX_GPIO_Init+0x90>)
 800146a:	f043 0320 	orr.w	r3, r3, #32
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_GPIO_Init+0x90>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0320 	and.w	r3, r3, #32
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_GPIO_Init+0x90>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <MX_GPIO_Init+0x90>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_GPIO_Init+0x90>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <MX_GPIO_Init+0x90>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <MX_GPIO_Init+0x90>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_GPIO_Init+0x90>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <MX_GPIO_Init+0x94>)
 80014b4:	f001 fd1d 	bl	8002ef2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80014b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4619      	mov	r1, r3
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_GPIO_Init+0x94>)
 80014d2:	f001 fb73 	bl	8002bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010800 	.word	0x40010800

080014e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f004 ffc1 	bl	8006478 <osDelay>
 80014f6:	e7fb      	b.n	80014f0 <StartDefaultTask+0x8>

080014f8 <StartTask_Sensor_Dht>:
////	        osDelay(2000);
////	    }
//  /* USER CODE END StartTaskUart */
//}
void StartTask_Sensor_Dht(void const * argument)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	UART_SendString(&huart2, "StartTask_DHT\r\n");
 8001500:	4918      	ldr	r1, [pc, #96]	; (8001564 <StartTask_Sensor_Dht+0x6c>)
 8001502:	4819      	ldr	r0, [pc, #100]	; (8001568 <StartTask_Sensor_Dht+0x70>)
 8001504:	f000 ff84 	bl	8002410 <UART_SendString>
    float temperature = 0, humidity = 0;
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
    for(;;)
    {
    	 UART_SendString(&huart2, "Task_DHT: Loop\r\n");
 8001514:	4915      	ldr	r1, [pc, #84]	; (800156c <StartTask_Sensor_Dht+0x74>)
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <StartTask_Sensor_Dht+0x70>)
 8001518:	f000 ff7a 	bl	8002410 <UART_SendString>
        if(DHT11_Read(&temperature, &humidity) == 1) {
 800151c:	f107 0208 	add.w	r2, r7, #8
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fd32 	bl	8001f90 <DHT11_Read>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d011      	beq.n	8001556 <StartTask_Sensor_Dht+0x5e>
            osMutexWait(dataMutexHandle, osWaitForever);
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <StartTask_Sensor_Dht+0x78>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f04f 31ff 	mov.w	r1, #4294967295
 800153a:	4618      	mov	r0, r3
 800153c:	f004 ffc8 	bl	80064d0 <osMutexWait>
            sharedData.temperature = temperature;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <StartTask_Sensor_Dht+0x7c>)
 8001544:	6013      	str	r3, [r2, #0]
            sharedData.humidity = humidity;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <StartTask_Sensor_Dht+0x7c>)
 800154a:	6053      	str	r3, [r2, #4]
            osMutexRelease(dataMutexHandle);
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <StartTask_Sensor_Dht+0x78>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f005 f80b 	bl	800656c <osMutexRelease>
        }
        osDelay(delayTaskDHT);
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <StartTask_Sensor_Dht+0x80>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 ff8c 	bl	8006478 <osDelay>
    	 UART_SendString(&huart2, "Task_DHT: Loop\r\n");
 8001560:	e7d8      	b.n	8001514 <StartTask_Sensor_Dht+0x1c>
 8001562:	bf00      	nop
 8001564:	0800dc0c 	.word	0x0800dc0c
 8001568:	200005d0 	.word	0x200005d0
 800156c:	0800dc1c 	.word	0x0800dc1c
 8001570:	20000630 	.word	0x20000630
 8001574:	20000634 	.word	0x20000634
 8001578:	20000000 	.word	0x20000000

0800157c <StartTaskFre_1>:
    }
}
void StartTaskFre_1(void const * argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	UART_SendString(&huart2, "StartTask_Fre1\r\n");
 8001584:	490f      	ldr	r1, [pc, #60]	; (80015c4 <StartTaskFre_1+0x48>)
 8001586:	4810      	ldr	r0, [pc, #64]	; (80015c8 <StartTaskFre_1+0x4c>)
 8001588:	f000 ff42 	bl	8002410 <UART_SendString>
    for(;;)
    {
    	 UART_SendString(&huart2, "Task_Fre1: Loop\r\n");
 800158c:	490f      	ldr	r1, [pc, #60]	; (80015cc <StartTaskFre_1+0x50>)
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <StartTaskFre_1+0x4c>)
 8001590:	f000 ff3e 	bl	8002410 <UART_SendString>
        osMutexWait(dataMutexHandle, osWaitForever);
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <StartTaskFre_1+0x54>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	4618      	mov	r0, r3
 800159e:	f004 ff97 	bl	80064d0 <osMutexWait>
        sharedData.fre1 = Frequency1_Read();
 80015a2:	f000 fd67 	bl	8002074 <Frequency1_Read>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <StartTaskFre_1+0x58>)
 80015aa:	6093      	str	r3, [r2, #8]
        osMutexRelease(dataMutexHandle);
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <StartTaskFre_1+0x54>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 ffdb 	bl	800656c <osMutexRelease>
        osDelay(delayTaskFre1);
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <StartTaskFre_1+0x5c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 ff5c 	bl	8006478 <osDelay>
    	 UART_SendString(&huart2, "Task_Fre1: Loop\r\n");
 80015c0:	e7e4      	b.n	800158c <StartTaskFre_1+0x10>
 80015c2:	bf00      	nop
 80015c4:	0800dc30 	.word	0x0800dc30
 80015c8:	200005d0 	.word	0x200005d0
 80015cc:	0800dc44 	.word	0x0800dc44
 80015d0:	20000630 	.word	0x20000630
 80015d4:	20000634 	.word	0x20000634
 80015d8:	20000004 	.word	0x20000004

080015dc <StartTaskFre_2>:
    }
}
void StartTaskFre_2(void const * argument)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	UART_SendString(&huart2, "StartTask_Fre2\r\n");
 80015e4:	490f      	ldr	r1, [pc, #60]	; (8001624 <StartTaskFre_2+0x48>)
 80015e6:	4810      	ldr	r0, [pc, #64]	; (8001628 <StartTaskFre_2+0x4c>)
 80015e8:	f000 ff12 	bl	8002410 <UART_SendString>
    for(;;)
    {
    	 UART_SendString(&huart2, "Task_Fre2: Loop\r\n");
 80015ec:	490f      	ldr	r1, [pc, #60]	; (800162c <StartTaskFre_2+0x50>)
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <StartTaskFre_2+0x4c>)
 80015f0:	f000 ff0e 	bl	8002410 <UART_SendString>
        osMutexWait(dataMutexHandle, osWaitForever);
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <StartTaskFre_2+0x54>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 ff67 	bl	80064d0 <osMutexWait>
        sharedData.fre2 = Frequency2_Read();
 8001602:	f000 fd41 	bl	8002088 <Frequency2_Read>
 8001606:	4603      	mov	r3, r0
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <StartTaskFre_2+0x58>)
 800160a:	60d3      	str	r3, [r2, #12]
        osMutexRelease(dataMutexHandle);
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <StartTaskFre_2+0x54>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f004 ffab 	bl	800656c <osMutexRelease>
        osDelay(delayTaskFre2);
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <StartTaskFre_2+0x5c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f004 ff2c 	bl	8006478 <osDelay>
    	 UART_SendString(&huart2, "Task_Fre2: Loop\r\n");
 8001620:	e7e4      	b.n	80015ec <StartTaskFre_2+0x10>
 8001622:	bf00      	nop
 8001624:	0800dc58 	.word	0x0800dc58
 8001628:	200005d0 	.word	0x200005d0
 800162c:	0800dc6c 	.word	0x0800dc6c
 8001630:	20000630 	.word	0x20000630
 8001634:	20000634 	.word	0x20000634
 8001638:	20000008 	.word	0x20000008

0800163c <StartTask05>:
    }
}
void StartTask05(void const * argument)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af02      	add	r7, sp, #8
 8001642:	6078      	str	r0, [r7, #4]
	UART_SendString(&huart2, "StartTask_LCD\r\n");
 8001644:	4917      	ldr	r1, [pc, #92]	; (80016a4 <StartTask05+0x68>)
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <StartTask05+0x6c>)
 8001648:	f000 fee2 	bl	8002410 <UART_SendString>
    SensorData_t temp;
    for(;;)
    {
    	 UART_SendString(&huart2, "Task_LCD: Loop\r\n");
 800164c:	4917      	ldr	r1, [pc, #92]	; (80016ac <StartTask05+0x70>)
 800164e:	4816      	ldr	r0, [pc, #88]	; (80016a8 <StartTask05+0x6c>)
 8001650:	f000 fede 	bl	8002410 <UART_SendString>
        osMutexWait(dataMutexHandle, osWaitForever);
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <StartTask05+0x74>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	4618      	mov	r0, r3
 800165e:	f004 ff37 	bl	80064d0 <osMutexWait>
        temp = sharedData;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <StartTask05+0x78>)
 8001664:	f107 0408 	add.w	r4, r7, #8
 8001668:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800166a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        osMutexRelease(dataMutexHandle);
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <StartTask05+0x74>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f004 ff7a 	bl	800656c <osMutexRelease>

        LCD_PrintFloat(0, 0, "Temp", temp.temperature, "C");
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <StartTask05+0x7c>)
 800167c:	9200      	str	r2, [sp, #0]
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <StartTask05+0x80>)
 8001680:	2100      	movs	r1, #0
 8001682:	2000      	movs	r0, #0
 8001684:	f000 fe8e 	bl	80023a4 <LCD_PrintFloat>
        LCD_PrintFloat(1, 0, "Hum", temp.humidity, "%");
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <StartTask05+0x84>)
 800168c:	9200      	str	r2, [sp, #0]
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <StartTask05+0x88>)
 8001690:	2100      	movs	r1, #0
 8001692:	2001      	movs	r0, #1
 8001694:	f000 fe86 	bl	80023a4 <LCD_PrintFloat>
        osDelay(delayTaskLCD);
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <StartTask05+0x8c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f004 feeb 	bl	8006478 <osDelay>
    	 UART_SendString(&huart2, "Task_LCD: Loop\r\n");
 80016a2:	e7d3      	b.n	800164c <StartTask05+0x10>
 80016a4:	0800dc80 	.word	0x0800dc80
 80016a8:	200005d0 	.word	0x200005d0
 80016ac:	0800dc90 	.word	0x0800dc90
 80016b0:	20000630 	.word	0x20000630
 80016b4:	20000634 	.word	0x20000634
 80016b8:	0800dcac 	.word	0x0800dcac
 80016bc:	0800dca4 	.word	0x0800dca4
 80016c0:	0800dcb4 	.word	0x0800dcb4
 80016c4:	0800dcb0 	.word	0x0800dcb0
 80016c8:	2000000c 	.word	0x2000000c

080016cc <StartTaskUart>:
    }
}
void StartTaskUart(void const * argument)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	UART_SendString(&huart2, "StartTask_UART\r\n");
 80016d4:	4925      	ldr	r1, [pc, #148]	; (800176c <StartTaskUart+0xa0>)
 80016d6:	4826      	ldr	r0, [pc, #152]	; (8001770 <StartTaskUart+0xa4>)
 80016d8:	f000 fe9a 	bl	8002410 <UART_SendString>
    SensorData_t temp;
    for(;;)
    {
    	 UART_SendString(&huart2, "Task_UART: Loop\r\n");
 80016dc:	4925      	ldr	r1, [pc, #148]	; (8001774 <StartTaskUart+0xa8>)
 80016de:	4824      	ldr	r0, [pc, #144]	; (8001770 <StartTaskUart+0xa4>)
 80016e0:	f000 fe96 	bl	8002410 <UART_SendString>
        osMutexWait(dataMutexHandle, osWaitForever);
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <StartTaskUart+0xac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	4618      	mov	r0, r3
 80016ee:	f004 feef 	bl	80064d0 <osMutexWait>
        temp = sharedData;
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <StartTaskUart+0xb0>)
 80016f4:	f107 0408 	add.w	r4, r7, #8
 80016f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        osMutexRelease(dataMutexHandle);
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <StartTaskUart+0xac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f004 ff32 	bl	800656c <osMutexRelease>
        UART_SendString(&huart2, " \r\n Temp: ");
 8001708:	491d      	ldr	r1, [pc, #116]	; (8001780 <StartTaskUart+0xb4>)
 800170a:	4819      	ldr	r0, [pc, #100]	; (8001770 <StartTaskUart+0xa4>)
 800170c:	f000 fe80 	bl	8002410 <UART_SendString>
        UART_SendInt(&huart2, temp.temperature);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb36 	bl	8000d84 <__aeabi_f2iz>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	4814      	ldr	r0, [pc, #80]	; (8001770 <StartTaskUart+0xa4>)
 800171e:	f000 fe8b 	bl	8002438 <UART_SendInt>
        UART_SendString(&huart2, " | Hum: ");
 8001722:	4918      	ldr	r1, [pc, #96]	; (8001784 <StartTaskUart+0xb8>)
 8001724:	4812      	ldr	r0, [pc, #72]	; (8001770 <StartTaskUart+0xa4>)
 8001726:	f000 fe73 	bl	8002410 <UART_SendString>
        UART_SendInt(&huart2, temp.humidity);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fb29 	bl	8000d84 <__aeabi_f2iz>
 8001732:	4603      	mov	r3, r0
 8001734:	4619      	mov	r1, r3
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <StartTaskUart+0xa4>)
 8001738:	f000 fe7e 	bl	8002438 <UART_SendInt>
        UART_SendString(&huart2, " | Fre1: ");
 800173c:	4912      	ldr	r1, [pc, #72]	; (8001788 <StartTaskUart+0xbc>)
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <StartTaskUart+0xa4>)
 8001740:	f000 fe66 	bl	8002410 <UART_SendString>
        UART_SendInt(&huart2, temp.fre1);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4619      	mov	r1, r3
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <StartTaskUart+0xa4>)
 800174a:	f000 fe75 	bl	8002438 <UART_SendInt>
        UART_SendString(&huart2, " | Fre2: ");
 800174e:	490f      	ldr	r1, [pc, #60]	; (800178c <StartTaskUart+0xc0>)
 8001750:	4807      	ldr	r0, [pc, #28]	; (8001770 <StartTaskUart+0xa4>)
 8001752:	f000 fe5d 	bl	8002410 <UART_SendString>
        UART_SendInt(&huart2, temp.fre2);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4619      	mov	r1, r3
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <StartTaskUart+0xa4>)
 800175c:	f000 fe6c 	bl	8002438 <UART_SendInt>
        osDelay(delayTaskUART);
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <StartTaskUart+0xc4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fe87 	bl	8006478 <osDelay>
    	 UART_SendString(&huart2, "Task_UART: Loop\r\n");
 800176a:	e7b7      	b.n	80016dc <StartTaskUart+0x10>
 800176c:	0800dcb8 	.word	0x0800dcb8
 8001770:	200005d0 	.word	0x200005d0
 8001774:	0800dccc 	.word	0x0800dccc
 8001778:	20000630 	.word	0x20000630
 800177c:	20000634 	.word	0x20000634
 8001780:	0800dce0 	.word	0x0800dce0
 8001784:	0800dcec 	.word	0x0800dcec
 8001788:	0800dcf8 	.word	0x0800dcf8
 800178c:	0800dd04 	.word	0x0800dd04
 8001790:	20000010 	.word	0x20000010

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_MspInit+0x68>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_MspInit+0x68>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6193      	str	r3, [r2, #24]
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_MspInit+0x68>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_MspInit+0x68>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a11      	ldr	r2, [pc, #68]	; (8001808 <HAL_MspInit+0x68>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_MspInit+0x68>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	210f      	movs	r1, #15
 80017da:	f06f 0001 	mvn.w	r0, #1
 80017de:	f001 f904 	bl	80029ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_MspInit+0x6c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_MspInit+0x6c>)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000

08001810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a16      	ldr	r2, [pc, #88]	; (8001884 <HAL_I2C_MspInit+0x74>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d124      	bne.n	800187a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_I2C_MspInit+0x78>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_I2C_MspInit+0x78>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_I2C_MspInit+0x78>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001848:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800184c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184e:	2312      	movs	r3, #18
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4619      	mov	r1, r3
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <HAL_I2C_MspInit+0x7c>)
 800185e:	f001 f9ad 	bl	8002bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_I2C_MspInit+0x78>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <HAL_I2C_MspInit+0x78>)
 8001868:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_I2C_MspInit+0x78>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3720      	adds	r7, #32
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40005800 	.word	0x40005800
 8001888:	40021000 	.word	0x40021000
 800188c:	40010c00 	.word	0x40010c00

08001890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0318 	add.w	r3, r7, #24
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d114      	bne.n	80018da <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a24      	ldr	r2, [pc, #144]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2105      	movs	r1, #5
 80018cc:	2019      	movs	r0, #25
 80018ce:	f001 f88c 	bl	80029ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018d2:	2019      	movs	r0, #25
 80018d4:	f001 f8a5 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018d8:	e030      	b.n	800193c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM4)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_TIM_Base_MspInit+0xbc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d12b      	bne.n	800193c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	61d3      	str	r3, [r2, #28]
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001914:	2340      	movs	r3, #64	; 0x40
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4619      	mov	r1, r3
 8001926:	480a      	ldr	r0, [pc, #40]	; (8001950 <HAL_TIM_Base_MspInit+0xc0>)
 8001928:	f001 f948 	bl	8002bbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2105      	movs	r1, #5
 8001930:	201e      	movs	r0, #30
 8001932:	f001 f85a 	bl	80029ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001936:	201e      	movs	r0, #30
 8001938:	f001 f873 	bl	8002a22 <HAL_NVIC_EnableIRQ>
}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	; 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40012c00 	.word	0x40012c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40000800 	.word	0x40000800
 8001950:	40010c00 	.word	0x40010c00

08001954 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001964:	d10b      	bne.n	800197e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_TIM_PWM_MspInit+0x34>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_TIM_PWM_MspInit+0x34>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_TIM_PWM_MspInit+0x34>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000

0800198c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_TIM_IC_MspInit+0x80>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d12b      	bne.n	8001a04 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_TIM_IC_MspInit+0x84>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_TIM_IC_MspInit+0x84>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	61d3      	str	r3, [r2, #28]
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_TIM_IC_MspInit+0x84>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_TIM_IC_MspInit+0x84>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_TIM_IC_MspInit+0x84>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_TIM_IC_MspInit+0x84>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019dc:	2340      	movs	r3, #64	; 0x40
 80019de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	4809      	ldr	r0, [pc, #36]	; (8001a14 <HAL_TIM_IC_MspInit+0x88>)
 80019f0:	f001 f8e4 	bl	8002bbc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2105      	movs	r1, #5
 80019f8:	201d      	movs	r0, #29
 80019fa:	f000 fff6 	bl	80029ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019fe:	201d      	movs	r0, #29
 8001a00:	f001 f80f 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40010800 	.word	0x40010800

08001a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a36:	d117      	bne.n	8001a68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_TIM_MspPostInit+0x58>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <HAL_TIM_MspPostInit+0x58>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_TIM_MspPostInit+0x58>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a50:	2303      	movs	r3, #3
 8001a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	4804      	ldr	r0, [pc, #16]	; (8001a74 <HAL_TIM_MspPostInit+0x5c>)
 8001a64:	f001 f8aa 	bl	8002bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010800 	.word	0x40010800

08001a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_UART_MspInit+0x98>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d137      	bne.n	8001b08 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa2:	61d3      	str	r3, [r2, #28]
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480f      	ldr	r0, [pc, #60]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001adc:	f001 f86e 	bl	8002bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	4619      	mov	r1, r3
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001af4:	f001 f862 	bl	8002bbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2105      	movs	r1, #5
 8001afc:	2026      	movs	r0, #38	; 0x26
 8001afe:	f000 ff74 	bl	80029ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b02:	2026      	movs	r0, #38	; 0x26
 8001b04:	f000 ff8d 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010800 	.word	0x40010800

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler+0x4>

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4a:	f000 fe37 	bl	80027bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b4e:	f006 f9c1 	bl	8007ed4 <xTaskGetSchedulerState>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d001      	beq.n	8001b5c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b58:	f006 fd4e 	bl	80085f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <TIM1_UP_IRQHandler+0x10>)
 8001b66:	f002 fdc3 	bl	80046f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200004b0 	.word	0x200004b0

08001b74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <TIM3_IRQHandler+0x10>)
 8001b7a:	f002 fdb9 	bl	80046f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000540 	.word	0x20000540

08001b88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <TIM4_IRQHandler+0x10>)
 8001b8e:	f002 fdaf 	bl	80046f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000588 	.word	0x20000588

08001b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <USART2_IRQHandler+0x10>)
 8001ba2:	f003 fe51 	bl	8005848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200005d0 	.word	0x200005d0

08001bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_kill>:

int _kill(int pid, int sig)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc8:	f007 ffd6 	bl	8009b78 <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2216      	movs	r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_exit>:

void _exit (int status)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffe7 	bl	8001bbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf0:	e7fe      	b.n	8001bf0 <_exit+0x12>

08001bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e00a      	b.n	8001c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c04:	f3af 8000 	nop.w
 8001c08:	4601      	mov	r1, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf0      	blt.n	8001c04 <_read+0x12>
  }

  return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e009      	b.n	8001c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf1      	blt.n	8001c3e <_write+0x12>
  }
  return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_close>:

int _close(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <_isatty>:

int _isatty(int file)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f007 ff40 	bl	8009b78 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20005000 	.word	0x20005000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	20000644 	.word	0x20000644
 8001d2c:	200020d0 	.word	0x200020d0

08001d30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d3c:	f7ff fff8 	bl	8001d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d44:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d58:	4c09      	ldr	r4, [pc, #36]	; (8001d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d66:	f007 ff0d 	bl	8009b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6a:	f7ff f881 	bl	8000e70 <main>
  bx lr
 8001d6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001d78:	0800e2fc 	.word	0x0800e2fc
  ldr r2, =_sbss
 8001d7c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001d80:	200020d0 	.word	0x200020d0

08001d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_2_IRQHandler>
	...

08001d88 <DHT11_Init>:
float Temperature = 0;
float Humidity = 0;

static TIM_HandleTypeDef *dht_timer = NULL;

void DHT11_Init(TIM_HandleTypeDef *htim) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    dht_timer = htim;
 8001d90:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <DHT11_Init+0x20>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start(dht_timer);
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <DHT11_Init+0x20>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 f9be 	bl	800411c <HAL_TIM_Base_Start>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000648 	.word	0x20000648

08001dac <delay_us>:

static void delay_us(uint16_t time) {
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(dht_timer, 0);
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <delay_us+0x30>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(dht_timer) < time);
 8001dc0:	bf00      	nop
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <delay_us+0x30>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3f8      	bcc.n	8001dc2 <delay_us+0x16>
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000648 	.word	0x20000648

08001de0 <Set_Pin_Output>:

static void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2302      	movs	r3, #2
 8001e04:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fed5 	bl	8002bbc <HAL_GPIO_Init>
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <Set_Pin_Input>:

static void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 feb8 	bl	8002bbc <HAL_GPIO_Init>
}
 8001e4c:	bf00      	nop
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <DHT11_Start>:

void DHT11_Start(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
    Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 8001e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e5c:	480d      	ldr	r0, [pc, #52]	; (8001e94 <DHT11_Start+0x40>)
 8001e5e:	f7ff ffbf 	bl	8001de0 <Set_Pin_Output>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e68:	480a      	ldr	r0, [pc, #40]	; (8001e94 <DHT11_Start+0x40>)
 8001e6a:	f001 f842 	bl	8002ef2 <HAL_GPIO_WritePin>
//    HAL_Delay(18);
    osDelay(18);
 8001e6e:	2012      	movs	r0, #18
 8001e70:	f004 fb02 	bl	8006478 <osDelay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8001e74:	2201      	movs	r2, #1
 8001e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <DHT11_Start+0x40>)
 8001e7c:	f001 f839 	bl	8002ef2 <HAL_GPIO_WritePin>
    delay_us(20);
 8001e80:	2014      	movs	r0, #20
 8001e82:	f7ff ff93 	bl	8001dac <delay_us>
    Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8001e86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <DHT11_Start+0x40>)
 8001e8c:	f7ff ffc5 	bl	8001e1a <Set_Pin_Input>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40010800 	.word	0x40010800

08001e98 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	71fb      	strb	r3, [r7, #7]
    delay_us(40);
 8001ea2:	2028      	movs	r0, #40	; 0x28
 8001ea4:	f7ff ff82 	bl	8001dac <delay_us>
    if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 8001ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eac:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <DHT11_Check_Response+0x58>)
 8001eae:	f001 f809 	bl	8002ec4 <HAL_GPIO_ReadPin>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10c      	bne.n	8001ed2 <DHT11_Check_Response+0x3a>
        delay_us(80);
 8001eb8:	2050      	movs	r0, #80	; 0x50
 8001eba:	f7ff ff77 	bl	8001dac <delay_us>
        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) response = 1;
 8001ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec2:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <DHT11_Check_Response+0x58>)
 8001ec4:	f000 fffe 	bl	8002ec4 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <DHT11_Check_Response+0x3a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	71fb      	strb	r3, [r7, #7]
    }
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8001ed2:	bf00      	nop
 8001ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <DHT11_Check_Response+0x58>)
 8001eda:	f000 fff3 	bl	8002ec4 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f7      	bne.n	8001ed4 <DHT11_Check_Response+0x3c>
    return response;
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40010800 	.word	0x40010800

08001ef4 <DHT11_Read_Byte>:

uint8_t DHT11_Read_Byte(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
    uint8_t i, data = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	e03a      	b.n	8001f7a <DHT11_Read_Byte+0x86>
        while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8001f04:	bf00      	nop
 8001f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f0a:	4820      	ldr	r0, [pc, #128]	; (8001f8c <DHT11_Read_Byte+0x98>)
 8001f0c:	f000 ffda 	bl	8002ec4 <HAL_GPIO_ReadPin>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f7      	beq.n	8001f06 <DHT11_Read_Byte+0x12>
        delay_us(40);
 8001f16:	2028      	movs	r0, #40	; 0x28
 8001f18:	f7ff ff48 	bl	8001dac <delay_us>
        if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f20:	481a      	ldr	r0, [pc, #104]	; (8001f8c <DHT11_Read_Byte+0x98>)
 8001f22:	f000 ffcf 	bl	8002ec4 <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10e      	bne.n	8001f4a <DHT11_Read_Byte+0x56>
            data &= ~(1 << (7 - i));
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2201      	movs	r2, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f42:	4013      	ands	r3, r2
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	71bb      	strb	r3, [r7, #6]
 8001f48:	e014      	b.n	8001f74 <DHT11_Read_Byte+0x80>
        else {
            data |= (1 << (7 - i));
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f1c3 0307 	rsb	r3, r3, #7
 8001f50:	2201      	movs	r2, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	b25a      	sxtb	r2, r3
 8001f58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	71bb      	strb	r3, [r7, #6]
            while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8001f62:	bf00      	nop
 8001f64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f68:	4808      	ldr	r0, [pc, #32]	; (8001f8c <DHT11_Read_Byte+0x98>)
 8001f6a:	f000 ffab 	bl	8002ec4 <HAL_GPIO_ReadPin>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f7      	bne.n	8001f64 <DHT11_Read_Byte+0x70>
    for (i = 0; i < 8; i++) {
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	3301      	adds	r3, #1
 8001f78:	71fb      	strb	r3, [r7, #7]
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b07      	cmp	r3, #7
 8001f7e:	d9c1      	bls.n	8001f04 <DHT11_Read_Byte+0x10>
        }
    }
    return data;
 8001f80:	79bb      	ldrb	r3, [r7, #6]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40010800 	.word	0x40010800

08001f90 <DHT11_Read>:

bool DHT11_Read(float *temperature, float *humidity)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
    uint8_t rh1, rh2, temp1, temp2, sum;

    DHT11_Start();
 8001f9a:	f7ff ff5b 	bl	8001e54 <DHT11_Start>
    if (DHT11_Check_Response()) {
 8001f9e:	f7ff ff7b 	bl	8001e98 <DHT11_Check_Response>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d02d      	beq.n	8002004 <DHT11_Read+0x74>
        rh1 = DHT11_Read_Byte();
 8001fa8:	f7ff ffa4 	bl	8001ef4 <DHT11_Read_Byte>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
        rh2 = DHT11_Read_Byte();
 8001fb0:	f7ff ffa0 	bl	8001ef4 <DHT11_Read_Byte>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73bb      	strb	r3, [r7, #14]
        temp1 = DHT11_Read_Byte();
 8001fb8:	f7ff ff9c 	bl	8001ef4 <DHT11_Read_Byte>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	737b      	strb	r3, [r7, #13]
        temp2 = DHT11_Read_Byte();
 8001fc0:	f7ff ff98 	bl	8001ef4 <DHT11_Read_Byte>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	733b      	strb	r3, [r7, #12]
        sum = DHT11_Read_Byte();
 8001fc8:	f7ff ff94 	bl	8001ef4 <DHT11_Read_Byte>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	72fb      	strb	r3, [r7, #11]

        if (sum == (rh1 + rh2 + temp1 + temp2)) {
 8001fd0:	7afa      	ldrb	r2, [r7, #11]
 8001fd2:	7bf9      	ldrb	r1, [r7, #15]
 8001fd4:	7bbb      	ldrb	r3, [r7, #14]
 8001fd6:	4419      	add	r1, r3
 8001fd8:	7b7b      	ldrb	r3, [r7, #13]
 8001fda:	4419      	add	r1, r3
 8001fdc:	7b3b      	ldrb	r3, [r7, #12]
 8001fde:	440b      	add	r3, r1
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d10f      	bne.n	8002004 <DHT11_Read+0x74>
            *temperature = (float)temp1;
 8001fe4:	7b7b      	ldrb	r3, [r7, #13]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fe74 	bl	8000cd4 <__aeabi_ui2f>
 8001fec:	4602      	mov	r2, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]
            *humidity = (float)rh1;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fe6d 	bl	8000cd4 <__aeabi_ui2f>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	601a      	str	r2, [r3, #0]
            return true;
 8002000:	2301      	movs	r3, #1
 8002002:	e006      	b.n	8002012 <DHT11_Read+0x82>
        }
    }

    *temperature = -100.0f;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <DHT11_Read+0x8c>)
 8002008:	601a      	str	r2, [r3, #0]
    *humidity = -1.0f;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <DHT11_Read+0x90>)
 800200e:	601a      	str	r2, [r3, #0]
    return false;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	c2c80000 	.word	0xc2c80000
 8002020:	bf800000 	.word	0xbf800000

08002024 <Frequency1_Init>:
static uint8_t  Is2_First = 0;
static volatile uint16_t IC2_Overflow = 0;
static uint32_t Freq2 = 0;

void Frequency1_Init(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    htim1 = htim;
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <Frequency1_Init+0x24>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
    HAL_TIM_IC_Start_IT(htim1, TIM_CHANNEL_1);
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <Frequency1_Init+0x24>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f002 fa4d 	bl	80044d8 <HAL_TIM_IC_Start_IT>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000064c 	.word	0x2000064c

0800204c <Frequency2_Init>:

void Frequency2_Init(TIM_HandleTypeDef *htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
    htim2 = htim;
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <Frequency2_Init+0x24>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
    HAL_TIM_IC_Start_IT(htim2, TIM_CHANNEL_1);
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <Frequency2_Init+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fa39 	bl	80044d8 <HAL_TIM_IC_Start_IT>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000650 	.word	0x20000650

08002074 <Frequency1_Read>:

uint32_t Frequency1_Read(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
    return Freq1;
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <Frequency1_Read+0x10>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20000660 	.word	0x20000660

08002088 <Frequency2_Read>:

uint32_t Frequency2_Read(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
    return Freq2;
 800208c:	4b02      	ldr	r3, [pc, #8]	; (8002098 <Frequency2_Read+0x10>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	20000670 	.word	0x20000670

0800209c <HAL_TIM_IC_CaptureCallback>:
    if (htim->Instance == htim2->Instance)
        IC2_Overflow++;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim1->Instance && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d14b      	bne.n	800214a <HAL_TIM_IC_CaptureCallback+0xae>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7f1b      	ldrb	r3, [r3, #28]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d147      	bne.n	800214a <HAL_TIM_IC_CaptureCallback+0xae>
    {
        if (!Is1_First)
 80020ba:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_TIM_IC_CaptureCallback+0x160>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_TIM_IC_CaptureCallback+0x42>
        {
            IC1_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80020c2:	2100      	movs	r1, #0
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f002 fe29 	bl	8004d1c <HAL_TIM_ReadCapturedValue>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_TIM_IC_CaptureCallback+0x164>)
 80020ce:	6013      	str	r3, [r2, #0]
            IC1_Overflow = 0;
 80020d0:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_TIM_IC_CaptureCallback+0x168>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	801a      	strh	r2, [r3, #0]
            Is1_First = 1;
 80020d6:	4b49      	ldr	r3, [pc, #292]	; (80021fc <HAL_TIM_IC_CaptureCallback+0x160>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e035      	b.n	800214a <HAL_TIM_IC_CaptureCallback+0xae>
        }
        else
        {
            IC1_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80020de:	2100      	movs	r1, #0
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f002 fe1b 	bl	8004d1c <HAL_TIM_ReadCapturedValue>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4a47      	ldr	r2, [pc, #284]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80020ea:	6013      	str	r3, [r2, #0]
            uint32_t diff = (IC1_Val2 >= IC1_Val1)
 80020ec:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_TIM_IC_CaptureCallback+0x164>)
 80020f2:	681b      	ldr	r3, [r3, #0]
                            ? (IC1_Val2 - IC1_Val1 + IC1_Overflow * 0x10000)
                            : (0x10000 + IC1_Val2 - IC1_Val1 + (IC1_Overflow - 1) * 0x10000);
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d30a      	bcc.n	800210e <HAL_TIM_IC_CaptureCallback+0x72>
                            ? (IC1_Val2 - IC1_Val1 + IC1_Overflow * 0x10000)
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b40      	ldr	r3, [pc, #256]	; (8002200 <HAL_TIM_IC_CaptureCallback+0x164>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	4a40      	ldr	r2, [pc, #256]	; (8002204 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002104:	8812      	ldrh	r2, [r2, #0]
 8002106:	b292      	uxth	r2, r2
 8002108:	0412      	lsls	r2, r2, #16
                            : (0x10000 + IC1_Val2 - IC1_Val1 + (IC1_Overflow - 1) * 0x10000);
 800210a:	4413      	add	r3, r2
 800210c:	e00c      	b.n	8002128 <HAL_TIM_IC_CaptureCallback+0x8c>
 800210e:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_TIM_IC_CaptureCallback+0x164>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4a3a      	ldr	r2, [pc, #232]	; (8002204 <HAL_TIM_IC_CaptureCallback+0x168>)
 800211a:	8812      	ldrh	r2, [r2, #0]
 800211c:	b292      	uxth	r2, r2
 800211e:	3a01      	subs	r2, #1
 8002120:	0412      	lsls	r2, r2, #16
 8002122:	4413      	add	r3, r2
 8002124:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
            uint32_t diff = (IC1_Val2 >= IC1_Val1)
 8002128:	60fb      	str	r3, [r7, #12]
            if(diff == 2000) {
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002130:	d102      	bne.n	8002138 <HAL_TIM_IC_CaptureCallback+0x9c>
            	diff = diff/2;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
            }

            Freq1 = (1000000 / diff);
 8002138:	4a34      	ldr	r2, [pc, #208]	; (800220c <HAL_TIM_IC_CaptureCallback+0x170>)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	4a33      	ldr	r2, [pc, #204]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002142:	6013      	str	r3, [r2, #0]
            Is1_First = 0;
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_TIM_IC_CaptureCallback+0x160>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
        }
    }

    if (htim->Instance == htim2->Instance && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d14b      	bne.n	80021f0 <HAL_TIM_IC_CaptureCallback+0x154>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7f1b      	ldrb	r3, [r3, #28]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d147      	bne.n	80021f0 <HAL_TIM_IC_CaptureCallback+0x154>
    {
        if (!Is2_First)
 8002160:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10d      	bne.n	8002184 <HAL_TIM_IC_CaptureCallback+0xe8>
        {
            IC2_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002168:	2100      	movs	r1, #0
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f002 fdd6 	bl	8004d1c <HAL_TIM_ReadCapturedValue>
 8002170:	4603      	mov	r3, r0
 8002172:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_TIM_IC_CaptureCallback+0x180>)
 8002174:	6013      	str	r3, [r2, #0]
            IC2_Overflow = 0;
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002178:	2200      	movs	r2, #0
 800217a:	801a      	strh	r2, [r3, #0]
            Is2_First = 1;
 800217c:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]

            Freq2 = (1000000 / diff);
            Is2_First = 0;
        }
    }
}
 8002182:	e035      	b.n	80021f0 <HAL_TIM_IC_CaptureCallback+0x154>
            IC2_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002184:	2100      	movs	r1, #0
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f002 fdc8 	bl	8004d1c <HAL_TIM_ReadCapturedValue>
 800218c:	4603      	mov	r3, r0
 800218e:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_TIM_IC_CaptureCallback+0x188>)
 8002190:	6013      	str	r3, [r2, #0]
            uint32_t diff = (IC2_Val2 >= IC2_Val1)
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_TIM_IC_CaptureCallback+0x188>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_TIM_IC_CaptureCallback+0x180>)
 8002198:	681b      	ldr	r3, [r3, #0]
                            : (0x10000 + IC2_Val2 - IC2_Val1 + (IC2_Overflow - 1) * 0x10000);
 800219a:	429a      	cmp	r2, r3
 800219c:	d30a      	bcc.n	80021b4 <HAL_TIM_IC_CaptureCallback+0x118>
                            ? (IC2_Val2 - IC2_Val1 + IC2_Overflow * 0x10000)
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_TIM_IC_CaptureCallback+0x188>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_TIM_IC_CaptureCallback+0x180>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_TIM_IC_CaptureCallback+0x184>)
 80021aa:	8812      	ldrh	r2, [r2, #0]
 80021ac:	b292      	uxth	r2, r2
 80021ae:	0412      	lsls	r2, r2, #16
                            : (0x10000 + IC2_Val2 - IC2_Val1 + (IC2_Overflow - 1) * 0x10000);
 80021b0:	4413      	add	r3, r2
 80021b2:	e00c      	b.n	80021ce <HAL_TIM_IC_CaptureCallback+0x132>
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_TIM_IC_CaptureCallback+0x188>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_TIM_IC_CaptureCallback+0x180>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <HAL_TIM_IC_CaptureCallback+0x184>)
 80021c0:	8812      	ldrh	r2, [r2, #0]
 80021c2:	b292      	uxth	r2, r2
 80021c4:	3a01      	subs	r2, #1
 80021c6:	0412      	lsls	r2, r2, #16
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
            uint32_t diff = (IC2_Val2 >= IC2_Val1)
 80021ce:	60bb      	str	r3, [r7, #8]
            	if(diff == 2000) {
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80021d6:	d102      	bne.n	80021de <HAL_TIM_IC_CaptureCallback+0x142>
                       	diff = diff/2;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]
            Freq2 = (1000000 / diff);
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <HAL_TIM_IC_CaptureCallback+0x170>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80021e8:	6013      	str	r3, [r2, #0]
            Is2_First = 0;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000064c 	.word	0x2000064c
 80021fc:	2000065c 	.word	0x2000065c
 8002200:	20000654 	.word	0x20000654
 8002204:	2000065e 	.word	0x2000065e
 8002208:	20000658 	.word	0x20000658
 800220c:	000f4240 	.word	0x000f4240
 8002210:	20000660 	.word	0x20000660
 8002214:	20000650 	.word	0x20000650
 8002218:	2000066c 	.word	0x2000066c
 800221c:	20000664 	.word	0x20000664
 8002220:	2000066e 	.word	0x2000066e
 8002224:	20000668 	.word	0x20000668
 8002228:	20000670 	.word	0x20000670

0800222c <LCD_Send>:
{
    HAL_I2C_Write(_lcd_i2c, LCD_ADDR, &data, 1, HAL_MAX_DELAY);
}

static void LCD_Send(uint8_t data, uint8_t mode)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af02      	add	r7, sp, #8
 8002232:	4603      	mov	r3, r0
 8002234:	460a      	mov	r2, r1
 8002236:	71fb      	strb	r3, [r7, #7]
 8002238:	4613      	mov	r3, r2
 800223a:	71bb      	strb	r3, [r7, #6]
    uint8_t high_nibble = data & 0xF0;
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f023 030f 	bic.w	r3, r3, #15
 8002242:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble = (data << 4) & 0xF0;
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	73bb      	strb	r3, [r7, #14]

    uint8_t data_arr[4];
    data_arr[0] = high_nibble | LCD_BACKLIGHT | mode | LCD_ENABLE;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	4313      	orrs	r3, r2
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f043 030c 	orr.w	r3, r3, #12
 8002256:	b2db      	uxtb	r3, r3
 8002258:	723b      	strb	r3, [r7, #8]
    data_arr[1] = high_nibble | LCD_BACKLIGHT | mode;
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	4313      	orrs	r3, r2
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	b2db      	uxtb	r3, r3
 8002268:	727b      	strb	r3, [r7, #9]
    data_arr[2] = low_nibble  | LCD_BACKLIGHT | mode | LCD_ENABLE;
 800226a:	7bba      	ldrb	r2, [r7, #14]
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	4313      	orrs	r3, r2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f043 030c 	orr.w	r3, r3, #12
 8002276:	b2db      	uxtb	r3, r3
 8002278:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = low_nibble  | LCD_BACKLIGHT | mode;
 800227a:	7bba      	ldrb	r2, [r7, #14]
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	4313      	orrs	r3, r2
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	b2db      	uxtb	r3, r3
 8002288:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(_lcd_i2c, LCD_ADDR, data_arr, 4, HAL_MAX_DELAY);
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <LCD_Send+0x84>)
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	f107 0208 	add.w	r2, r7, #8
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2304      	movs	r3, #4
 800229a:	214e      	movs	r1, #78	; 0x4e
 800229c:	f000 ff86 	bl	80031ac <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f000 faa7 	bl	80027f4 <HAL_Delay>
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000674 	.word	0x20000674

080022b4 <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint8_t cmd)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, LCD_COMMAND);
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ffb2 	bl	800222c <LCD_Send>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <LCD_Send_Data>:

void LCD_Send_Data(uint8_t data)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, LCD_DATA);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ffa4 	bl	800222c <LCD_Send>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <LCD_Send_String>:

void LCD_Send_String(char *str)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    while (*str)
 80022f4:	e006      	b.n	8002304 <LCD_Send_String+0x18>
    {
        LCD_Send_Data(*str++);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ffe6 	bl	80022d0 <LCD_Send_Data>
    while (*str)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f4      	bne.n	80022f6 <LCD_Send_String+0xa>
    }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t row, uint8_t col)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	460a      	mov	r2, r1
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	4613      	mov	r3, r2
 8002324:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? (0x80 + col) : (0xC0 + col);
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <LCD_Set_Cursor+0x1e>
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	3b80      	subs	r3, #128	; 0x80
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e002      	b.n	800233a <LCD_Set_Cursor+0x24>
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	3b40      	subs	r3, #64	; 0x40
 8002338:	b2db      	uxtb	r3, r3
 800233a:	73fb      	strb	r3, [r7, #15]
    LCD_Send_Cmd(addr);
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ffb8 	bl	80022b4 <LCD_Send_Cmd>
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <LCD_Clear>:

void LCD_Clear(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
    LCD_Send_Cmd(0x01);  // Clear display
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff ffaf 	bl	80022b4 <LCD_Send_Cmd>
    HAL_Delay(2);
 8002356:	2002      	movs	r0, #2
 8002358:	f000 fa4c 	bl	80027f4 <HAL_Delay>
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    _lcd_i2c = hi2c;
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <LCD_Init+0x40>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]

    HAL_Delay(50);
 800236e:	2032      	movs	r0, #50	; 0x32
 8002370:	f000 fa40 	bl	80027f4 <HAL_Delay>

    // Gửi chế độ khởi tạo
    LCD_Send_Cmd(0x33);
 8002374:	2033      	movs	r0, #51	; 0x33
 8002376:	f7ff ff9d 	bl	80022b4 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x32);  // 4-bit mode
 800237a:	2032      	movs	r0, #50	; 0x32
 800237c:	f7ff ff9a 	bl	80022b4 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x28);  // 2 lines, 5x8 dots
 8002380:	2028      	movs	r0, #40	; 0x28
 8002382:	f7ff ff97 	bl	80022b4 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x0C);  // Display ON, Cursor OFF
 8002386:	200c      	movs	r0, #12
 8002388:	f7ff ff94 	bl	80022b4 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x06);  // Entry mode
 800238c:	2006      	movs	r0, #6
 800238e:	f7ff ff91 	bl	80022b4 <LCD_Send_Cmd>
    LCD_Clear();
 8002392:	f7ff ffdb 	bl	800234c <LCD_Clear>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000674 	.word	0x20000674

080023a4 <LCD_PrintFloat>:

void LCD_PrintFloat(uint8_t row, uint8_t col, const char *label, float value, const char *unit)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60ba      	str	r2, [r7, #8]
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	4603      	mov	r3, r0
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	460b      	mov	r3, r1
 80023b4:	73bb      	strb	r3, [r7, #14]
    char buffer[17];  // LCD 16x2
    char value_str[10];

    // Format giá trị float
    snprintf(value_str, sizeof(value_str), "%.1f", value);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe f836 	bl	8000428 <__aeabi_f2d>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	f107 0010 	add.w	r0, r7, #16
 80023c4:	e9cd 2300 	strd	r2, r3, [sp]
 80023c8:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <LCD_PrintFloat+0x64>)
 80023ca:	210a      	movs	r1, #10
 80023cc:	f007 faac 	bl	8009928 <sniprintf>

    // Ghép chuỗi: label + value + unit
    snprintf(buffer, sizeof(buffer), "%s%s %s", label, value_str, unit);
 80023d0:	f107 001c 	add.w	r0, r7, #28
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <LCD_PrintFloat+0x68>)
 80023e2:	2111      	movs	r1, #17
 80023e4:	f007 faa0 	bl	8009928 <sniprintf>

    // Set con trỏ và hiển thị
    LCD_Set_Cursor(row, col);
 80023e8:	7bba      	ldrb	r2, [r7, #14]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff91 	bl	8002316 <LCD_Set_Cursor>
    LCD_Send_String(buffer);
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff77 	bl	80022ec <LCD_Send_String>
}
 80023fe:	bf00      	nop
 8002400:	3730      	adds	r7, #48	; 0x30
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	0800dd10 	.word	0x0800dd10
 800240c:	0800dd18 	.word	0x0800dd18

08002410 <UART_SendString>:
extern TIM_HandleTypeDef htim1;
// Khai báo bên ngoài của huart2
extern UART_HandleTypeDef huart2;

// Gửi chuỗi
void UART_SendString(UART_HandleTypeDef *huart, const char *str) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800241a:	6838      	ldr	r0, [r7, #0]
 800241c:	f7fd fe98 	bl	8000150 <strlen>
 8002420:	4603      	mov	r3, r0
 8002422:	b29a      	uxth	r2, r3
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f003 f95c 	bl	80056e8 <HAL_UART_Transmit>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <UART_SendInt>:

// Gửi số nguyên
void UART_SendInt(UART_HandleTypeDef *huart, int32_t num) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
    char buffer[16];
    sprintf(buffer, "%ld", (long)num);
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4906      	ldr	r1, [pc, #24]	; (8002464 <UART_SendInt+0x2c>)
 800244a:	4618      	mov	r0, r3
 800244c:	f007 faa0 	bl	8009990 <siprintf>
    UART_SendString(huart, buffer);
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	4619      	mov	r1, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffda 	bl	8002410 <UART_SendString>
}
 800245c:	bf00      	nop
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	0800dd20 	.word	0x0800dd20

08002468 <UART_StartReceive_IT>:
    sprintf(format, "%%.%df", decimal);
    sprintf(buffer, format, num);
    UART_SendString(huart, buffer);
}

void UART_StartReceive_IT(void) {
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
    uart_rx_index = 0;
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <UART_StartReceive_IT+0x24>)
 800246e:	2200      	movs	r2, #0
 8002470:	801a      	strh	r2, [r3, #0]
    memset(uart_rx_buffer, 0, UART_RX_BUFFER_SIZE);
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	2100      	movs	r1, #0
 8002476:	4806      	ldr	r0, [pc, #24]	; (8002490 <UART_StartReceive_IT+0x28>)
 8002478:	f007 fb19 	bl	8009aae <memset>
    HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 800247c:	2201      	movs	r2, #1
 800247e:	4905      	ldr	r1, [pc, #20]	; (8002494 <UART_StartReceive_IT+0x2c>)
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <UART_StartReceive_IT+0x30>)
 8002482:	f003 f9bc 	bl	80057fe <HAL_UART_Receive_IT>
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200006ba 	.word	0x200006ba
 8002490:	20000678 	.word	0x20000678
 8002494:	200006b8 	.word	0x200006b8
 8002498:	200005d0 	.word	0x200005d0

0800249c <HAL_UART_RxCpltCallback>:
    q->head = (q->head + 1) % EVENT_QUEUE_SIZE;
    return event;
}

// Hàm callback ngắt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a19      	ldr	r2, [pc, #100]	; (8002510 <HAL_UART_RxCpltCallback+0x74>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d12c      	bne.n	8002508 <HAL_UART_RxCpltCallback+0x6c>
        if (uart_rx_index < UART_RX_BUFFER_SIZE - 1) {
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_UART_RxCpltCallback+0x78>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	2b3e      	cmp	r3, #62	; 0x3e
 80024b4:	d820      	bhi.n	80024f8 <HAL_UART_RxCpltCallback+0x5c>
            uart_rx_buffer[uart_rx_index++] = uart_rx_data;
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_UART_RxCpltCallback+0x78>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	b291      	uxth	r1, r2
 80024be:	4a15      	ldr	r2, [pc, #84]	; (8002514 <HAL_UART_RxCpltCallback+0x78>)
 80024c0:	8011      	strh	r1, [r2, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <HAL_UART_RxCpltCallback+0x7c>)
 80024c6:	7819      	ldrb	r1, [r3, #0]
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_UART_RxCpltCallback+0x80>)
 80024ca:	5499      	strb	r1, [r3, r2]

            if (uart_rx_data == '.') {
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_UART_RxCpltCallback+0x7c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b2e      	cmp	r3, #46	; 0x2e
 80024d2:	d114      	bne.n	80024fe <HAL_UART_RxCpltCallback+0x62>
                uart_rx_buffer[uart_rx_index] = '\0';
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_UART_RxCpltCallback+0x78>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_UART_RxCpltCallback+0x80>)
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]
                UART_ProcessReceivedData((char *)uart_rx_buffer);
 80024e0:	480e      	ldr	r0, [pc, #56]	; (800251c <HAL_UART_RxCpltCallback+0x80>)
 80024e2:	f000 f81f 	bl	8002524 <UART_ProcessReceivedData>
                uart_rx_index = 0;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_UART_RxCpltCallback+0x78>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	801a      	strh	r2, [r3, #0]
                memset(uart_rx_buffer, 0, UART_RX_BUFFER_SIZE);
 80024ec:	2240      	movs	r2, #64	; 0x40
 80024ee:	2100      	movs	r1, #0
 80024f0:	480a      	ldr	r0, [pc, #40]	; (800251c <HAL_UART_RxCpltCallback+0x80>)
 80024f2:	f007 fadc 	bl	8009aae <memset>
 80024f6:	e002      	b.n	80024fe <HAL_UART_RxCpltCallback+0x62>
            }
        } else {
            uart_rx_index = 0; // Reset nếu tràn buffer
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_UART_RxCpltCallback+0x78>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	801a      	strh	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1); // Tiếp tục nhận
 80024fe:	2201      	movs	r2, #1
 8002500:	4905      	ldr	r1, [pc, #20]	; (8002518 <HAL_UART_RxCpltCallback+0x7c>)
 8002502:	4807      	ldr	r0, [pc, #28]	; (8002520 <HAL_UART_RxCpltCallback+0x84>)
 8002504:	f003 f97b 	bl	80057fe <HAL_UART_Receive_IT>
    }
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40004400 	.word	0x40004400
 8002514:	200006ba 	.word	0x200006ba
 8002518:	200006b8 	.word	0x200006b8
 800251c:	20000678 	.word	0x20000678
 8002520:	200005d0 	.word	0x200005d0

08002524 <UART_ProcessReceivedData>:

// Hàm xử lý dữ liệu nhận được và đẩy vào queue
void UART_ProcessReceivedData(char *data) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b094      	sub	sp, #80	; 0x50
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
//        event_queue_push(&uart_event_queue, EVENT_FREQ);
//        UART_SendString(&huart2, "Queued: FREQ event\r\n");
	 uint32_t value;
	 char buffer[64];
	    // Lệnh thay đổi delay: "Change_DHT: <giá trị>."
	    if (sscanf(data, "Change_DHT: %lu.", &value) == 1) {
 800252c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002530:	461a      	mov	r2, r3
 8002532:	4963      	ldr	r1, [pc, #396]	; (80026c0 <UART_ProcessReceivedData+0x19c>)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f007 fa4b 	bl	80099d0 <siscanf>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d107      	bne.n	8002550 <UART_ProcessReceivedData+0x2c>
	        delayTaskDHT = value;
 8002540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002542:	4a60      	ldr	r2, [pc, #384]	; (80026c4 <UART_ProcessReceivedData+0x1a0>)
 8002544:	6013      	str	r3, [r2, #0]
	        UART_SendString(&huart2, "Changed DHT delay!\r\n");
 8002546:	4960      	ldr	r1, [pc, #384]	; (80026c8 <UART_ProcessReceivedData+0x1a4>)
 8002548:	4860      	ldr	r0, [pc, #384]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 800254a:	f7ff ff61 	bl	8002410 <UART_SendString>
        }

	    else {
        UART_SendString(&huart2, "Invalid command format.\r\n");
    }
}
 800254e:	e0b3      	b.n	80026b8 <UART_ProcessReceivedData+0x194>
    } else if (sscanf(data, "Change_FRE1: %lu.", &value) == 1) {
 8002550:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002554:	461a      	mov	r2, r3
 8002556:	495e      	ldr	r1, [pc, #376]	; (80026d0 <UART_ProcessReceivedData+0x1ac>)
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f007 fa39 	bl	80099d0 <siscanf>
 800255e:	4603      	mov	r3, r0
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <UART_ProcessReceivedData+0x50>
        delayTaskFre1 = value;
 8002564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002566:	4a5b      	ldr	r2, [pc, #364]	; (80026d4 <UART_ProcessReceivedData+0x1b0>)
 8002568:	6013      	str	r3, [r2, #0]
        UART_SendString(&huart2, "Changed FRE1 delay!\r\n");
 800256a:	495b      	ldr	r1, [pc, #364]	; (80026d8 <UART_ProcessReceivedData+0x1b4>)
 800256c:	4857      	ldr	r0, [pc, #348]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 800256e:	f7ff ff4f 	bl	8002410 <UART_SendString>
}
 8002572:	e0a1      	b.n	80026b8 <UART_ProcessReceivedData+0x194>
    } else if (sscanf(data, "Change_FRE2: %lu.", &value) == 1) {
 8002574:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002578:	461a      	mov	r2, r3
 800257a:	4958      	ldr	r1, [pc, #352]	; (80026dc <UART_ProcessReceivedData+0x1b8>)
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f007 fa27 	bl	80099d0 <siscanf>
 8002582:	4603      	mov	r3, r0
 8002584:	2b01      	cmp	r3, #1
 8002586:	d107      	bne.n	8002598 <UART_ProcessReceivedData+0x74>
        delayTaskFre2 = value;
 8002588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258a:	4a55      	ldr	r2, [pc, #340]	; (80026e0 <UART_ProcessReceivedData+0x1bc>)
 800258c:	6013      	str	r3, [r2, #0]
        UART_SendString(&huart2, "Changed FRE2 delay!\r\n");
 800258e:	4955      	ldr	r1, [pc, #340]	; (80026e4 <UART_ProcessReceivedData+0x1c0>)
 8002590:	484e      	ldr	r0, [pc, #312]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 8002592:	f7ff ff3d 	bl	8002410 <UART_SendString>
}
 8002596:	e08f      	b.n	80026b8 <UART_ProcessReceivedData+0x194>
    } else if (sscanf(data, "Change_LCD: %lu.", &value) == 1) {
 8002598:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800259c:	461a      	mov	r2, r3
 800259e:	4952      	ldr	r1, [pc, #328]	; (80026e8 <UART_ProcessReceivedData+0x1c4>)
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f007 fa15 	bl	80099d0 <siscanf>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <UART_ProcessReceivedData+0x98>
        delayTaskLCD = value;
 80025ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ae:	4a4f      	ldr	r2, [pc, #316]	; (80026ec <UART_ProcessReceivedData+0x1c8>)
 80025b0:	6013      	str	r3, [r2, #0]
        UART_SendString(&huart2, "Changed LCD delay!\r\n");
 80025b2:	494f      	ldr	r1, [pc, #316]	; (80026f0 <UART_ProcessReceivedData+0x1cc>)
 80025b4:	4845      	ldr	r0, [pc, #276]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 80025b6:	f7ff ff2b 	bl	8002410 <UART_SendString>
}
 80025ba:	e07d      	b.n	80026b8 <UART_ProcessReceivedData+0x194>
    } else if (sscanf(data, "Change_UART: %lu.", &value) == 1) {
 80025bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025c0:	461a      	mov	r2, r3
 80025c2:	494c      	ldr	r1, [pc, #304]	; (80026f4 <UART_ProcessReceivedData+0x1d0>)
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f007 fa03 	bl	80099d0 <siscanf>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d107      	bne.n	80025e0 <UART_ProcessReceivedData+0xbc>
        delayTaskUART = value;
 80025d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d2:	4a49      	ldr	r2, [pc, #292]	; (80026f8 <UART_ProcessReceivedData+0x1d4>)
 80025d4:	6013      	str	r3, [r2, #0]
        UART_SendString(&huart2, "Changed UART delay!\r\n");
 80025d6:	4949      	ldr	r1, [pc, #292]	; (80026fc <UART_ProcessReceivedData+0x1d8>)
 80025d8:	483c      	ldr	r0, [pc, #240]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 80025da:	f7ff ff19 	bl	8002410 <UART_SendString>
}
 80025de:	e06b      	b.n	80026b8 <UART_ProcessReceivedData+0x194>
    else if (strncmp(data, "GetPriority.", 12) == 0) {
 80025e0:	220c      	movs	r2, #12
 80025e2:	4947      	ldr	r1, [pc, #284]	; (8002700 <UART_ProcessReceivedData+0x1dc>)
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f007 fa6a 	bl	8009abe <strncmp>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d15f      	bne.n	80026b0 <UART_ProcessReceivedData+0x18c>
            sprintf(buffer, "DHT: %d\r\n", osThreadGetPriority(Task_Sensor_DhtHandle));
 80025f0:	4b44      	ldr	r3, [pc, #272]	; (8002704 <UART_ProcessReceivedData+0x1e0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 ff21 	bl	800643c <osThreadGetPriority>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	4941      	ldr	r1, [pc, #260]	; (8002708 <UART_ProcessReceivedData+0x1e4>)
 8002604:	4618      	mov	r0, r3
 8002606:	f007 f9c3 	bl	8009990 <siprintf>
            UART_SendString(&huart2, buffer);
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	4619      	mov	r1, r3
 8002610:	482e      	ldr	r0, [pc, #184]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 8002612:	f7ff fefd 	bl	8002410 <UART_SendString>
            sprintf(buffer, "FRE1: %d\r\n", osThreadGetPriority(Task_Fre_1Handle));
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <UART_ProcessReceivedData+0x1e8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 ff0e 	bl	800643c <osThreadGetPriority>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	4939      	ldr	r1, [pc, #228]	; (8002710 <UART_ProcessReceivedData+0x1ec>)
 800262a:	4618      	mov	r0, r3
 800262c:	f007 f9b0 	bl	8009990 <siprintf>
            UART_SendString(&huart2, buffer);
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	4619      	mov	r1, r3
 8002636:	4825      	ldr	r0, [pc, #148]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 8002638:	f7ff feea 	bl	8002410 <UART_SendString>
            sprintf(buffer, "FRE2: %d\r\n", osThreadGetPriority(Task_Fre_2Handle));
 800263c:	4b35      	ldr	r3, [pc, #212]	; (8002714 <UART_ProcessReceivedData+0x1f0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f003 fefb 	bl	800643c <osThreadGetPriority>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	4932      	ldr	r1, [pc, #200]	; (8002718 <UART_ProcessReceivedData+0x1f4>)
 8002650:	4618      	mov	r0, r3
 8002652:	f007 f99d 	bl	8009990 <siprintf>
            UART_SendString(&huart2, buffer);
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	4619      	mov	r1, r3
 800265c:	481b      	ldr	r0, [pc, #108]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 800265e:	f7ff fed7 	bl	8002410 <UART_SendString>
            sprintf(buffer, "LCD: %d\r\n", osThreadGetPriority(Task_LcdHandle));
 8002662:	4b2e      	ldr	r3, [pc, #184]	; (800271c <UART_ProcessReceivedData+0x1f8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f003 fee8 	bl	800643c <osThreadGetPriority>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	492a      	ldr	r1, [pc, #168]	; (8002720 <UART_ProcessReceivedData+0x1fc>)
 8002676:	4618      	mov	r0, r3
 8002678:	f007 f98a 	bl	8009990 <siprintf>
            UART_SendString(&huart2, buffer);
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	4619      	mov	r1, r3
 8002682:	4812      	ldr	r0, [pc, #72]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 8002684:	f7ff fec4 	bl	8002410 <UART_SendString>
            sprintf(buffer, "UART: %d\r\n", osThreadGetPriority(TaskUartHandle));
 8002688:	4b26      	ldr	r3, [pc, #152]	; (8002724 <UART_ProcessReceivedData+0x200>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fed5 	bl	800643c <osThreadGetPriority>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	f107 030c 	add.w	r3, r7, #12
 800269a:	4923      	ldr	r1, [pc, #140]	; (8002728 <UART_ProcessReceivedData+0x204>)
 800269c:	4618      	mov	r0, r3
 800269e:	f007 f977 	bl	8009990 <siprintf>
            UART_SendString(&huart2, buffer);
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	4619      	mov	r1, r3
 80026a8:	4808      	ldr	r0, [pc, #32]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 80026aa:	f7ff feb1 	bl	8002410 <UART_SendString>
}
 80026ae:	e003      	b.n	80026b8 <UART_ProcessReceivedData+0x194>
        UART_SendString(&huart2, "Invalid command format.\r\n");
 80026b0:	491e      	ldr	r1, [pc, #120]	; (800272c <UART_ProcessReceivedData+0x208>)
 80026b2:	4806      	ldr	r0, [pc, #24]	; (80026cc <UART_ProcessReceivedData+0x1a8>)
 80026b4:	f7ff feac 	bl	8002410 <UART_SendString>
}
 80026b8:	bf00      	nop
 80026ba:	3750      	adds	r7, #80	; 0x50
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	0800dd2c 	.word	0x0800dd2c
 80026c4:	20000000 	.word	0x20000000
 80026c8:	0800dd40 	.word	0x0800dd40
 80026cc:	200005d0 	.word	0x200005d0
 80026d0:	0800dd58 	.word	0x0800dd58
 80026d4:	20000004 	.word	0x20000004
 80026d8:	0800dd6c 	.word	0x0800dd6c
 80026dc:	0800dd84 	.word	0x0800dd84
 80026e0:	20000008 	.word	0x20000008
 80026e4:	0800dd98 	.word	0x0800dd98
 80026e8:	0800ddb0 	.word	0x0800ddb0
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	0800ddc4 	.word	0x0800ddc4
 80026f4:	0800dddc 	.word	0x0800dddc
 80026f8:	20000010 	.word	0x20000010
 80026fc:	0800ddf0 	.word	0x0800ddf0
 8002700:	0800de08 	.word	0x0800de08
 8002704:	2000061c 	.word	0x2000061c
 8002708:	0800de18 	.word	0x0800de18
 800270c:	20000620 	.word	0x20000620
 8002710:	0800de24 	.word	0x0800de24
 8002714:	20000624 	.word	0x20000624
 8002718:	0800de30 	.word	0x0800de30
 800271c:	20000628 	.word	0x20000628
 8002720:	0800de3c 	.word	0x0800de3c
 8002724:	2000062c 	.word	0x2000062c
 8002728:	0800de48 	.word	0x0800de48
 800272c:	0800de54 	.word	0x0800de54

08002730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_Init+0x28>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_Init+0x28>)
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f000 f947 	bl	80029d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002746:	200f      	movs	r0, #15
 8002748:	f000 f808 	bl	800275c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800274c:	f7ff f828 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40022000 	.word	0x40022000

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x54>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x58>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	fbb3 f3f1 	udiv	r3, r3, r1
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f95f 	bl	8002a3e <HAL_SYSTICK_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00e      	b.n	80027a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d80a      	bhi.n	80027a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f000 f927 	bl	80029ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_InitTick+0x5c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000014 	.word	0x20000014
 80027b4:	2000001c 	.word	0x2000001c
 80027b8:	20000018 	.word	0x20000018

080027bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_IncTick+0x1c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_IncTick+0x20>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a03      	ldr	r2, [pc, #12]	; (80027dc <HAL_IncTick+0x20>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	2000001c 	.word	0x2000001c
 80027dc:	200006bc 	.word	0x200006bc

080027e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b02      	ldr	r3, [pc, #8]	; (80027f0 <HAL_GetTick+0x10>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	200006bc 	.word	0x200006bc

080027f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff fff0 	bl	80027e0 <HAL_GetTick>
 8002800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d005      	beq.n	800281a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_Delay+0x44>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800281a:	bf00      	nop
 800281c:	f7ff ffe0 	bl	80027e0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d8f7      	bhi.n	800281c <HAL_Delay+0x28>
  {
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000001c 	.word	0x2000001c

0800283c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286e:	4a04      	ldr	r2, [pc, #16]	; (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	60d3      	str	r3, [r2, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <__NVIC_GetPriorityGrouping+0x18>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0307 	and.w	r3, r3, #7
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	db0b      	blt.n	80028ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4906      	ldr	r1, [pc, #24]	; (80028d4 <__NVIC_EnableIRQ+0x34>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	2001      	movs	r0, #1
 80028c2:	fa00 f202 	lsl.w	r2, r0, r2
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100

080028d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db0a      	blt.n	8002902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	490c      	ldr	r1, [pc, #48]	; (8002924 <__NVIC_SetPriority+0x4c>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	440b      	add	r3, r1
 80028fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002900:	e00a      	b.n	8002918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4908      	ldr	r1, [pc, #32]	; (8002928 <__NVIC_SetPriority+0x50>)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	3b04      	subs	r3, #4
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	440b      	add	r3, r1
 8002916:	761a      	strb	r2, [r3, #24]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000e100 	.word	0xe000e100
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f1c3 0307 	rsb	r3, r3, #7
 8002946:	2b04      	cmp	r3, #4
 8002948:	bf28      	it	cs
 800294a:	2304      	movcs	r3, #4
 800294c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3304      	adds	r3, #4
 8002952:	2b06      	cmp	r3, #6
 8002954:	d902      	bls.n	800295c <NVIC_EncodePriority+0x30>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3b03      	subs	r3, #3
 800295a:	e000      	b.n	800295e <NVIC_EncodePriority+0x32>
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	f04f 32ff 	mov.w	r2, #4294967295
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	401a      	ands	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002974:	f04f 31ff 	mov.w	r1, #4294967295
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43d9      	mvns	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	4313      	orrs	r3, r2
         );
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a0:	d301      	bcc.n	80029a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <SysTick_Config+0x40>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ae:	210f      	movs	r1, #15
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f7ff ff90 	bl	80028d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <SysTick_Config+0x40>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <SysTick_Config+0x40>)
 80029c0:	2207      	movs	r2, #7
 80029c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ff2d 	bl	800283c <__NVIC_SetPriorityGrouping>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029fc:	f7ff ff42 	bl	8002884 <__NVIC_GetPriorityGrouping>
 8002a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f7ff ff90 	bl	800292c <NVIC_EncodePriority>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff5f 	bl	80028d8 <__NVIC_SetPriority>
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff35 	bl	80028a0 <__NVIC_EnableIRQ>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ffa2 	bl	8002990 <SysTick_Config>
 8002a4c:	4603      	mov	r3, r0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d008      	beq.n	8002a80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2204      	movs	r2, #4
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e020      	b.n	8002ac2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 020e 	bic.w	r2, r2, #14
 8002a8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d005      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e051      	b.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020e 	bic.w	r2, r2, #14
 8002afe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_DMA_Abort_IT+0xd4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d029      	beq.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <HAL_DMA_Abort_IT+0xd8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d022      	beq.n	8002b6a <HAL_DMA_Abort_IT+0x9e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <HAL_DMA_Abort_IT+0xdc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01a      	beq.n	8002b64 <HAL_DMA_Abort_IT+0x98>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <HAL_DMA_Abort_IT+0xe0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d012      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x92>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <HAL_DMA_Abort_IT+0xe4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00a      	beq.n	8002b58 <HAL_DMA_Abort_IT+0x8c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <HAL_DMA_Abort_IT+0xe8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d102      	bne.n	8002b52 <HAL_DMA_Abort_IT+0x86>
 8002b4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b50:	e00e      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b56:	e00b      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5c:	e008      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b62:	e005      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b68:	e002      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	e000      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <HAL_DMA_Abort_IT+0xec>)
 8002b72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
    } 
  }
  return status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40020008 	.word	0x40020008
 8002ba4:	4002001c 	.word	0x4002001c
 8002ba8:	40020030 	.word	0x40020030
 8002bac:	40020044 	.word	0x40020044
 8002bb0:	40020058 	.word	0x40020058
 8002bb4:	4002006c 	.word	0x4002006c
 8002bb8:	40020000 	.word	0x40020000

08002bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b08b      	sub	sp, #44	; 0x2c
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bce:	e169      	b.n	8002ea4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	f040 8158 	bne.w	8002e9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a9a      	ldr	r2, [pc, #616]	; (8002e5c <HAL_GPIO_Init+0x2a0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d05e      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002bf8:	4a98      	ldr	r2, [pc, #608]	; (8002e5c <HAL_GPIO_Init+0x2a0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d875      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002bfe:	4a98      	ldr	r2, [pc, #608]	; (8002e60 <HAL_GPIO_Init+0x2a4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d058      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002c04:	4a96      	ldr	r2, [pc, #600]	; (8002e60 <HAL_GPIO_Init+0x2a4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d86f      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c0a:	4a96      	ldr	r2, [pc, #600]	; (8002e64 <HAL_GPIO_Init+0x2a8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d052      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002c10:	4a94      	ldr	r2, [pc, #592]	; (8002e64 <HAL_GPIO_Init+0x2a8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d869      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c16:	4a94      	ldr	r2, [pc, #592]	; (8002e68 <HAL_GPIO_Init+0x2ac>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d04c      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002c1c:	4a92      	ldr	r2, [pc, #584]	; (8002e68 <HAL_GPIO_Init+0x2ac>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d863      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c22:	4a92      	ldr	r2, [pc, #584]	; (8002e6c <HAL_GPIO_Init+0x2b0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d046      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
 8002c28:	4a90      	ldr	r2, [pc, #576]	; (8002e6c <HAL_GPIO_Init+0x2b0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d85d      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c2e:	2b12      	cmp	r3, #18
 8002c30:	d82a      	bhi.n	8002c88 <HAL_GPIO_Init+0xcc>
 8002c32:	2b12      	cmp	r3, #18
 8002c34:	d859      	bhi.n	8002cea <HAL_GPIO_Init+0x12e>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <HAL_GPIO_Init+0x80>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002cb7 	.word	0x08002cb7
 8002c40:	08002c91 	.word	0x08002c91
 8002c44:	08002ca3 	.word	0x08002ca3
 8002c48:	08002ce5 	.word	0x08002ce5
 8002c4c:	08002ceb 	.word	0x08002ceb
 8002c50:	08002ceb 	.word	0x08002ceb
 8002c54:	08002ceb 	.word	0x08002ceb
 8002c58:	08002ceb 	.word	0x08002ceb
 8002c5c:	08002ceb 	.word	0x08002ceb
 8002c60:	08002ceb 	.word	0x08002ceb
 8002c64:	08002ceb 	.word	0x08002ceb
 8002c68:	08002ceb 	.word	0x08002ceb
 8002c6c:	08002ceb 	.word	0x08002ceb
 8002c70:	08002ceb 	.word	0x08002ceb
 8002c74:	08002ceb 	.word	0x08002ceb
 8002c78:	08002ceb 	.word	0x08002ceb
 8002c7c:	08002ceb 	.word	0x08002ceb
 8002c80:	08002c99 	.word	0x08002c99
 8002c84:	08002cad 	.word	0x08002cad
 8002c88:	4a79      	ldr	r2, [pc, #484]	; (8002e70 <HAL_GPIO_Init+0x2b4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c8e:	e02c      	b.n	8002cea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	623b      	str	r3, [r7, #32]
          break;
 8002c96:	e029      	b.n	8002cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	623b      	str	r3, [r7, #32]
          break;
 8002ca0:	e024      	b.n	8002cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	623b      	str	r3, [r7, #32]
          break;
 8002caa:	e01f      	b.n	8002cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	623b      	str	r3, [r7, #32]
          break;
 8002cb4:	e01a      	b.n	8002cec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	623b      	str	r3, [r7, #32]
          break;
 8002cc2:	e013      	b.n	8002cec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ccc:	2308      	movs	r3, #8
 8002cce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	611a      	str	r2, [r3, #16]
          break;
 8002cd6:	e009      	b.n	8002cec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cd8:	2308      	movs	r3, #8
 8002cda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	615a      	str	r2, [r3, #20]
          break;
 8002ce2:	e003      	b.n	8002cec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	623b      	str	r3, [r7, #32]
          break;
 8002ce8:	e000      	b.n	8002cec <HAL_GPIO_Init+0x130>
          break;
 8002cea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2bff      	cmp	r3, #255	; 0xff
 8002cf0:	d801      	bhi.n	8002cf6 <HAL_GPIO_Init+0x13a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	e001      	b.n	8002cfa <HAL_GPIO_Init+0x13e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2bff      	cmp	r3, #255	; 0xff
 8002d00:	d802      	bhi.n	8002d08 <HAL_GPIO_Init+0x14c>
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	e002      	b.n	8002d0e <HAL_GPIO_Init+0x152>
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	3b08      	subs	r3, #8
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	210f      	movs	r1, #15
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	fa01 f303 	lsl.w	r3, r1, r3
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80b1 	beq.w	8002e9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d3c:	4b4d      	ldr	r3, [pc, #308]	; (8002e74 <HAL_GPIO_Init+0x2b8>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_GPIO_Init+0x2b8>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6193      	str	r3, [r2, #24]
 8002d48:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_GPIO_Init+0x2b8>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d54:	4a48      	ldr	r2, [pc, #288]	; (8002e78 <HAL_GPIO_Init+0x2bc>)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	089b      	lsrs	r3, r3, #2
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	220f      	movs	r2, #15
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4013      	ands	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <HAL_GPIO_Init+0x2c0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <HAL_GPIO_Init+0x1ec>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a3f      	ldr	r2, [pc, #252]	; (8002e80 <HAL_GPIO_Init+0x2c4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00d      	beq.n	8002da4 <HAL_GPIO_Init+0x1e8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a3e      	ldr	r2, [pc, #248]	; (8002e84 <HAL_GPIO_Init+0x2c8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d007      	beq.n	8002da0 <HAL_GPIO_Init+0x1e4>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a3d      	ldr	r2, [pc, #244]	; (8002e88 <HAL_GPIO_Init+0x2cc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_GPIO_Init+0x1e0>
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e006      	b.n	8002daa <HAL_GPIO_Init+0x1ee>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	e004      	b.n	8002daa <HAL_GPIO_Init+0x1ee>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_Init+0x1ee>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_GPIO_Init+0x1ee>
 8002da8:	2300      	movs	r3, #0
 8002daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dac:	f002 0203 	and.w	r2, r2, #3
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	4093      	lsls	r3, r2
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dba:	492f      	ldr	r1, [pc, #188]	; (8002e78 <HAL_GPIO_Init+0x2bc>)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	492c      	ldr	r1, [pc, #176]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4928      	ldr	r1, [pc, #160]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	4922      	ldr	r1, [pc, #136]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	491e      	ldr	r1, [pc, #120]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d006      	beq.n	8002e32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4918      	ldr	r1, [pc, #96]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	4914      	ldr	r1, [pc, #80]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d021      	beq.n	8002e90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	490e      	ldr	r1, [pc, #56]	; (8002e8c <HAL_GPIO_Init+0x2d0>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e021      	b.n	8002e9e <HAL_GPIO_Init+0x2e2>
 8002e5a:	bf00      	nop
 8002e5c:	10320000 	.word	0x10320000
 8002e60:	10310000 	.word	0x10310000
 8002e64:	10220000 	.word	0x10220000
 8002e68:	10210000 	.word	0x10210000
 8002e6c:	10120000 	.word	0x10120000
 8002e70:	10110000 	.word	0x10110000
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	40010800 	.word	0x40010800
 8002e80:	40010c00 	.word	0x40010c00
 8002e84:	40011000 	.word	0x40011000
 8002e88:	40011400 	.word	0x40011400
 8002e8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_GPIO_Init+0x304>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	4909      	ldr	r1, [pc, #36]	; (8002ec0 <HAL_GPIO_Init+0x304>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f47f ae8e 	bne.w	8002bd0 <HAL_GPIO_Init+0x14>
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	372c      	adds	r7, #44	; 0x2c
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e001      	b.n	8002ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]
 8002efe:	4613      	mov	r3, r2
 8002f00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f02:	787b      	ldrb	r3, [r7, #1]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f08:	887a      	ldrh	r2, [r7, #2]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f0e:	e003      	b.n	8002f18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	041a      	lsls	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	611a      	str	r2, [r3, #16]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e12b      	b.n	800318e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fc60 	bl	8001810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f88:	f001 f832 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8002f8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a81      	ldr	r2, [pc, #516]	; (8003198 <HAL_I2C_Init+0x274>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d807      	bhi.n	8002fa8 <HAL_I2C_Init+0x84>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a80      	ldr	r2, [pc, #512]	; (800319c <HAL_I2C_Init+0x278>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bf94      	ite	ls
 8002fa0:	2301      	movls	r3, #1
 8002fa2:	2300      	movhi	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e006      	b.n	8002fb6 <HAL_I2C_Init+0x92>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a7d      	ldr	r2, [pc, #500]	; (80031a0 <HAL_I2C_Init+0x27c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	bf94      	ite	ls
 8002fb0:	2301      	movls	r3, #1
 8002fb2:	2300      	movhi	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0e7      	b.n	800318e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4a78      	ldr	r2, [pc, #480]	; (80031a4 <HAL_I2C_Init+0x280>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0c9b      	lsrs	r3, r3, #18
 8002fc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a6a      	ldr	r2, [pc, #424]	; (8003198 <HAL_I2C_Init+0x274>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d802      	bhi.n	8002ff8 <HAL_I2C_Init+0xd4>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	e009      	b.n	800300c <HAL_I2C_Init+0xe8>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	4a69      	ldr	r2, [pc, #420]	; (80031a8 <HAL_I2C_Init+0x284>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	3301      	adds	r3, #1
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	430b      	orrs	r3, r1
 8003012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800301e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	495c      	ldr	r1, [pc, #368]	; (8003198 <HAL_I2C_Init+0x274>)
 8003028:	428b      	cmp	r3, r1
 800302a:	d819      	bhi.n	8003060 <HAL_I2C_Init+0x13c>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1e59      	subs	r1, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fbb1 f3f3 	udiv	r3, r1, r3
 800303a:	1c59      	adds	r1, r3, #1
 800303c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003040:	400b      	ands	r3, r1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_I2C_Init+0x138>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1e59      	subs	r1, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fbb1 f3f3 	udiv	r3, r1, r3
 8003054:	3301      	adds	r3, #1
 8003056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305a:	e051      	b.n	8003100 <HAL_I2C_Init+0x1dc>
 800305c:	2304      	movs	r3, #4
 800305e:	e04f      	b.n	8003100 <HAL_I2C_Init+0x1dc>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d111      	bne.n	800308c <HAL_I2C_Init+0x168>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	440b      	add	r3, r1
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e012      	b.n	80030b2 <HAL_I2C_Init+0x18e>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	0099      	lsls	r1, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Init+0x196>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e022      	b.n	8003100 <HAL_I2C_Init+0x1dc>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10e      	bne.n	80030e0 <HAL_I2C_Init+0x1bc>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1e58      	subs	r0, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	440b      	add	r3, r1
 80030d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030de:	e00f      	b.n	8003100 <HAL_I2C_Init+0x1dc>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	0099      	lsls	r1, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	6809      	ldr	r1, [r1, #0]
 8003104:	4313      	orrs	r3, r2
 8003106:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800312e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6911      	ldr	r1, [r2, #16]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68d2      	ldr	r2, [r2, #12]
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	430b      	orrs	r3, r1
 8003142:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	000186a0 	.word	0x000186a0
 800319c:	001e847f 	.word	0x001e847f
 80031a0:	003d08ff 	.word	0x003d08ff
 80031a4:	431bde83 	.word	0x431bde83
 80031a8:	10624dd3 	.word	0x10624dd3

080031ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	460b      	mov	r3, r1
 80031ba:	817b      	strh	r3, [r7, #10]
 80031bc:	4613      	mov	r3, r2
 80031be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7ff fb0e 	bl	80027e0 <HAL_GetTick>
 80031c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	f040 80e0 	bne.w	8003394 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2319      	movs	r3, #25
 80031da:	2201      	movs	r2, #1
 80031dc:	4970      	ldr	r1, [pc, #448]	; (80033a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f964 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
 80031ec:	e0d3      	b.n	8003396 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_I2C_Master_Transmit+0x50>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e0cc      	b.n	8003396 <HAL_I2C_Master_Transmit+0x1ea>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d007      	beq.n	8003222 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003230:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2221      	movs	r2, #33	; 0x21
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2210      	movs	r2, #16
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	893a      	ldrh	r2, [r7, #8]
 8003252:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a50      	ldr	r2, [pc, #320]	; (80033a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	6a3a      	ldr	r2, [r7, #32]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f89c 	bl	80033a8 <I2C_MasterRequestWrite>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e08d      	b.n	8003396 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003290:	e066      	b.n	8003360 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	6a39      	ldr	r1, [r7, #32]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fa22 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d107      	bne.n	80032ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06b      	b.n	8003396 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	781a      	ldrb	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d11b      	bne.n	8003334 <HAL_I2C_Master_Transmit+0x188>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	d017      	beq.n	8003334 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	6a39      	ldr	r1, [r7, #32]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fa19 	bl	8003770 <I2C_WaitOnBTFFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	2b04      	cmp	r3, #4
 800334a:	d107      	bne.n	800335c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e01a      	b.n	8003396 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d194      	bne.n	8003292 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	00100002 	.word	0x00100002
 80033a4:	ffff0000 	.word	0xffff0000

080033a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	460b      	mov	r3, r1
 80033b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d006      	beq.n	80033d2 <I2C_MasterRequestWrite+0x2a>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d003      	beq.n	80033d2 <I2C_MasterRequestWrite+0x2a>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d0:	d108      	bne.n	80033e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	e00b      	b.n	80033fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	2b12      	cmp	r3, #18
 80033ea:	d107      	bne.n	80033fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f84f 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003422:	d103      	bne.n	800342c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e035      	b.n	800349c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003438:	d108      	bne.n	800344c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003448:	611a      	str	r2, [r3, #16]
 800344a:	e01b      	b.n	8003484 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800344c:	897b      	ldrh	r3, [r7, #10]
 800344e:	11db      	asrs	r3, r3, #7
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 0306 	and.w	r3, r3, #6
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f063 030f 	orn	r3, r3, #15
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	490e      	ldr	r1, [pc, #56]	; (80034a4 <I2C_MasterRequestWrite+0xfc>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f898 	bl	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e010      	b.n	800349c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4907      	ldr	r1, [pc, #28]	; (80034a8 <I2C_MasterRequestWrite+0x100>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f888 	bl	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	00010008 	.word	0x00010008
 80034a8:	00010002 	.word	0x00010002

080034ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034bc:	e048      	b.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d044      	beq.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7ff f98b 	bl	80027e0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d139      	bne.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10d      	bne.n	8003502 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	e00c      	b.n	800351c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	43da      	mvns	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4013      	ands	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	429a      	cmp	r2, r3
 8003520:	d116      	bne.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e023      	b.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10d      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0xca>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	e00c      	b.n	8003590 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d093      	beq.n	80034be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ae:	e071      	b.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d123      	bne.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e067      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d041      	beq.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7ff f8e6 	bl	80027e0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d136      	bne.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10c      	bne.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4013      	ands	r3, r2
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf14      	ite	ne
 8003642:	2301      	movne	r3, #1
 8003644:	2300      	moveq	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e00b      	b.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e021      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	0c1b      	lsrs	r3, r3, #16
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10c      	bne.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	43da      	mvns	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e00b      	b.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	43da      	mvns	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4013      	ands	r3, r2
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bf14      	ite	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	2300      	moveq	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f47f af6d 	bne.w	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ec:	e034      	b.n	8003758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f886 	bl	8003800 <I2C_IsAcknowledgeFailed>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e034      	b.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d028      	beq.n	8003758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7ff f86b 	bl	80027e0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d11d      	bne.n	8003758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d016      	beq.n	8003758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e007      	b.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d1c3      	bne.n	80036ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800377c:	e034      	b.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f83e 	bl	8003800 <I2C_IsAcknowledgeFailed>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e034      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d028      	beq.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7ff f823 	bl	80027e0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11d      	bne.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d016      	beq.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d1c3      	bne.n	800377e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003816:	d11b      	bne.n	8003850 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003820:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0204 	orr.w	r2, r3, #4
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e272      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8087 	beq.w	800398a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800387c:	4b92      	ldr	r3, [pc, #584]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b04      	cmp	r3, #4
 8003886:	d00c      	beq.n	80038a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003888:	4b8f      	ldr	r3, [pc, #572]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d112      	bne.n	80038ba <HAL_RCC_OscConfig+0x5e>
 8003894:	4b8c      	ldr	r3, [pc, #560]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a0:	d10b      	bne.n	80038ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a2:	4b89      	ldr	r3, [pc, #548]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d06c      	beq.n	8003988 <HAL_RCC_OscConfig+0x12c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d168      	bne.n	8003988 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e24c      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_OscConfig+0x76>
 80038c4:	4b80      	ldr	r3, [pc, #512]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a7f      	ldr	r2, [pc, #508]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e02e      	b.n	8003930 <HAL_RCC_OscConfig+0xd4>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x98>
 80038da:	4b7b      	ldr	r3, [pc, #492]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7a      	ldr	r2, [pc, #488]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b78      	ldr	r3, [pc, #480]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a77      	ldr	r2, [pc, #476]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e01d      	b.n	8003930 <HAL_RCC_OscConfig+0xd4>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0xbc>
 80038fe:	4b72      	ldr	r3, [pc, #456]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a71      	ldr	r2, [pc, #452]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a6e      	ldr	r2, [pc, #440]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e00b      	b.n	8003930 <HAL_RCC_OscConfig+0xd4>
 8003918:	4b6b      	ldr	r3, [pc, #428]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a6a      	ldr	r2, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 800391e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a67      	ldr	r2, [pc, #412]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 800392a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800392e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe ff52 	bl	80027e0 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003940:	f7fe ff4e 	bl	80027e0 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e200      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	4b5d      	ldr	r3, [pc, #372]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0xe4>
 800395e:	e014      	b.n	800398a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fe ff3e 	bl	80027e0 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003968:	f7fe ff3a 	bl	80027e0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e1ec      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397a:	4b53      	ldr	r3, [pc, #332]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x10c>
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d063      	beq.n	8003a5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003996:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039a2:	4b49      	ldr	r3, [pc, #292]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d11c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x18c>
 80039ae:	4b46      	ldr	r3, [pc, #280]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d116      	bne.n	80039e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_RCC_OscConfig+0x176>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d001      	beq.n	80039d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e1c0      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d2:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4939      	ldr	r1, [pc, #228]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e6:	e03a      	b.n	8003a5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f0:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7fe fef3 	bl	80027e0 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fe:	f7fe feef 	bl	80027e0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e1a1      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a10:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4927      	ldr	r1, [pc, #156]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]
 8003a30:	e015      	b.n	8003a5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a32:	4b26      	ldr	r3, [pc, #152]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe fed2 	bl	80027e0 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a40:	f7fe fece 	bl	80027e0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e180      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d03a      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d019      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a72:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <HAL_RCC_OscConfig+0x274>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a78:	f7fe feb2 	bl	80027e0 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a80:	f7fe feae 	bl	80027e0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e160      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f000 face 	bl	8004040 <RCC_Delay>
 8003aa4:	e01c      	b.n	8003ae0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <HAL_RCC_OscConfig+0x274>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aac:	f7fe fe98 	bl	80027e0 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab2:	e00f      	b.n	8003ad4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7fe fe94 	bl	80027e0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d908      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e146      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	42420000 	.word	0x42420000
 8003ad0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b92      	ldr	r3, [pc, #584]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e9      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80a6 	beq.w	8003c3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b8b      	ldr	r3, [pc, #556]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	4b88      	ldr	r3, [pc, #544]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4a87      	ldr	r2, [pc, #540]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b08:	61d3      	str	r3, [r2, #28]
 8003b0a:	4b85      	ldr	r3, [pc, #532]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1a:	4b82      	ldr	r3, [pc, #520]	; (8003d24 <HAL_RCC_OscConfig+0x4c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d118      	bne.n	8003b58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b26:	4b7f      	ldr	r3, [pc, #508]	; (8003d24 <HAL_RCC_OscConfig+0x4c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7e      	ldr	r2, [pc, #504]	; (8003d24 <HAL_RCC_OscConfig+0x4c8>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b32:	f7fe fe55 	bl	80027e0 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3a:	f7fe fe51 	bl	80027e0 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b64      	cmp	r3, #100	; 0x64
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e103      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	4b75      	ldr	r3, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x4c8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCC_OscConfig+0x312>
 8003b60:	4b6f      	ldr	r3, [pc, #444]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4a6e      	ldr	r2, [pc, #440]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6213      	str	r3, [r2, #32]
 8003b6c:	e02d      	b.n	8003bca <HAL_RCC_OscConfig+0x36e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x334>
 8003b76:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4a69      	ldr	r2, [pc, #420]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6213      	str	r3, [r2, #32]
 8003b82:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a66      	ldr	r2, [pc, #408]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	e01c      	b.n	8003bca <HAL_RCC_OscConfig+0x36e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x356>
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4a60      	ldr	r2, [pc, #384]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6213      	str	r3, [r2, #32]
 8003ba4:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a5d      	ldr	r2, [pc, #372]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e00b      	b.n	8003bca <HAL_RCC_OscConfig+0x36e>
 8003bb2:	4b5b      	ldr	r3, [pc, #364]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4a5a      	ldr	r2, [pc, #360]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6213      	str	r3, [r2, #32]
 8003bbe:	4b58      	ldr	r3, [pc, #352]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4a57      	ldr	r2, [pc, #348]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fe05 	bl	80027e0 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe fe01 	bl	80027e0 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0b1      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ee      	beq.n	8003bda <HAL_RCC_OscConfig+0x37e>
 8003bfc:	e014      	b.n	8003c28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fdef 	bl	80027e0 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fe fdeb 	bl	80027e0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e09b      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1c:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ee      	bne.n	8003c06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2e:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4a3b      	ldr	r2, [pc, #236]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8087 	beq.w	8003d52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c44:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d061      	beq.n	8003d14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d146      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c58:	4b33      	ldr	r3, [pc, #204]	; (8003d28 <HAL_RCC_OscConfig+0x4cc>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5e:	f7fe fdbf 	bl	80027e0 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fe fdbb 	bl	80027e0 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e06d      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c78:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d108      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	4921      	ldr	r1, [pc, #132]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a19      	ldr	r1, [r3, #32]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	491b      	ldr	r1, [pc, #108]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <HAL_RCC_OscConfig+0x4cc>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fd8f 	bl	80027e0 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fe fd8b 	bl	80027e0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e03d      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x46a>
 8003ce4:	e035      	b.n	8003d52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <HAL_RCC_OscConfig+0x4cc>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fe fd78 	bl	80027e0 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7fe fd74 	bl	80027e0 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e026      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x498>
 8003d12:	e01e      	b.n	8003d52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d107      	bne.n	8003d2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e019      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
 8003d28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_OscConfig+0x500>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0d0      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d74:	4b6a      	ldr	r3, [pc, #424]	; (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d910      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b67      	ldr	r3, [pc, #412]	; (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0207 	bic.w	r2, r3, #7
 8003d8a:	4965      	ldr	r1, [pc, #404]	; (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b63      	ldr	r3, [pc, #396]	; (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0b8      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dbc:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a58      	ldr	r2, [pc, #352]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd4:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4a52      	ldr	r2, [pc, #328]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b50      	ldr	r3, [pc, #320]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	494d      	ldr	r1, [pc, #308]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d040      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d115      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e07f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e073      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2e:	4b3d      	ldr	r3, [pc, #244]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e06b      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e3e:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f023 0203 	bic.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4936      	ldr	r1, [pc, #216]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e50:	f7fe fcc6 	bl	80027e0 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fe fcc2 	bl	80027e0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e053      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 020c 	and.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d1eb      	bne.n	8003e58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e80:	4b27      	ldr	r3, [pc, #156]	; (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d210      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 0207 	bic.w	r2, r3, #7
 8003e96:	4922      	ldr	r1, [pc, #136]	; (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e032      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4916      	ldr	r1, [pc, #88]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	490e      	ldr	r1, [pc, #56]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eee:	f000 f821 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	490a      	ldr	r1, [pc, #40]	; (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003f00:	5ccb      	ldrb	r3, [r1, r3]
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <HAL_RCC_ClockConfig+0x1cc>)
 8003f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCC_ClockConfig+0x1d0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe fc24 	bl	800275c <HAL_InitTick>

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40022000 	.word	0x40022000
 8003f24:	40021000 	.word	0x40021000
 8003f28:	0800de84 	.word	0x0800de84
 8003f2c:	20000014 	.word	0x20000014
 8003f30:	20000018 	.word	0x20000018

08003f34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d002      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x30>
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d003      	beq.n	8003f6a <HAL_RCC_GetSysClockFreq+0x36>
 8003f62:	e027      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f64:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8003f66:	613b      	str	r3, [r7, #16]
      break;
 8003f68:	e027      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	0c9b      	lsrs	r3, r3, #18
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f74:	5cd3      	ldrb	r3, [r2, r3]
 8003f76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d010      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0c5b      	lsrs	r3, r3, #17
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8003f96:	fb03 f202 	mul.w	r2, r3, r2
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e004      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fa8:	fb02 f303 	mul.w	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	613b      	str	r3, [r7, #16]
      break;
 8003fb2:	e002      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8003fb6:	613b      	str	r3, [r7, #16]
      break;
 8003fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fba:	693b      	ldr	r3, [r7, #16]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	007a1200 	.word	0x007a1200
 8003fd0:	0800de9c 	.word	0x0800de9c
 8003fd4:	0800deac 	.word	0x0800deac
 8003fd8:	003d0900 	.word	0x003d0900

08003fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe0:	4b02      	ldr	r3, [pc, #8]	; (8003fec <HAL_RCC_GetHCLKFreq+0x10>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	20000014 	.word	0x20000014

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ff4:	f7ff fff2 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	0800de94 	.word	0x0800de94

08004018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800401c:	f7ff ffde 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	0adb      	lsrs	r3, r3, #11
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4903      	ldr	r1, [pc, #12]	; (800403c <HAL_RCC_GetPCLK2Freq+0x24>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	0800de94 	.word	0x0800de94

08004040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <RCC_Delay+0x34>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <RCC_Delay+0x38>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	0a5b      	lsrs	r3, r3, #9
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800405c:	bf00      	nop
  }
  while (Delay --);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	60fa      	str	r2, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f9      	bne.n	800405c <RCC_Delay+0x1c>
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	20000014 	.word	0x20000014
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e041      	b.n	8004112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd fbf4 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f000 fe96 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d001      	beq.n	8004134 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e032      	b.n	800419a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <HAL_TIM_Base_Start+0x88>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_TIM_Base_Start+0x48>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414e:	d009      	beq.n	8004164 <HAL_TIM_Base_Start+0x48>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <HAL_TIM_Base_Start+0x8c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIM_Base_Start+0x48>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a13      	ldr	r2, [pc, #76]	; (80041ac <HAL_TIM_Base_Start+0x90>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d111      	bne.n	8004188 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d010      	beq.n	8004198 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	e007      	b.n	8004198 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800

080041b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d001      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e03a      	b.n	800423e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a18      	ldr	r2, [pc, #96]	; (8004248 <HAL_TIM_Base_Start_IT+0x98>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00e      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x58>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f2:	d009      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x58>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <HAL_TIM_Base_Start_IT+0x9c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x58>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a13      	ldr	r2, [pc, #76]	; (8004250 <HAL_TIM_Base_Start_IT+0xa0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d111      	bne.n	800422c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b06      	cmp	r3, #6
 8004218:	d010      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	e007      	b.n	800423c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800

08004254 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e041      	b.n	80042ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd fb6a 	bl	8001954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f000 fdaa 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <HAL_TIM_PWM_Start+0x24>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e022      	b.n	800435e <HAL_TIM_PWM_Start+0x6a>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b04      	cmp	r3, #4
 800431c:	d109      	bne.n	8004332 <HAL_TIM_PWM_Start+0x3e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b01      	cmp	r3, #1
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e015      	b.n	800435e <HAL_TIM_PWM_Start+0x6a>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d109      	bne.n	800434c <HAL_TIM_PWM_Start+0x58>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e008      	b.n	800435e <HAL_TIM_PWM_Start+0x6a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	bf14      	ite	ne
 8004358:	2301      	movne	r3, #1
 800435a:	2300      	moveq	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e05e      	b.n	8004424 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Start+0x82>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004374:	e013      	b.n	800439e <HAL_TIM_PWM_Start+0xaa>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d104      	bne.n	8004386 <HAL_TIM_PWM_Start+0x92>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004384:	e00b      	b.n	800439e <HAL_TIM_PWM_Start+0xaa>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d104      	bne.n	8004396 <HAL_TIM_PWM_Start+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004394:	e003      	b.n	800439e <HAL_TIM_PWM_Start+0xaa>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2201      	movs	r2, #1
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 f8b9 	bl	800551e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <HAL_TIM_PWM_Start+0x138>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d107      	bne.n	80043c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_TIM_PWM_Start+0x138>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_TIM_PWM_Start+0xfa>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d8:	d009      	beq.n	80043ee <HAL_TIM_PWM_Start+0xfa>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a14      	ldr	r2, [pc, #80]	; (8004430 <HAL_TIM_PWM_Start+0x13c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_TIM_PWM_Start+0xfa>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a12      	ldr	r2, [pc, #72]	; (8004434 <HAL_TIM_PWM_Start+0x140>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d111      	bne.n	8004412 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b06      	cmp	r3, #6
 80043fe:	d010      	beq.n	8004422 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004410:	e007      	b.n	8004422 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40012c00 	.word	0x40012c00
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800

08004438 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e041      	b.n	80044ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd fa94 	bl	800198c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f000 fcb8 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_IC_Start_IT+0x1e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	e013      	b.n	800451e <HAL_TIM_IC_Start_IT+0x46>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_IC_Start_IT+0x2e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e00b      	b.n	800451e <HAL_TIM_IC_Start_IT+0x46>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d104      	bne.n	8004516 <HAL_TIM_IC_Start_IT+0x3e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004512:	b2db      	uxtb	r3, r3
 8004514:	e003      	b.n	800451e <HAL_TIM_IC_Start_IT+0x46>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451c:	b2db      	uxtb	r3, r3
 800451e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_TIM_IC_Start_IT+0x58>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e013      	b.n	8004558 <HAL_TIM_IC_Start_IT+0x80>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b04      	cmp	r3, #4
 8004534:	d104      	bne.n	8004540 <HAL_TIM_IC_Start_IT+0x68>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e00b      	b.n	8004558 <HAL_TIM_IC_Start_IT+0x80>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d104      	bne.n	8004550 <HAL_TIM_IC_Start_IT+0x78>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800454c:	b2db      	uxtb	r3, r3
 800454e:	e003      	b.n	8004558 <HAL_TIM_IC_Start_IT+0x80>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004556:	b2db      	uxtb	r3, r3
 8004558:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800455a:	7bbb      	ldrb	r3, [r7, #14]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d102      	bne.n	8004566 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004560:	7b7b      	ldrb	r3, [r7, #13]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0b8      	b.n	80046dc <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d104      	bne.n	800457a <HAL_TIM_IC_Start_IT+0xa2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004578:	e013      	b.n	80045a2 <HAL_TIM_IC_Start_IT+0xca>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b04      	cmp	r3, #4
 800457e:	d104      	bne.n	800458a <HAL_TIM_IC_Start_IT+0xb2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004588:	e00b      	b.n	80045a2 <HAL_TIM_IC_Start_IT+0xca>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d104      	bne.n	800459a <HAL_TIM_IC_Start_IT+0xc2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004598:	e003      	b.n	80045a2 <HAL_TIM_IC_Start_IT+0xca>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2202      	movs	r2, #2
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_IC_Start_IT+0xda>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b0:	e013      	b.n	80045da <HAL_TIM_IC_Start_IT+0x102>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_IC_Start_IT+0xea>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c0:	e00b      	b.n	80045da <HAL_TIM_IC_Start_IT+0x102>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_IC_Start_IT+0xfa>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d0:	e003      	b.n	80045da <HAL_TIM_IC_Start_IT+0x102>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2202      	movs	r2, #2
 80045d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d841      	bhi.n	8004664 <HAL_TIM_IC_Start_IT+0x18c>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <HAL_TIM_IC_Start_IT+0x110>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	0800461d 	.word	0x0800461d
 80045ec:	08004665 	.word	0x08004665
 80045f0:	08004665 	.word	0x08004665
 80045f4:	08004665 	.word	0x08004665
 80045f8:	0800462f 	.word	0x0800462f
 80045fc:	08004665 	.word	0x08004665
 8004600:	08004665 	.word	0x08004665
 8004604:	08004665 	.word	0x08004665
 8004608:	08004641 	.word	0x08004641
 800460c:	08004665 	.word	0x08004665
 8004610:	08004665 	.word	0x08004665
 8004614:	08004665 	.word	0x08004665
 8004618:	08004653 	.word	0x08004653
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0202 	orr.w	r2, r2, #2
 800462a:	60da      	str	r2, [r3, #12]
      break;
 800462c:	e01d      	b.n	800466a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0204 	orr.w	r2, r2, #4
 800463c:	60da      	str	r2, [r3, #12]
      break;
 800463e:	e014      	b.n	800466a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0208 	orr.w	r2, r2, #8
 800464e:	60da      	str	r2, [r3, #12]
      break;
 8004650:	e00b      	b.n	800466a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0210 	orr.w	r2, r2, #16
 8004660:	60da      	str	r2, [r3, #12]
      break;
 8004662:	e002      	b.n	800466a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      break;
 8004668:	bf00      	nop
  }

  if (status == HAL_OK)
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d134      	bne.n	80046da <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2201      	movs	r2, #1
 8004676:	6839      	ldr	r1, [r7, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 ff50 	bl	800551e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <HAL_TIM_IC_Start_IT+0x20c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_TIM_IC_Start_IT+0x1ce>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004690:	d009      	beq.n	80046a6 <HAL_TIM_IC_Start_IT+0x1ce>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <HAL_TIM_IC_Start_IT+0x210>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_TIM_IC_Start_IT+0x1ce>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a12      	ldr	r2, [pc, #72]	; (80046ec <HAL_TIM_IC_Start_IT+0x214>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d111      	bne.n	80046ca <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d010      	beq.n	80046da <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	e007      	b.n	80046da <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800

080046f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d020      	beq.n	8004754 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01b      	beq.n	8004754 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fd fcae 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fb37 	bl	8004db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fb3d 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d020      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0204 	mvn.w	r2, #4
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fd fc88 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fb11 	bl	8004db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fb17 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d020      	beq.n	80047ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01b      	beq.n	80047ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0208 	mvn.w	r2, #8
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2204      	movs	r2, #4
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fd fc62 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 faeb 	bl	8004db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 faf1 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d020      	beq.n	8004838 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0210 	mvn.w	r2, #16
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2208      	movs	r2, #8
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fd fc3c 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fac5 	bl	8004db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 facb 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0201 	mvn.w	r2, #1
 8004854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 faa4 	bl	8004da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fedb 	bl	8005636 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa9b 	bl	8004dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0220 	mvn.w	r2, #32
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 feae 	bl	8005624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e088      	b.n	8004a00 <HAL_TIM_IC_ConfigChannel+0x130>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800490c:	f000 fc64 	bl	80051d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 020c 	bic.w	r2, r2, #12
 800491e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6999      	ldr	r1, [r3, #24]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	619a      	str	r2, [r3, #24]
 8004932:	e060      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b04      	cmp	r3, #4
 8004938:	d11c      	bne.n	8004974 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800494a:	f000 fccd 	bl	80052e8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800495c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6999      	ldr	r1, [r3, #24]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	021a      	lsls	r2, r3, #8
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	619a      	str	r2, [r3, #24]
 8004972:	e040      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d11b      	bne.n	80049b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800498a:	f000 fd18 	bl	80053be <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 020c 	bic.w	r2, r2, #12
 800499c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	61da      	str	r2, [r3, #28]
 80049b0:	e021      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	d11c      	bne.n	80049f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80049c8:	f000 fd34 	bl	8005434 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69d9      	ldr	r1, [r3, #28]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	021a      	lsls	r2, r3, #8
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	61da      	str	r2, [r3, #28]
 80049f0:	e001      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e0ae      	b.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	f200 809f 	bhi.w	8004b74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004b75 	.word	0x08004b75
 8004a44:	08004b75 	.word	0x08004b75
 8004a48:	08004b75 	.word	0x08004b75
 8004a4c:	08004ab1 	.word	0x08004ab1
 8004a50:	08004b75 	.word	0x08004b75
 8004a54:	08004b75 	.word	0x08004b75
 8004a58:	08004b75 	.word	0x08004b75
 8004a5c:	08004af3 	.word	0x08004af3
 8004a60:	08004b75 	.word	0x08004b75
 8004a64:	08004b75 	.word	0x08004b75
 8004a68:	08004b75 	.word	0x08004b75
 8004a6c:	08004b33 	.word	0x08004b33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fa26 	bl	8004ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0208 	orr.w	r2, r2, #8
 8004a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6999      	ldr	r1, [r3, #24]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	619a      	str	r2, [r3, #24]
      break;
 8004aae:	e064      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fa6c 	bl	8004f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	619a      	str	r2, [r3, #24]
      break;
 8004af0:	e043      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fab5 	bl	8005068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0208 	orr.w	r2, r2, #8
 8004b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0204 	bic.w	r2, r2, #4
 8004b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69d9      	ldr	r1, [r3, #28]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	61da      	str	r2, [r3, #28]
      break;
 8004b30:	e023      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 faff 	bl	800513c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69d9      	ldr	r1, [r3, #28]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	021a      	lsls	r2, r3, #8
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	61da      	str	r2, [r3, #28]
      break;
 8004b72:	e002      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	75fb      	strb	r3, [r7, #23]
      break;
 8004b78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0b4      	b.n	8004d12 <HAL_TIM_ConfigClockSource+0x186>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be0:	d03e      	beq.n	8004c60 <HAL_TIM_ConfigClockSource+0xd4>
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be6:	f200 8087 	bhi.w	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bee:	f000 8086 	beq.w	8004cfe <HAL_TIM_ConfigClockSource+0x172>
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d87f      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b70      	cmp	r3, #112	; 0x70
 8004bfa:	d01a      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0xa6>
 8004bfc:	2b70      	cmp	r3, #112	; 0x70
 8004bfe:	d87b      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b60      	cmp	r3, #96	; 0x60
 8004c02:	d050      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c04:	2b60      	cmp	r3, #96	; 0x60
 8004c06:	d877      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b50      	cmp	r3, #80	; 0x50
 8004c0a:	d03c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0xfa>
 8004c0c:	2b50      	cmp	r3, #80	; 0x50
 8004c0e:	d873      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d058      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d86f      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b30      	cmp	r3, #48	; 0x30
 8004c1a:	d064      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c1c:	2b30      	cmp	r3, #48	; 0x30
 8004c1e:	d86b      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d060      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d867      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05c      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d05a      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c30:	e062      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c42:	f000 fc4d 	bl	80054e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	609a      	str	r2, [r3, #8]
      break;
 8004c5e:	e04f      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c70:	f000 fc36 	bl	80054e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c82:	609a      	str	r2, [r3, #8]
      break;
 8004c84:	e03c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c92:	461a      	mov	r2, r3
 8004c94:	f000 fafa 	bl	800528c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2150      	movs	r1, #80	; 0x50
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fc04 	bl	80054ac <TIM_ITRx_SetConfig>
      break;
 8004ca4:	e02c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 fb54 	bl	8005360 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2160      	movs	r1, #96	; 0x60
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fbf4 	bl	80054ac <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e01c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 fada 	bl	800528c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2140      	movs	r1, #64	; 0x40
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fbe4 	bl	80054ac <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e00c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f000 fbdb 	bl	80054ac <TIM_ITRx_SetConfig>
      break;
 8004cf6:	e003      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfc:	e000      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d831      	bhi.n	8004d94 <HAL_TIM_ReadCapturedValue+0x78>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004d95 	.word	0x08004d95
 8004d44:	08004d95 	.word	0x08004d95
 8004d48:	08004d77 	.word	0x08004d77
 8004d4c:	08004d95 	.word	0x08004d95
 8004d50:	08004d95 	.word	0x08004d95
 8004d54:	08004d95 	.word	0x08004d95
 8004d58:	08004d81 	.word	0x08004d81
 8004d5c:	08004d95 	.word	0x08004d95
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004d95 	.word	0x08004d95
 8004d68:	08004d8b 	.word	0x08004d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	60fb      	str	r3, [r7, #12]

      break;
 8004d74:	e00f      	b.n	8004d96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	60fb      	str	r3, [r7, #12]

      break;
 8004d7e:	e00a      	b.n	8004d96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	60fb      	str	r3, [r7, #12]

      break;
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	60fb      	str	r3, [r7, #12]

      break;
 8004d92:	e000      	b.n	8004d96 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d94:	bf00      	nop
  }

  return tmpreg;
 8004d96:	68fb      	ldr	r3, [r7, #12]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop

08004da4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a2f      	ldr	r2, [pc, #188]	; (8004ebc <TIM_Base_SetConfig+0xd0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_Base_SetConfig+0x30>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0x30>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <TIM_Base_SetConfig+0xd4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0x30>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <TIM_Base_SetConfig+0xd8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d108      	bne.n	8004e2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <TIM_Base_SetConfig+0xd0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_Base_SetConfig+0x62>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	d007      	beq.n	8004e4e <TIM_Base_SetConfig+0x62>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <TIM_Base_SetConfig+0xd4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_Base_SetConfig+0x62>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1e      	ldr	r2, [pc, #120]	; (8004ec4 <TIM_Base_SetConfig+0xd8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a0d      	ldr	r2, [pc, #52]	; (8004ebc <TIM_Base_SetConfig+0xd0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800

08004ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 0201 	bic.w	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 0302 	bic.w	r3, r3, #2
 8004f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <TIM_OC1_SetConfig+0xc8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d10c      	bne.n	8004f3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0308 	bic.w	r3, r3, #8
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f023 0304 	bic.w	r3, r3, #4
 8004f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <TIM_OC1_SetConfig+0xc8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d111      	bne.n	8004f6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	621a      	str	r2, [r3, #32]
}
 8004f84:	bf00      	nop
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00

08004f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f023 0210 	bic.w	r2, r3, #16
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0320 	bic.w	r3, r3, #32
 8004fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <TIM_OC2_SetConfig+0xd0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10d      	bne.n	8005010 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a14      	ldr	r2, [pc, #80]	; (8005064 <TIM_OC2_SetConfig+0xd0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d113      	bne.n	8005040 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800501e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr
 8005064:	40012c00 	.word	0x40012c00

08005068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <TIM_OC3_SetConfig+0xd0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d10d      	bne.n	80050e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <TIM_OC3_SetConfig+0xd0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d113      	bne.n	8005112 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	621a      	str	r2, [r3, #32]
}
 800512c:	bf00      	nop
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40012c00 	.word	0x40012c00

0800513c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a0f      	ldr	r2, [pc, #60]	; (80051d4 <TIM_OC4_SetConfig+0x98>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d109      	bne.n	80051b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	019b      	lsls	r3, r3, #6
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	40012c00 	.word	0x40012c00

080051d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0201 	bic.w	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <TIM_TI1_SetConfig+0xa8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_TI1_SetConfig+0x46>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d007      	beq.n	800521e <TIM_TI1_SetConfig+0x46>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <TIM_TI1_SetConfig+0xac>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_TI1_SetConfig+0x46>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4a1b      	ldr	r2, [pc, #108]	; (8005288 <TIM_TI1_SetConfig+0xb0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <TIM_TI1_SetConfig+0x4a>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <TIM_TI1_SetConfig+0x4c>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e003      	b.n	8005242 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	b2db      	uxtb	r3, r3
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f023 030a 	bic.w	r3, r3, #10
 800525c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 030a 	and.w	r3, r3, #10
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr
 8005280:	40012c00 	.word	0x40012c00
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800

0800528c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0201 	bic.w	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f023 030a 	bic.w	r3, r3, #10
 80052c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f023 0210 	bic.w	r2, r3, #16
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	031b      	lsls	r3, r3, #12
 800532c:	b29b      	uxth	r3, r3
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800533a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0210 	bic.w	r2, r3, #16
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800538a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	031b      	lsls	r3, r3, #12
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800539c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	621a      	str	r2, [r3, #32]
}
 80053b4:	bf00      	nop
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053be:	b480      	push	{r7}
 80053c0:	b087      	sub	sp, #28
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f023 0303 	bic.w	r3, r3, #3
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	b2db      	uxtb	r3, r3
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800540e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr

08005434 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005460:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005472:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	031b      	lsls	r3, r3, #12
 8005478:	b29b      	uxth	r3, r3
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005486:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	031b      	lsls	r3, r3, #12
 800548c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f043 0307 	orr.w	r3, r3, #7
 80054ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	609a      	str	r2, [r3, #8]
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	021a      	lsls	r2, r3, #8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	431a      	orrs	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4313      	orrs	r3, r2
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	609a      	str	r2, [r3, #8]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr

0800551e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	2201      	movs	r2, #1
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a1a      	ldr	r2, [r3, #32]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	43db      	mvns	r3, r3
 8005540:	401a      	ands	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	431a      	orrs	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	621a      	str	r2, [r3, #32]
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
	...

08005568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800557c:	2302      	movs	r3, #2
 800557e:	e046      	b.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a16      	ldr	r2, [pc, #88]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055cc:	d009      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a12      	ldr	r2, [pc, #72]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d10c      	bne.n	80055fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800

08005624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e042      	b.n	80056e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fc fa02 	bl	8001a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	; 0x24
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800568a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fdb7 	bl	8006200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b20      	cmp	r3, #32
 8005706:	d175      	bne.n	80057f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_UART_Transmit+0x2c>
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e06e      	b.n	80057f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2221      	movs	r2, #33	; 0x21
 8005722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005726:	f7fd f85b 	bl	80027e0 <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005740:	d108      	bne.n	8005754 <HAL_UART_Transmit+0x6c>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	e003      	b.n	800575c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005758:	2300      	movs	r3, #0
 800575a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800575c:	e02e      	b.n	80057bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	2180      	movs	r1, #128	; 0x80
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fb1c 	bl	8005da6 <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e03a      	b.n	80057f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	3302      	adds	r3, #2
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	e007      	b.n	80057ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	3301      	adds	r3, #1
 80057ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1cb      	bne.n	800575e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2140      	movs	r1, #64	; 0x40
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 fae8 	bl	8005da6 <UART_WaitOnFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e006      	b.n	80057f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	4613      	mov	r3, r2
 800580a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b20      	cmp	r3, #32
 8005816:	d112      	bne.n	800583e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_UART_Receive_IT+0x26>
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e00b      	b.n	8005840 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	461a      	mov	r2, r3
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fb0f 	bl	8005e58 <UART_Start_Receive_IT>
 800583a:	4603      	mov	r3, r0
 800583c:	e000      	b.n	8005840 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800583e:	2302      	movs	r3, #2
  }
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b0ba      	sub	sp, #232	; 0xe8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10f      	bne.n	80058ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <HAL_UART_IRQHandler+0x66>
 800589a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fbec 	bl	8006084 <UART_Receive_IT>
      return;
 80058ac:	e25b      	b.n	8005d66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80de 	beq.w	8005a74 <HAL_UART_IRQHandler+0x22c>
 80058b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80d1 	beq.w	8005a74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_UART_IRQHandler+0xae>
 80058de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_UART_IRQHandler+0xd2>
 8005902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f043 0202 	orr.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00b      	beq.n	800593e <HAL_UART_IRQHandler+0xf6>
 8005926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	f043 0204 	orr.w	r2, r3, #4
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b00      	cmp	r3, #0
 8005948:	d011      	beq.n	800596e <HAL_UART_IRQHandler+0x126>
 800594a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d105      	bne.n	8005962 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	f043 0208 	orr.w	r2, r3, #8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 81f2 	beq.w	8005d5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_UART_IRQHandler+0x14e>
 8005984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fb77 	bl	8006084 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <HAL_UART_IRQHandler+0x17a>
 80059ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d04f      	beq.n	8005a62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa81 	bl	8005eca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d041      	beq.n	8005a5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3314      	adds	r3, #20
 80059dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3314      	adds	r3, #20
 80059fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1d9      	bne.n	80059d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d013      	beq.n	8005a52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	4a7e      	ldr	r2, [pc, #504]	; (8005c28 <HAL_UART_IRQHandler+0x3e0>)
 8005a30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fd f848 	bl	8002acc <HAL_DMA_Abort_IT>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d016      	beq.n	8005a70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a50:	e00e      	b.n	8005a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f993 	bl	8005d7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	e00a      	b.n	8005a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f98f 	bl	8005d7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	e006      	b.n	8005a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f98b 	bl	8005d7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005a6e:	e175      	b.n	8005d5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	bf00      	nop
    return;
 8005a72:	e173      	b.n	8005d5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	f040 814f 	bne.w	8005d1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8148 	beq.w	8005d1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8141 	beq.w	8005d1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 80b6 	beq.w	8005c2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8145 	beq.w	8005d60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	f080 813e 	bcs.w	8005d60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	f000 8088 	beq.w	8005c08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	330c      	adds	r3, #12
 8005b20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b24:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1d9      	bne.n	8005af8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3314      	adds	r3, #20
 8005b64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e1      	bne.n	8005b44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3314      	adds	r3, #20
 8005b86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3314      	adds	r3, #20
 8005ba0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ba4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ba6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005baa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e3      	bne.n	8005b80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	330c      	adds	r3, #12
 8005bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd8:	f023 0310 	bic.w	r3, r3, #16
 8005bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bea:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e3      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fc ff27 	bl	8002a56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f8b6 	bl	8005d90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c24:	e09c      	b.n	8005d60 <HAL_UART_IRQHandler+0x518>
 8005c26:	bf00      	nop
 8005c28:	08005f8f 	.word	0x08005f8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 808e 	beq.w	8005d64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8089 	beq.w	8005d64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c76:	647a      	str	r2, [r7, #68]	; 0x44
 8005c78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e3      	bne.n	8005c52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3314      	adds	r3, #20
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	623b      	str	r3, [r7, #32]
   return(result);
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3314      	adds	r3, #20
 8005caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cae:	633a      	str	r2, [r7, #48]	; 0x30
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e3      	bne.n	8005c8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0310 	bic.w	r3, r3, #16
 8005ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cf4:	61fa      	str	r2, [r7, #28]
 8005cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	69b9      	ldr	r1, [r7, #24]
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	617b      	str	r3, [r7, #20]
   return(result);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e3      	bne.n	8005cd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f83b 	bl	8005d90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d1a:	e023      	b.n	8005d64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <HAL_UART_IRQHandler+0x4f4>
 8005d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f93e 	bl	8005fb6 <UART_Transmit_IT>
    return;
 8005d3a:	e014      	b.n	8005d66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <HAL_UART_IRQHandler+0x51e>
 8005d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f97d 	bl	8006054 <UART_EndTransmit_IT>
    return;
 8005d5a:	e004      	b.n	8005d66 <HAL_UART_IRQHandler+0x51e>
    return;
 8005d5c:	bf00      	nop
 8005d5e:	e002      	b.n	8005d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d60:	bf00      	nop
 8005d62:	e000      	b.n	8005d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d64:	bf00      	nop
  }
}
 8005d66:	37e8      	adds	r7, #232	; 0xe8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	4613      	mov	r3, r2
 8005db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db6:	e03b      	b.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d037      	beq.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc0:	f7fc fd0e 	bl	80027e0 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	6a3a      	ldr	r2, [r7, #32]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d302      	bcc.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e03a      	b.n	8005e50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d023      	beq.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d020      	beq.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d01d      	beq.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d116      	bne.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f856 	bl	8005eca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2208      	movs	r2, #8
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e00f      	b.n	8005e50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d0b4      	beq.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	88fa      	ldrh	r2, [r7, #6]
 8005e76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2222      	movs	r2, #34	; 0x22
 8005e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0220 	orr.w	r2, r2, #32
 8005ebc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b095      	sub	sp, #84	; 0x54
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ef2:	643a      	str	r2, [r7, #64]	; 0x40
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e5      	bne.n	8005ed2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3314      	adds	r3, #20
 8005f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e5      	bne.n	8005f06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d119      	bne.n	8005f76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f023 0310 	bic.w	r3, r3, #16
 8005f58:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f62:	61ba      	str	r2, [r7, #24]
 8005f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6979      	ldr	r1, [r7, #20]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e5      	bne.n	8005f42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f84:	bf00      	nop
 8005f86:	3754      	adds	r7, #84	; 0x54
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bc80      	pop	{r7}
 8005f8c:	4770      	bx	lr

08005f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fee8 	bl	8005d7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b21      	cmp	r3, #33	; 0x21
 8005fc8:	d13e      	bne.n	8006048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd2:	d114      	bne.n	8005ffe <UART_Transmit_IT+0x48>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d110      	bne.n	8005ffe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	1c9a      	adds	r2, r3, #2
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	621a      	str	r2, [r3, #32]
 8005ffc:	e008      	b.n	8006010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6211      	str	r1, [r2, #32]
 8006008:	781a      	ldrb	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29b      	uxth	r3, r3
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4619      	mov	r1, r3
 800601e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10f      	bne.n	8006044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800606a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7ff fe79 	bl	8005d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08c      	sub	sp, #48	; 0x30
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b22      	cmp	r3, #34	; 0x22
 8006096:	f040 80ae 	bne.w	80061f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a2:	d117      	bne.n	80060d4 <UART_Receive_IT+0x50>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d113      	bne.n	80060d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	629a      	str	r2, [r3, #40]	; 0x28
 80060d2:	e026      	b.n	8006122 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e6:	d007      	beq.n	80060f8 <UART_Receive_IT+0x74>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <UART_Receive_IT+0x82>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	e008      	b.n	8006118 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006112:	b2da      	uxtb	r2, r3
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29b      	uxth	r3, r3
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4619      	mov	r1, r3
 8006130:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006132:	2b00      	cmp	r3, #0
 8006134:	d15d      	bne.n	80061f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0220 	bic.w	r2, r2, #32
 8006144:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006154:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695a      	ldr	r2, [r3, #20]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0201 	bic.w	r2, r2, #1
 8006164:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d135      	bne.n	80061e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	613b      	str	r3, [r7, #16]
   return(result);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f023 0310 	bic.w	r3, r3, #16
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a2:	623a      	str	r2, [r7, #32]
 80061a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	69f9      	ldr	r1, [r7, #28]
 80061a8:	6a3a      	ldr	r2, [r7, #32]
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e5      	bne.n	8006182 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	d10a      	bne.n	80061da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff fdd5 	bl	8005d90 <HAL_UARTEx_RxEventCallback>
 80061e6:	e002      	b.n	80061ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7fc f957 	bl	800249c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e002      	b.n	80061f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e000      	b.n	80061f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
  }
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3730      	adds	r7, #48	; 0x30
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800623a:	f023 030c 	bic.w	r3, r3, #12
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	430b      	orrs	r3, r1
 8006246:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2c      	ldr	r2, [pc, #176]	; (8006314 <UART_SetConfig+0x114>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d103      	bne.n	8006270 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006268:	f7fd fed6 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	e002      	b.n	8006276 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006270:	f7fd febe 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8006274:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009a      	lsls	r2, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	fbb2 f3f3 	udiv	r3, r2, r3
 800628c:	4a22      	ldr	r2, [pc, #136]	; (8006318 <UART_SetConfig+0x118>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	0119      	lsls	r1, r3, #4
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009a      	lsls	r2, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80062ac:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <UART_SetConfig+0x118>)
 80062ae:	fba3 0302 	umull	r0, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	2064      	movs	r0, #100	; 0x64
 80062b6:	fb00 f303 	mul.w	r3, r0, r3
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	3332      	adds	r3, #50	; 0x32
 80062c0:	4a15      	ldr	r2, [pc, #84]	; (8006318 <UART_SetConfig+0x118>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062cc:	4419      	add	r1, r3
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009a      	lsls	r2, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <UART_SetConfig+0x118>)
 80062e6:	fba3 0302 	umull	r0, r3, r3, r2
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	2064      	movs	r0, #100	; 0x64
 80062ee:	fb00 f303 	mul.w	r3, r0, r3
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	3332      	adds	r3, #50	; 0x32
 80062f8:	4a07      	ldr	r2, [pc, #28]	; (8006318 <UART_SetConfig+0x118>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	f003 020f 	and.w	r2, r3, #15
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	440a      	add	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40013800 	.word	0x40013800
 8006318:	51eb851f 	.word	0x51eb851f

0800631c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800632a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800632e:	2b84      	cmp	r3, #132	; 0x84
 8006330:	d005      	beq.n	800633e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006332:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	3303      	adds	r3, #3
 800633c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800633e:	68fb      	ldr	r3, [r7, #12]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr

0800634a <makeCmsisPriority>:

#if (INCLUDE_uxTaskPriorityGet == 1)
/* Convert from FreeRTOS priority number to CMSIS type osPriority */
static osPriority makeCmsisPriority (unsigned portBASE_TYPE fpriority)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  osPriority priority = osPriorityError;
 8006352:	2384      	movs	r3, #132	; 0x84
 8006354:	81fb      	strh	r3, [r7, #14]
  
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b06      	cmp	r3, #6
 800635a:	d804      	bhi.n	8006366 <makeCmsisPriority+0x1c>
    priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b03      	subs	r3, #3
 8006362:	b29b      	uxth	r3, r3
 8006364:	81fb      	strh	r3, [r7, #14]
  }
  
  return priority;
 8006366:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800637a:	f3ef 8305 	mrs	r3, IPSR
 800637e:	607b      	str	r3, [r7, #4]
  return(result);
 8006380:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006382:	2b00      	cmp	r3, #0
 8006384:	bf14      	ite	ne
 8006386:	2301      	movne	r3, #1
 8006388:	2300      	moveq	r3, #0
 800638a:	b2db      	uxtb	r3, r3
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr

08006396 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800639a:	f001 f99f 	bl	80076dc <vTaskStartScheduler>
  
  return osOK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063a6:	b089      	sub	sp, #36	; 0x24
 80063a8:	af04      	add	r7, sp, #16
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d020      	beq.n	80063f8 <osThreadCreate+0x54>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d01c      	beq.n	80063f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685c      	ldr	r4, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691e      	ldr	r6, [r3, #16]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff ffa3 	bl	800631c <makeFreeRtosPriority>
 80063d6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063e0:	9202      	str	r2, [sp, #8]
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	9100      	str	r1, [sp, #0]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	4632      	mov	r2, r6
 80063ea:	4629      	mov	r1, r5
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 ff68 	bl	80072c2 <xTaskCreateStatic>
 80063f2:	4603      	mov	r3, r0
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	e01c      	b.n	8006432 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685c      	ldr	r4, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006404:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff ff85 	bl	800631c <makeFreeRtosPriority>
 8006412:	4602      	mov	r2, r0
 8006414:	f107 030c 	add.w	r3, r7, #12
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	9200      	str	r2, [sp, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	4632      	mov	r2, r6
 8006420:	4629      	mov	r1, r5
 8006422:	4620      	mov	r0, r4
 8006424:	f000 ffaa 	bl	800737c <xTaskCreate>
 8006428:	4603      	mov	r3, r0
 800642a:	2b01      	cmp	r3, #1
 800642c:	d001      	beq.n	8006432 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006432:	68fb      	ldr	r3, [r7, #12]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800643c <osThreadGetPriority>:
* @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  current priority value of the thread function.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
*/
osPriority osThreadGetPriority (osThreadId thread_id)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
#if (INCLUDE_uxTaskPriorityGet == 1)
  if (inHandlerMode())
 8006444:	f7ff ff96 	bl	8006374 <inHandlerMode>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <osThreadGetPriority+0x24>
  {
    return makeCmsisPriority(uxTaskPriorityGetFromISR(thread_id));  
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 f918 	bl	8007684 <uxTaskPriorityGetFromISR>
 8006454:	4603      	mov	r3, r0
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff ff77 	bl	800634a <makeCmsisPriority>
 800645c:	4603      	mov	r3, r0
 800645e:	e007      	b.n	8006470 <osThreadGetPriority+0x34>
  }
  else
  {  
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 f8f5 	bl	8007650 <uxTaskPriorityGet>
 8006466:	4603      	mov	r3, r0
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff ff6e 	bl	800634a <makeCmsisPriority>
 800646e:	4603      	mov	r3, r0
  }
#else
  return osPriorityError;
#endif
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <osDelay+0x16>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	e000      	b.n	8006490 <osDelay+0x18>
 800648e:	2301      	movs	r3, #1
 8006490:	4618      	mov	r0, r3
 8006492:	f001 f8a9 	bl	80075e8 <vTaskDelay>
  
  return osOK;
 8006496:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d007      	beq.n	80064c0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4619      	mov	r1, r3
 80064b6:	2001      	movs	r0, #1
 80064b8:	f000 faa9 	bl	8006a0e <xQueueCreateMutexStatic>
 80064bc:	4603      	mov	r3, r0
 80064be:	e003      	b.n	80064c8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80064c0:	2001      	movs	r0, #1
 80064c2:	f000 fa8c 	bl	80069de <xQueueCreateMutex>
 80064c6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80064da:	2300      	movs	r3, #0
 80064dc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <osMutexWait+0x18>
    return osErrorParameter;
 80064e4:	2380      	movs	r3, #128	; 0x80
 80064e6:	e03a      	b.n	800655e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d103      	bne.n	80064fc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e009      	b.n	8006510 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d006      	beq.n	8006510 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <osMutexWait+0x40>
      ticks = 1;
 800650c:	2301      	movs	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006510:	f7ff ff30 	bl	8006374 <inHandlerMode>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d017      	beq.n	800654a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800651a:	f107 0308 	add.w	r3, r7, #8
 800651e:	461a      	mov	r2, r3
 8006520:	2100      	movs	r1, #0
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fd26 	bl	8006f74 <xQueueReceiveFromISR>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d001      	beq.n	8006532 <osMutexWait+0x62>
      return osErrorOS;
 800652e:	23ff      	movs	r3, #255	; 0xff
 8006530:	e015      	b.n	800655e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d011      	beq.n	800655c <osMutexWait+0x8c>
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <osMutexWait+0x98>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	e008      	b.n	800655c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fc05 	bl	8006d5c <xQueueSemaphoreTake>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d001      	beq.n	800655c <osMutexWait+0x8c>
    return osErrorOS;
 8006558:	23ff      	movs	r3, #255	; 0xff
 800655a:	e000      	b.n	800655e <osMutexWait+0x8e>
  }
  
  return osOK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006578:	2300      	movs	r3, #0
 800657a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800657c:	f7ff fefa 	bl	8006374 <inHandlerMode>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d016      	beq.n	80065b4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006586:	f107 0308 	add.w	r3, r7, #8
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fb57 	bl	8006c40 <xQueueGiveFromISR>
 8006592:	4603      	mov	r3, r0
 8006594:	2b01      	cmp	r3, #1
 8006596:	d001      	beq.n	800659c <osMutexRelease+0x30>
      return osErrorOS;
 8006598:	23ff      	movs	r3, #255	; 0xff
 800659a:	e017      	b.n	80065cc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d013      	beq.n	80065ca <osMutexRelease+0x5e>
 80065a2:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <osMutexRelease+0x68>)
 80065a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	e00a      	b.n	80065ca <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80065b4:	2300      	movs	r3, #0
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa42 	bl	8006a44 <xQueueGenericSend>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d001      	beq.n	80065ca <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80065c6:	23ff      	movs	r3, #255	; 0xff
 80065c8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f103 0208 	add.w	r2, r3, #8
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f04f 32ff 	mov.w	r2, #4294967295
 80065f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f103 0208 	add.w	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f103 0208 	add.w	r2, r3, #8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr

0800662e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	601a      	str	r2, [r3, #0]
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d103      	bne.n	8006694 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e00c      	b.n	80066ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3308      	adds	r3, #8
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	e002      	b.n	80066a2 <vListInsert+0x2e>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d2f6      	bcs.n	800669c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6892      	ldr	r2, [r2, #8]
 80066fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6852      	ldr	r2, [r2, #4]
 8006704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d103      	bne.n	8006718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	1e5a      	subs	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr
	...

08006738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006762:	f001 fecb 	bl	80084fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	441a      	add	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	3b01      	subs	r3, #1
 8006794:	68f9      	ldr	r1, [r7, #12]
 8006796:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	441a      	add	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	22ff      	movs	r2, #255	; 0xff
 80067a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	22ff      	movs	r2, #255	; 0xff
 80067ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d114      	bne.n	80067e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01a      	beq.n	80067f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3310      	adds	r3, #16
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 f9c9 	bl	8007b5c <xTaskRemoveFromEventList>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d012      	beq.n	80067f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <xQueueGenericReset+0xcc>)
 80067d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	e009      	b.n	80067f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3310      	adds	r3, #16
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fef6 	bl	80065d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3324      	adds	r3, #36	; 0x24
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fef1 	bl	80065d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067f6:	f001 feb1 	bl	800855c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067fa:	2301      	movs	r3, #1
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08e      	sub	sp, #56	; 0x38
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <xQueueGenericCreateStatic+0x52>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <xQueueGenericCreateStatic+0x56>
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <xQueueGenericCreateStatic+0x58>
 800685e:	2300      	movs	r3, #0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10a      	bne.n	800687a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	623b      	str	r3, [r7, #32]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <xQueueGenericCreateStatic+0x7e>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <xQueueGenericCreateStatic+0x82>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <xQueueGenericCreateStatic+0x84>
 800688a:	2300      	movs	r3, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	61fb      	str	r3, [r7, #28]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80068a6:	2348      	movs	r3, #72	; 0x48
 80068a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b48      	cmp	r3, #72	; 0x48
 80068ae:	d00a      	beq.n	80068c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	61bb      	str	r3, [r7, #24]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	4613      	mov	r3, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f83f 	bl	800696c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3730      	adds	r7, #48	; 0x30
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <xQueueGenericCreate+0x2a>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	613b      	str	r3, [r7, #16]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	fb02 f303 	mul.w	r3, r2, r3
 800692a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	3348      	adds	r3, #72	; 0x48
 8006930:	4618      	mov	r0, r3
 8006932:	f001 fee3 	bl	80086fc <pvPortMalloc>
 8006936:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d011      	beq.n	8006962 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	3348      	adds	r3, #72	; 0x48
 8006946:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006950:	79fa      	ldrb	r2, [r7, #7]
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	4613      	mov	r3, r2
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f805 	bl	800696c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006962:	69bb      	ldr	r3, [r7, #24]
	}
 8006964:	4618      	mov	r0, r3
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d103      	bne.n	8006988 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e002      	b.n	800698e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800699a:	2101      	movs	r1, #1
 800699c:	69b8      	ldr	r0, [r7, #24]
 800699e:	f7ff fecb 	bl	8006738 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00e      	beq.n	80069d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80069ca:	2300      	movs	r3, #0
 80069cc:	2200      	movs	r2, #0
 80069ce:	2100      	movs	r1, #0
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f837 	bl	8006a44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b086      	sub	sp, #24
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	4603      	mov	r3, r0
 80069e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80069e8:	2301      	movs	r3, #1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6939      	ldr	r1, [r7, #16]
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f7ff ff7e 	bl	80068f8 <xQueueGenericCreate>
 80069fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff ffd3 	bl	80069aa <prvInitialiseMutex>

		return xNewQueue;
 8006a04:	68fb      	ldr	r3, [r7, #12]
	}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b088      	sub	sp, #32
 8006a12:	af02      	add	r7, sp, #8
 8006a14:	4603      	mov	r3, r0
 8006a16:	6039      	str	r1, [r7, #0]
 8006a18:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	6939      	ldr	r1, [r7, #16]
 8006a2c:	6978      	ldr	r0, [r7, #20]
 8006a2e:	f7ff feeb 	bl	8006808 <xQueueGenericCreateStatic>
 8006a32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff ffb8 	bl	80069aa <prvInitialiseMutex>

		return xNewQueue;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
	}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08e      	sub	sp, #56	; 0x38
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a52:	2300      	movs	r3, #0
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xQueueGenericSend+0x32>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <xQueueGenericSend+0x40>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <xQueueGenericSend+0x44>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <xQueueGenericSend+0x46>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <xQueueGenericSend+0x60>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d103      	bne.n	8006ab2 <xQueueGenericSend+0x6e>
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <xQueueGenericSend+0x72>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <xQueueGenericSend+0x74>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xQueueGenericSend+0x8e>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	623b      	str	r3, [r7, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ad2:	f001 f9ff 	bl	8007ed4 <xTaskGetSchedulerState>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <xQueueGenericSend+0x9e>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <xQueueGenericSend+0xa2>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <xQueueGenericSend+0xa4>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xQueueGenericSend+0xbe>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	61fb      	str	r3, [r7, #28]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b02:	f001 fcfb 	bl	80084fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d302      	bcc.n	8006b18 <xQueueGenericSend+0xd4>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d129      	bne.n	8006b6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b1e:	f000 fac0 	bl	80070a2 <prvCopyDataToQueue>
 8006b22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d010      	beq.n	8006b4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	3324      	adds	r3, #36	; 0x24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 f813 	bl	8007b5c <xTaskRemoveFromEventList>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d013      	beq.n	8006b64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b3c:	4b3f      	ldr	r3, [pc, #252]	; (8006c3c <xQueueGenericSend+0x1f8>)
 8006b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	e00a      	b.n	8006b64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b54:	4b39      	ldr	r3, [pc, #228]	; (8006c3c <xQueueGenericSend+0x1f8>)
 8006b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b64:	f001 fcfa 	bl	800855c <vPortExitCritical>
				return pdPASS;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e063      	b.n	8006c34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d103      	bne.n	8006b7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b72:	f001 fcf3 	bl	800855c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	e05c      	b.n	8006c34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b80:	f107 0314 	add.w	r3, r7, #20
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 f84b 	bl	8007c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b8e:	f001 fce5 	bl	800855c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b92:	f000 fe03 	bl	800779c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b96:	f001 fcb1 	bl	80084fc <vPortEnterCritical>
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ba0:	b25b      	sxtb	r3, r3
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d103      	bne.n	8006bb0 <xQueueGenericSend+0x16c>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb6:	b25b      	sxtb	r3, r3
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d103      	bne.n	8006bc6 <xQueueGenericSend+0x182>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc6:	f001 fcc9 	bl	800855c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bca:	1d3a      	adds	r2, r7, #4
 8006bcc:	f107 0314 	add.w	r3, r7, #20
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f83a 	bl	8007c4c <xTaskCheckForTimeOut>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d124      	bne.n	8006c28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be0:	f000 fb57 	bl	8007292 <prvIsQueueFull>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d018      	beq.n	8006c1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	3310      	adds	r3, #16
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 ff8e 	bl	8007b14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfa:	f000 fae2 	bl	80071c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bfe:	f000 fddb 	bl	80077b8 <xTaskResumeAll>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f47f af7c 	bne.w	8006b02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <xQueueGenericSend+0x1f8>)
 8006c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	e772      	b.n	8006b02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c1e:	f000 fad0 	bl	80071c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c22:	f000 fdc9 	bl	80077b8 <xTaskResumeAll>
 8006c26:	e76c      	b.n	8006b02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c2a:	f000 faca 	bl	80071c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c2e:	f000 fdc3 	bl	80077b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3738      	adds	r7, #56	; 0x38
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08e      	sub	sp, #56	; 0x38
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	623b      	str	r3, [r7, #32]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	61fb      	str	r3, [r7, #28]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d103      	bne.n	8006c98 <xQueueGiveFromISR+0x58>
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <xQueueGiveFromISR+0x5c>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <xQueueGiveFromISR+0x5e>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	61bb      	str	r3, [r7, #24]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cb8:	f001 fce2 	bl	8008680 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006cbc:	f3ef 8211 	mrs	r2, BASEPRI
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	617a      	str	r2, [r7, #20]
 8006cd2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006cd4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d22b      	bcs.n	8006d40 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d112      	bne.n	8006d2a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d016      	beq.n	8006d3a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	3324      	adds	r3, #36	; 0x24
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 ff23 	bl	8007b5c <xTaskRemoveFromEventList>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00e      	beq.n	8006d3a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00b      	beq.n	8006d3a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	e007      	b.n	8006d3a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d2e:	3301      	adds	r3, #1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	b25a      	sxtb	r2, r3
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3e:	e001      	b.n	8006d44 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3738      	adds	r7, #56	; 0x38
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08e      	sub	sp, #56	; 0x38
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	623b      	str	r3, [r7, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	61fb      	str	r3, [r7, #28]
}
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dac:	f001 f892 	bl	8007ed4 <xTaskGetSchedulerState>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d102      	bne.n	8006dbc <xQueueSemaphoreTake+0x60>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <xQueueSemaphoreTake+0x64>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <xQueueSemaphoreTake+0x66>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	61bb      	str	r3, [r7, #24]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ddc:	f001 fb8e 	bl	80084fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d024      	beq.n	8006e36 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	1e5a      	subs	r2, r3, #1
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006dfc:	f001 fa12 	bl	8008224 <pvTaskIncrementMutexHeldCount>
 8006e00:	4602      	mov	r2, r0
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00f      	beq.n	8006e2e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	3310      	adds	r3, #16
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fea2 	bl	8007b5c <xTaskRemoveFromEventList>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e1e:	4b54      	ldr	r3, [pc, #336]	; (8006f70 <xQueueSemaphoreTake+0x214>)
 8006e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e2e:	f001 fb95 	bl	800855c <vPortExitCritical>
				return pdPASS;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e097      	b.n	8006f66 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d111      	bne.n	8006e60 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	617b      	str	r3, [r7, #20]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e58:	f001 fb80 	bl	800855c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e082      	b.n	8006f66 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e66:	f107 030c 	add.w	r3, r7, #12
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fed8 	bl	8007c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e70:	2301      	movs	r3, #1
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e74:	f001 fb72 	bl	800855c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e78:	f000 fc90 	bl	800779c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e7c:	f001 fb3e 	bl	80084fc <vPortEnterCritical>
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e86:	b25b      	sxtb	r3, r3
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8c:	d103      	bne.n	8006e96 <xQueueSemaphoreTake+0x13a>
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e9c:	b25b      	sxtb	r3, r3
 8006e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea2:	d103      	bne.n	8006eac <xQueueSemaphoreTake+0x150>
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eac:	f001 fb56 	bl	800855c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eb0:	463a      	mov	r2, r7
 8006eb2:	f107 030c 	add.w	r3, r7, #12
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fec7 	bl	8007c4c <xTaskCheckForTimeOut>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d132      	bne.n	8006f2a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ec6:	f000 f9ce 	bl	8007266 <prvIsQueueEmpty>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d026      	beq.n	8006f1e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006ed8:	f001 fb10 	bl	80084fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 f815 	bl	8007f10 <xTaskPriorityInherit>
 8006ee6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ee8:	f001 fb38 	bl	800855c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	3324      	adds	r3, #36	; 0x24
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fe0d 	bl	8007b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006efa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006efc:	f000 f961 	bl	80071c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f00:	f000 fc5a 	bl	80077b8 <xTaskResumeAll>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f47f af68 	bne.w	8006ddc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006f0c:	4b18      	ldr	r3, [pc, #96]	; (8006f70 <xQueueSemaphoreTake+0x214>)
 8006f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	e75e      	b.n	8006ddc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f20:	f000 f94f 	bl	80071c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f24:	f000 fc48 	bl	80077b8 <xTaskResumeAll>
 8006f28:	e758      	b.n	8006ddc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f2c:	f000 f949 	bl	80071c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f30:	f000 fc42 	bl	80077b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f36:	f000 f996 	bl	8007266 <prvIsQueueEmpty>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f43f af4d 	beq.w	8006ddc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00d      	beq.n	8006f64 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006f48:	f001 fad8 	bl	80084fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f4e:	f000 f891 	bl	8007074 <prvGetDisinheritPriorityAfterTimeout>
 8006f52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 f8d4 	bl	8008108 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f60:	f001 fafc 	bl	800855c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3738      	adds	r7, #56	; 0x38
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08e      	sub	sp, #56	; 0x38
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	623b      	str	r3, [r7, #32]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d103      	bne.n	8006fae <xQueueReceiveFromISR+0x3a>
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <xQueueReceiveFromISR+0x3e>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <xQueueReceiveFromISR+0x40>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	61fb      	str	r3, [r7, #28]
}
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fce:	f001 fb57 	bl	8008680 <vPortValidateInterruptPriority>
	__asm volatile
 8006fd2:	f3ef 8211 	mrs	r2, BASEPRI
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	61ba      	str	r2, [r7, #24]
 8006fe8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d02f      	beq.n	800705a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007008:	f000 f8b5 	bl	8007176 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	1e5a      	subs	r2, r3, #1
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007014:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d112      	bne.n	8007044 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	3310      	adds	r3, #16
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fd96 	bl	8007b5c <xTaskRemoveFromEventList>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00e      	beq.n	8007054 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e007      	b.n	8007054 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007048:	3301      	adds	r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	b25a      	sxtb	r2, r3
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007054:	2301      	movs	r3, #1
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
 8007058:	e001      	b.n	800705e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800705a:	2300      	movs	r3, #0
 800705c:	637b      	str	r3, [r7, #52]	; 0x34
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f383 8811 	msr	BASEPRI, r3
}
 8007068:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800706a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800706c:	4618      	mov	r0, r3
 800706e:	3738      	adds	r7, #56	; 0x38
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	2b00      	cmp	r3, #0
 8007082:	d006      	beq.n	8007092 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1c3 0307 	rsb	r3, r3, #7
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e001      	b.n	8007096 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007096:	68fb      	ldr	r3, [r7, #12]
	}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr

080070a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b086      	sub	sp, #24
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10d      	bne.n	80070dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d14d      	bne.n	8007164 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 ff95 	bl	8007ffc <xTaskPriorityDisinherit>
 80070d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
 80070da:	e043      	b.n	8007164 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d119      	bne.n	8007116 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6858      	ldr	r0, [r3, #4]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	461a      	mov	r2, r3
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	f002 fd7e 	bl	8009bee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	441a      	add	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	429a      	cmp	r2, r3
 800710a:	d32b      	bcc.n	8007164 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	605a      	str	r2, [r3, #4]
 8007114:	e026      	b.n	8007164 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68d8      	ldr	r0, [r3, #12]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	461a      	mov	r2, r3
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	f002 fd64 	bl	8009bee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	425b      	negs	r3, r3
 8007130:	441a      	add	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d207      	bcs.n	8007152 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	425b      	negs	r3, r3
 800714c:	441a      	add	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d105      	bne.n	8007164 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	3b01      	subs	r3, #1
 8007162:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800716c:	697b      	ldr	r3, [r7, #20]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	2b00      	cmp	r3, #0
 8007186:	d018      	beq.n	80071ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	441a      	add	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d303      	bcc.n	80071aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68d9      	ldr	r1, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	461a      	mov	r2, r3
 80071b4:	6838      	ldr	r0, [r7, #0]
 80071b6:	f002 fd1a 	bl	8009bee <memcpy>
	}
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071ca:	f001 f997 	bl	80084fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071d6:	e011      	b.n	80071fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d012      	beq.n	8007206 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fcb9 	bl	8007b5c <xTaskRemoveFromEventList>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071f0:	f000 fd8e 	bl	8007d10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007200:	2b00      	cmp	r3, #0
 8007202:	dce9      	bgt.n	80071d8 <prvUnlockQueue+0x16>
 8007204:	e000      	b.n	8007208 <prvUnlockQueue+0x46>
					break;
 8007206:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	22ff      	movs	r2, #255	; 0xff
 800720c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007210:	f001 f9a4 	bl	800855c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007214:	f001 f972 	bl	80084fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800721e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007220:	e011      	b.n	8007246 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d012      	beq.n	8007250 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3310      	adds	r3, #16
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fc94 	bl	8007b5c <xTaskRemoveFromEventList>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800723a:	f000 fd69 	bl	8007d10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	3b01      	subs	r3, #1
 8007242:	b2db      	uxtb	r3, r3
 8007244:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800724a:	2b00      	cmp	r3, #0
 800724c:	dce9      	bgt.n	8007222 <prvUnlockQueue+0x60>
 800724e:	e000      	b.n	8007252 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007250:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	22ff      	movs	r2, #255	; 0xff
 8007256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800725a:	f001 f97f 	bl	800855c <vPortExitCritical>
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800726e:	f001 f945 	bl	80084fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	2b00      	cmp	r3, #0
 8007278:	d102      	bne.n	8007280 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800727a:	2301      	movs	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	e001      	b.n	8007284 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007284:	f001 f96a 	bl	800855c <vPortExitCritical>

	return xReturn;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800729a:	f001 f92f 	bl	80084fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d102      	bne.n	80072b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072aa:	2301      	movs	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e001      	b.n	80072b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072b4:	f001 f952 	bl	800855c <vPortExitCritical>

	return xReturn;
 80072b8:	68fb      	ldr	r3, [r7, #12]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b08e      	sub	sp, #56	; 0x38
 80072c6:	af04      	add	r7, sp, #16
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <xTaskCreateStatic+0x2a>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	623b      	str	r3, [r7, #32]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <xTaskCreateStatic+0x46>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	61fb      	str	r3, [r7, #28]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007308:	2354      	movs	r3, #84	; 0x54
 800730a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b54      	cmp	r3, #84	; 0x54
 8007310:	d00a      	beq.n	8007328 <xTaskCreateStatic+0x66>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	61bb      	str	r3, [r7, #24]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007328:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01e      	beq.n	800736e <xTaskCreateStatic+0xac>
 8007330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007332:	2b00      	cmp	r3, #0
 8007334:	d01b      	beq.n	800736e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800733e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	2202      	movs	r2, #2
 8007344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007348:	2300      	movs	r3, #0
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	9302      	str	r3, [sp, #8]
 8007350:	f107 0314 	add.w	r3, r7, #20
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f850 	bl	8007406 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007368:	f000 f8d4 	bl	8007514 <prvAddNewTaskToReadyList>
 800736c:	e001      	b.n	8007372 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007372:	697b      	ldr	r3, [r7, #20]
	}
 8007374:	4618      	mov	r0, r3
 8007376:	3728      	adds	r7, #40	; 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08c      	sub	sp, #48	; 0x30
 8007380:	af04      	add	r7, sp, #16
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	4613      	mov	r3, r2
 800738a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4618      	mov	r0, r3
 8007392:	f001 f9b3 	bl	80086fc <pvPortMalloc>
 8007396:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00e      	beq.n	80073bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800739e:	2054      	movs	r0, #84	; 0x54
 80073a0:	f001 f9ac 	bl	80086fc <pvPortMalloc>
 80073a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
 80073b2:	e005      	b.n	80073c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073b4:	6978      	ldr	r0, [r7, #20]
 80073b6:	f001 fa6d 	bl	8008894 <vPortFree>
 80073ba:	e001      	b.n	80073c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d017      	beq.n	80073f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	2300      	movs	r3, #0
 80073d2:	9303      	str	r3, [sp, #12]
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	9302      	str	r3, [sp, #8]
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f80e 	bl	8007406 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073ea:	69f8      	ldr	r0, [r7, #28]
 80073ec:	f000 f892 	bl	8007514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073f0:	2301      	movs	r3, #1
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	e002      	b.n	80073fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
 80073fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073fc:	69bb      	ldr	r3, [r7, #24]
	}
 80073fe:	4618      	mov	r0, r3
 8007400:	3720      	adds	r7, #32
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b088      	sub	sp, #32
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800741e:	3b01      	subs	r3, #1
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	f023 0307 	bic.w	r3, r3, #7
 800742c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <prvInitialiseNewTask+0x48>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	617b      	str	r3, [r7, #20]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01f      	beq.n	8007494 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e012      	b.n	8007480 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	7819      	ldrb	r1, [r3, #0]
 8007462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	4413      	add	r3, r2
 8007468:	3334      	adds	r3, #52	; 0x34
 800746a:	460a      	mov	r2, r1
 800746c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	4413      	add	r3, r2
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d006      	beq.n	8007488 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	3301      	adds	r3, #1
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	2b0f      	cmp	r3, #15
 8007484:	d9e9      	bls.n	800745a <prvInitialiseNewTask+0x54>
 8007486:	e000      	b.n	800748a <prvInitialiseNewTask+0x84>
			{
				break;
 8007488:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007492:	e003      	b.n	800749c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	2b06      	cmp	r3, #6
 80074a0:	d901      	bls.n	80074a6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074a2:	2306      	movs	r3, #6
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	2200      	movs	r2, #0
 80074b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	3304      	adds	r3, #4
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff f8aa 	bl	8006616 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	3318      	adds	r3, #24
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff f8a5 	bl	8006616 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	f1c3 0207 	rsb	r2, r3, #7
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	2200      	movs	r2, #0
 80074e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	68f9      	ldr	r1, [r7, #12]
 80074f4:	69b8      	ldr	r0, [r7, #24]
 80074f6:	f000 ff0f 	bl	8008318 <pxPortInitialiseStack>
 80074fa:	4602      	mov	r2, r0
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800750c:	bf00      	nop
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800751c:	f000 ffee 	bl	80084fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007520:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <prvAddNewTaskToReadyList+0xb8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	4a29      	ldr	r2, [pc, #164]	; (80075cc <prvAddNewTaskToReadyList+0xb8>)
 8007528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800752a:	4b29      	ldr	r3, [pc, #164]	; (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007532:	4a27      	ldr	r2, [pc, #156]	; (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007538:	4b24      	ldr	r3, [pc, #144]	; (80075cc <prvAddNewTaskToReadyList+0xb8>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d110      	bne.n	8007562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007540:	f000 fc0a 	bl	8007d58 <prvInitialiseTaskLists>
 8007544:	e00d      	b.n	8007562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007546:	4b23      	ldr	r3, [pc, #140]	; (80075d4 <prvAddNewTaskToReadyList+0xc0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800754e:	4b20      	ldr	r3, [pc, #128]	; (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	429a      	cmp	r2, r3
 800755a:	d802      	bhi.n	8007562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800755c:	4a1c      	ldr	r2, [pc, #112]	; (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007562:	4b1d      	ldr	r3, [pc, #116]	; (80075d8 <prvAddNewTaskToReadyList+0xc4>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	4a1b      	ldr	r2, [pc, #108]	; (80075d8 <prvAddNewTaskToReadyList+0xc4>)
 800756a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	2201      	movs	r2, #1
 8007572:	409a      	lsls	r2, r3
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <prvAddNewTaskToReadyList+0xc8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4313      	orrs	r3, r2
 800757a:	4a18      	ldr	r2, [pc, #96]	; (80075dc <prvAddNewTaskToReadyList+0xc8>)
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4a15      	ldr	r2, [pc, #84]	; (80075e0 <prvAddNewTaskToReadyList+0xcc>)
 800758c:	441a      	add	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3304      	adds	r3, #4
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f7ff f84a 	bl	800662e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800759a:	f000 ffdf 	bl	800855c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800759e:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <prvAddNewTaskToReadyList+0xc0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00e      	beq.n	80075c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d207      	bcs.n	80075c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <prvAddNewTaskToReadyList+0xd0>)
 80075b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	200007c0 	.word	0x200007c0
 80075d0:	200006c0 	.word	0x200006c0
 80075d4:	200007cc 	.word	0x200007cc
 80075d8:	200007dc 	.word	0x200007dc
 80075dc:	200007c8 	.word	0x200007c8
 80075e0:	200006c4 	.word	0x200006c4
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d017      	beq.n	800762a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075fa:	4b13      	ldr	r3, [pc, #76]	; (8007648 <vTaskDelay+0x60>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <vTaskDelay+0x30>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60bb      	str	r3, [r7, #8]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007618:	f000 f8c0 	bl	800779c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800761c:	2100      	movs	r1, #0
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fe14 	bl	800824c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007624:	f000 f8c8 	bl	80077b8 <xTaskResumeAll>
 8007628:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d107      	bne.n	8007640 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007630:	4b06      	ldr	r3, [pc, #24]	; (800764c <vTaskDelay+0x64>)
 8007632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	200007e8 	.word	0x200007e8
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8007658:	f000 ff50 	bl	80084fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <uxTaskPriorityGet+0x18>
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <uxTaskPriorityGet+0x30>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	e000      	b.n	800766a <uxTaskPriorityGet+0x1a>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8007672:	f000 ff73 	bl	800855c <vPortExitCritical>

		return uxReturn;
 8007676:	68bb      	ldr	r3, [r7, #8]
	}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	200006c0 	.word	0x200006c0

08007684 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800768c:	f000 fff8 	bl	8008680 <vPortValidateInterruptPriority>
	__asm volatile
 8007690:	f3ef 8211 	mrs	r2, BASEPRI
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	613a      	str	r2, [r7, #16]
 80076a6:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 80076a8:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 80076aa:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <uxTaskPriorityGetFromISR+0x34>
 80076b2:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <uxTaskPriorityGetFromISR+0x54>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	e000      	b.n	80076ba <uxTaskPriorityGetFromISR+0x36>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f383 8811 	msr	BASEPRI, r3
}
 80076cc:	bf00      	nop
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 80076ce:	697b      	ldr	r3, [r7, #20]
	}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3720      	adds	r7, #32
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	200006c0 	.word	0x200006c0

080076dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ea:	463a      	mov	r2, r7
 80076ec:	1d39      	adds	r1, r7, #4
 80076ee:	f107 0308 	add.w	r3, r7, #8
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7f9 fba4 	bl	8000e40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	9202      	str	r2, [sp, #8]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	2300      	movs	r3, #0
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	2300      	movs	r3, #0
 8007708:	460a      	mov	r2, r1
 800770a:	491e      	ldr	r1, [pc, #120]	; (8007784 <vTaskStartScheduler+0xa8>)
 800770c:	481e      	ldr	r0, [pc, #120]	; (8007788 <vTaskStartScheduler+0xac>)
 800770e:	f7ff fdd8 	bl	80072c2 <xTaskCreateStatic>
 8007712:	4603      	mov	r3, r0
 8007714:	4a1d      	ldr	r2, [pc, #116]	; (800778c <vTaskStartScheduler+0xb0>)
 8007716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007718:	4b1c      	ldr	r3, [pc, #112]	; (800778c <vTaskStartScheduler+0xb0>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007720:	2301      	movs	r3, #1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	e001      	b.n	800772a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d116      	bne.n	800775e <vTaskStartScheduler+0x82>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	613b      	str	r3, [r7, #16]
}
 8007742:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007744:	4b12      	ldr	r3, [pc, #72]	; (8007790 <vTaskStartScheduler+0xb4>)
 8007746:	f04f 32ff 	mov.w	r2, #4294967295
 800774a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800774c:	4b11      	ldr	r3, [pc, #68]	; (8007794 <vTaskStartScheduler+0xb8>)
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <vTaskStartScheduler+0xbc>)
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007758:	f000 fe5e 	bl	8008418 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800775c:	e00e      	b.n	800777c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d10a      	bne.n	800777c <vTaskStartScheduler+0xa0>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	60fb      	str	r3, [r7, #12]
}
 8007778:	bf00      	nop
 800777a:	e7fe      	b.n	800777a <vTaskStartScheduler+0x9e>
}
 800777c:	bf00      	nop
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	0800de70 	.word	0x0800de70
 8007788:	08007d29 	.word	0x08007d29
 800778c:	200007e4 	.word	0x200007e4
 8007790:	200007e0 	.word	0x200007e0
 8007794:	200007cc 	.word	0x200007cc
 8007798:	200007c4 	.word	0x200007c4

0800779c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077a0:	4b04      	ldr	r3, [pc, #16]	; (80077b4 <vTaskSuspendAll+0x18>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3301      	adds	r3, #1
 80077a6:	4a03      	ldr	r2, [pc, #12]	; (80077b4 <vTaskSuspendAll+0x18>)
 80077a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077aa:	bf00      	nop
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	200007e8 	.word	0x200007e8

080077b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077c6:	4b41      	ldr	r3, [pc, #260]	; (80078cc <xTaskResumeAll+0x114>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	603b      	str	r3, [r7, #0]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077e4:	f000 fe8a 	bl	80084fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077e8:	4b38      	ldr	r3, [pc, #224]	; (80078cc <xTaskResumeAll+0x114>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	4a37      	ldr	r2, [pc, #220]	; (80078cc <xTaskResumeAll+0x114>)
 80077f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077f2:	4b36      	ldr	r3, [pc, #216]	; (80078cc <xTaskResumeAll+0x114>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d161      	bne.n	80078be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077fa:	4b35      	ldr	r3, [pc, #212]	; (80078d0 <xTaskResumeAll+0x118>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d05d      	beq.n	80078be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007802:	e02e      	b.n	8007862 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007804:	4b33      	ldr	r3, [pc, #204]	; (80078d4 <xTaskResumeAll+0x11c>)
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3318      	adds	r3, #24
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe ff67 	bl	80066e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3304      	adds	r3, #4
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe ff62 	bl	80066e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	2201      	movs	r2, #1
 8007826:	409a      	lsls	r2, r3
 8007828:	4b2b      	ldr	r3, [pc, #172]	; (80078d8 <xTaskResumeAll+0x120>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4313      	orrs	r3, r2
 800782e:	4a2a      	ldr	r2, [pc, #168]	; (80078d8 <xTaskResumeAll+0x120>)
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4a27      	ldr	r2, [pc, #156]	; (80078dc <xTaskResumeAll+0x124>)
 8007840:	441a      	add	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3304      	adds	r3, #4
 8007846:	4619      	mov	r1, r3
 8007848:	4610      	mov	r0, r2
 800784a:	f7fe fef0 	bl	800662e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007852:	4b23      	ldr	r3, [pc, #140]	; (80078e0 <xTaskResumeAll+0x128>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	429a      	cmp	r2, r3
 800785a:	d302      	bcc.n	8007862 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800785c:	4b21      	ldr	r3, [pc, #132]	; (80078e4 <xTaskResumeAll+0x12c>)
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007862:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <xTaskResumeAll+0x11c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1cc      	bne.n	8007804 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007870:	f000 fb10 	bl	8007e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007874:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <xTaskResumeAll+0x130>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d010      	beq.n	80078a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007880:	f000 f836 	bl	80078f0 <xTaskIncrementTick>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800788a:	4b16      	ldr	r3, [pc, #88]	; (80078e4 <xTaskResumeAll+0x12c>)
 800788c:	2201      	movs	r2, #1
 800788e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3b01      	subs	r3, #1
 8007894:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1f1      	bne.n	8007880 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800789c:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <xTaskResumeAll+0x130>)
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078a2:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <xTaskResumeAll+0x12c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078aa:	2301      	movs	r3, #1
 80078ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078ae:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <xTaskResumeAll+0x134>)
 80078b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078be:	f000 fe4d 	bl	800855c <vPortExitCritical>

	return xAlreadyYielded;
 80078c2:	68bb      	ldr	r3, [r7, #8]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	200007e8 	.word	0x200007e8
 80078d0:	200007c0 	.word	0x200007c0
 80078d4:	20000780 	.word	0x20000780
 80078d8:	200007c8 	.word	0x200007c8
 80078dc:	200006c4 	.word	0x200006c4
 80078e0:	200006c0 	.word	0x200006c0
 80078e4:	200007d4 	.word	0x200007d4
 80078e8:	200007d0 	.word	0x200007d0
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078fa:	4b4e      	ldr	r3, [pc, #312]	; (8007a34 <xTaskIncrementTick+0x144>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f040 808e 	bne.w	8007a20 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007904:	4b4c      	ldr	r3, [pc, #304]	; (8007a38 <xTaskIncrementTick+0x148>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3301      	adds	r3, #1
 800790a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800790c:	4a4a      	ldr	r2, [pc, #296]	; (8007a38 <xTaskIncrementTick+0x148>)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d120      	bne.n	800795a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007918:	4b48      	ldr	r3, [pc, #288]	; (8007a3c <xTaskIncrementTick+0x14c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <xTaskIncrementTick+0x48>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	603b      	str	r3, [r7, #0]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <xTaskIncrementTick+0x46>
 8007938:	4b40      	ldr	r3, [pc, #256]	; (8007a3c <xTaskIncrementTick+0x14c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	4b40      	ldr	r3, [pc, #256]	; (8007a40 <xTaskIncrementTick+0x150>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a3e      	ldr	r2, [pc, #248]	; (8007a3c <xTaskIncrementTick+0x14c>)
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	4a3e      	ldr	r2, [pc, #248]	; (8007a40 <xTaskIncrementTick+0x150>)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	4b3d      	ldr	r3, [pc, #244]	; (8007a44 <xTaskIncrementTick+0x154>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	4a3c      	ldr	r2, [pc, #240]	; (8007a44 <xTaskIncrementTick+0x154>)
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	f000 fa9d 	bl	8007e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800795a:	4b3b      	ldr	r3, [pc, #236]	; (8007a48 <xTaskIncrementTick+0x158>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	429a      	cmp	r2, r3
 8007962:	d348      	bcc.n	80079f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007964:	4b35      	ldr	r3, [pc, #212]	; (8007a3c <xTaskIncrementTick+0x14c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d104      	bne.n	8007978 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <xTaskIncrementTick+0x158>)
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	601a      	str	r2, [r3, #0]
					break;
 8007976:	e03e      	b.n	80079f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007978:	4b30      	ldr	r3, [pc, #192]	; (8007a3c <xTaskIncrementTick+0x14c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	429a      	cmp	r2, r3
 800798e:	d203      	bcs.n	8007998 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007990:	4a2d      	ldr	r2, [pc, #180]	; (8007a48 <xTaskIncrementTick+0x158>)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007996:	e02e      	b.n	80079f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	3304      	adds	r3, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe fea1 	bl	80066e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	3318      	adds	r3, #24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fe98 	bl	80066e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	2201      	movs	r2, #1
 80079ba:	409a      	lsls	r2, r3
 80079bc:	4b23      	ldr	r3, [pc, #140]	; (8007a4c <xTaskIncrementTick+0x15c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	4a22      	ldr	r2, [pc, #136]	; (8007a4c <xTaskIncrementTick+0x15c>)
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4a1f      	ldr	r2, [pc, #124]	; (8007a50 <xTaskIncrementTick+0x160>)
 80079d4:	441a      	add	r2, r3
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	3304      	adds	r3, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7fe fe26 	bl	800662e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	4b1b      	ldr	r3, [pc, #108]	; (8007a54 <xTaskIncrementTick+0x164>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d3b9      	bcc.n	8007964 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f4:	e7b6      	b.n	8007964 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079f6:	4b17      	ldr	r3, [pc, #92]	; (8007a54 <xTaskIncrementTick+0x164>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	4914      	ldr	r1, [pc, #80]	; (8007a50 <xTaskIncrementTick+0x160>)
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d901      	bls.n	8007a12 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a12:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <xTaskIncrementTick+0x168>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d007      	beq.n	8007a2a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e004      	b.n	8007a2a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a20:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <xTaskIncrementTick+0x16c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3301      	adds	r3, #1
 8007a26:	4a0d      	ldr	r2, [pc, #52]	; (8007a5c <xTaskIncrementTick+0x16c>)
 8007a28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a2a:	697b      	ldr	r3, [r7, #20]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	200007e8 	.word	0x200007e8
 8007a38:	200007c4 	.word	0x200007c4
 8007a3c:	20000778 	.word	0x20000778
 8007a40:	2000077c 	.word	0x2000077c
 8007a44:	200007d8 	.word	0x200007d8
 8007a48:	200007e0 	.word	0x200007e0
 8007a4c:	200007c8 	.word	0x200007c8
 8007a50:	200006c4 	.word	0x200006c4
 8007a54:	200006c0 	.word	0x200006c0
 8007a58:	200007d4 	.word	0x200007d4
 8007a5c:	200007d0 	.word	0x200007d0

08007a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a66:	4b26      	ldr	r3, [pc, #152]	; (8007b00 <vTaskSwitchContext+0xa0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a6e:	4b25      	ldr	r3, [pc, #148]	; (8007b04 <vTaskSwitchContext+0xa4>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a74:	e03f      	b.n	8007af6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007a76:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <vTaskSwitchContext+0xa4>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a7c:	4b22      	ldr	r3, [pc, #136]	; (8007b08 <vTaskSwitchContext+0xa8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	fab3 f383 	clz	r3, r3
 8007a88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	f1c3 031f 	rsb	r3, r3, #31
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	491e      	ldr	r1, [pc, #120]	; (8007b0c <vTaskSwitchContext+0xac>)
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <vTaskSwitchContext+0x5c>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	607b      	str	r3, [r7, #4]
}
 8007ab8:	bf00      	nop
 8007aba:	e7fe      	b.n	8007aba <vTaskSwitchContext+0x5a>
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4a11      	ldr	r2, [pc, #68]	; (8007b0c <vTaskSwitchContext+0xac>)
 8007ac8:	4413      	add	r3, r2
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	605a      	str	r2, [r3, #4]
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	3308      	adds	r3, #8
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d104      	bne.n	8007aec <vTaskSwitchContext+0x8c>
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	605a      	str	r2, [r3, #4]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	4a07      	ldr	r2, [pc, #28]	; (8007b10 <vTaskSwitchContext+0xb0>)
 8007af4:	6013      	str	r3, [r2, #0]
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr
 8007b00:	200007e8 	.word	0x200007e8
 8007b04:	200007d4 	.word	0x200007d4
 8007b08:	200007c8 	.word	0x200007c8
 8007b0c:	200006c4 	.word	0x200006c4
 8007b10:	200006c0 	.word	0x200006c0

08007b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	60fb      	str	r3, [r7, #12]
}
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <vTaskPlaceOnEventList+0x44>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3318      	adds	r3, #24
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fe fd96 	bl	8006674 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b48:	2101      	movs	r1, #1
 8007b4a:	6838      	ldr	r0, [r7, #0]
 8007b4c:	f000 fb7e 	bl	800824c <prvAddCurrentTaskToDelayedList>
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	200006c0 	.word	0x200006c0

08007b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	60fb      	str	r3, [r7, #12]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3318      	adds	r3, #24
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fda9 	bl	80066e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b92:	4b1d      	ldr	r3, [pc, #116]	; (8007c08 <xTaskRemoveFromEventList+0xac>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d11c      	bne.n	8007bd4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fda0 	bl	80066e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	2201      	movs	r2, #1
 8007baa:	409a      	lsls	r2, r3
 8007bac:	4b17      	ldr	r3, [pc, #92]	; (8007c0c <xTaskRemoveFromEventList+0xb0>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <xTaskRemoveFromEventList+0xb0>)
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <xTaskRemoveFromEventList+0xb4>)
 8007bc4:	441a      	add	r2, r3
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4610      	mov	r0, r2
 8007bce:	f7fe fd2e 	bl	800662e <vListInsertEnd>
 8007bd2:	e005      	b.n	8007be0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3318      	adds	r3, #24
 8007bd8:	4619      	mov	r1, r3
 8007bda:	480e      	ldr	r0, [pc, #56]	; (8007c14 <xTaskRemoveFromEventList+0xb8>)
 8007bdc:	f7fe fd27 	bl	800662e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <xTaskRemoveFromEventList+0xbc>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d905      	bls.n	8007bfa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bf2:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <xTaskRemoveFromEventList+0xc0>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	e001      	b.n	8007bfe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bfe:	697b      	ldr	r3, [r7, #20]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	200007e8 	.word	0x200007e8
 8007c0c:	200007c8 	.word	0x200007c8
 8007c10:	200006c4 	.word	0x200006c4
 8007c14:	20000780 	.word	0x20000780
 8007c18:	200006c0 	.word	0x200006c0
 8007c1c:	200007d4 	.word	0x200007d4

08007c20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c28:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <vTaskInternalSetTimeOutState+0x24>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <vTaskInternalSetTimeOutState+0x28>)
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	605a      	str	r2, [r3, #4]
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	200007d8 	.word	0x200007d8
 8007c48:	200007c4 	.word	0x200007c4

08007c4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	613b      	str	r3, [r7, #16]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	60fb      	str	r3, [r7, #12]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c8e:	f000 fc35 	bl	80084fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c92:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <xTaskCheckForTimeOut+0xbc>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007caa:	d102      	bne.n	8007cb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	e023      	b.n	8007cfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b15      	ldr	r3, [pc, #84]	; (8007d0c <xTaskCheckForTimeOut+0xc0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d007      	beq.n	8007cce <xTaskCheckForTimeOut+0x82>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d302      	bcc.n	8007cce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	61fb      	str	r3, [r7, #28]
 8007ccc:	e015      	b.n	8007cfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d20b      	bcs.n	8007cf0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff ff9b 	bl	8007c20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	e004      	b.n	8007cfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cfa:	f000 fc2f 	bl	800855c <vPortExitCritical>

	return xReturn;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	200007c4 	.word	0x200007c4
 8007d0c:	200007d8 	.word	0x200007d8

08007d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d14:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <vTaskMissedYield+0x14>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	200007d4 	.word	0x200007d4

08007d28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d30:	f000 f852 	bl	8007dd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <prvIdleTask+0x28>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d9f9      	bls.n	8007d30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <prvIdleTask+0x2c>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d4c:	e7f0      	b.n	8007d30 <prvIdleTask+0x8>
 8007d4e:	bf00      	nop
 8007d50:	200006c4 	.word	0x200006c4
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d5e:	2300      	movs	r3, #0
 8007d60:	607b      	str	r3, [r7, #4]
 8007d62:	e00c      	b.n	8007d7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4a12      	ldr	r2, [pc, #72]	; (8007db8 <prvInitialiseTaskLists+0x60>)
 8007d70:	4413      	add	r3, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fc30 	bl	80065d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	607b      	str	r3, [r7, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b06      	cmp	r3, #6
 8007d82:	d9ef      	bls.n	8007d64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d84:	480d      	ldr	r0, [pc, #52]	; (8007dbc <prvInitialiseTaskLists+0x64>)
 8007d86:	f7fe fc27 	bl	80065d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d8a:	480d      	ldr	r0, [pc, #52]	; (8007dc0 <prvInitialiseTaskLists+0x68>)
 8007d8c:	f7fe fc24 	bl	80065d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d90:	480c      	ldr	r0, [pc, #48]	; (8007dc4 <prvInitialiseTaskLists+0x6c>)
 8007d92:	f7fe fc21 	bl	80065d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d96:	480c      	ldr	r0, [pc, #48]	; (8007dc8 <prvInitialiseTaskLists+0x70>)
 8007d98:	f7fe fc1e 	bl	80065d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d9c:	480b      	ldr	r0, [pc, #44]	; (8007dcc <prvInitialiseTaskLists+0x74>)
 8007d9e:	f7fe fc1b 	bl	80065d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007da2:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <prvInitialiseTaskLists+0x78>)
 8007da4:	4a05      	ldr	r2, [pc, #20]	; (8007dbc <prvInitialiseTaskLists+0x64>)
 8007da6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <prvInitialiseTaskLists+0x7c>)
 8007daa:	4a05      	ldr	r2, [pc, #20]	; (8007dc0 <prvInitialiseTaskLists+0x68>)
 8007dac:	601a      	str	r2, [r3, #0]
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	200006c4 	.word	0x200006c4
 8007dbc:	20000750 	.word	0x20000750
 8007dc0:	20000764 	.word	0x20000764
 8007dc4:	20000780 	.word	0x20000780
 8007dc8:	20000794 	.word	0x20000794
 8007dcc:	200007ac 	.word	0x200007ac
 8007dd0:	20000778 	.word	0x20000778
 8007dd4:	2000077c 	.word	0x2000077c

08007dd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dde:	e019      	b.n	8007e14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007de0:	f000 fb8c 	bl	80084fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007de4:	4b10      	ldr	r3, [pc, #64]	; (8007e28 <prvCheckTasksWaitingTermination+0x50>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fc77 	bl	80066e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007df6:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <prvCheckTasksWaitingTermination+0x54>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	4a0b      	ldr	r2, [pc, #44]	; (8007e2c <prvCheckTasksWaitingTermination+0x54>)
 8007dfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <prvCheckTasksWaitingTermination+0x58>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <prvCheckTasksWaitingTermination+0x58>)
 8007e08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e0a:	f000 fba7 	bl	800855c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f810 	bl	8007e34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e14:	4b06      	ldr	r3, [pc, #24]	; (8007e30 <prvCheckTasksWaitingTermination+0x58>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e1      	bne.n	8007de0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e1c:	bf00      	nop
 8007e1e:	bf00      	nop
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000794 	.word	0x20000794
 8007e2c:	200007c0 	.word	0x200007c0
 8007e30:	200007a8 	.word	0x200007a8

08007e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d108      	bne.n	8007e58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fd22 	bl	8008894 <vPortFree>
				vPortFree( pxTCB );
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fd1f 	bl	8008894 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e56:	e018      	b.n	8007e8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d103      	bne.n	8007e6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fd16 	bl	8008894 <vPortFree>
	}
 8007e68:	e00f      	b.n	8007e8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d00a      	beq.n	8007e8a <prvDeleteTCB+0x56>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	60fb      	str	r3, [r7, #12]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <prvDeleteTCB+0x54>
	}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <prvResetNextTaskUnblockTime+0x38>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d104      	bne.n	8007eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eac:	e008      	b.n	8007ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eae:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <prvResetNextTaskUnblockTime+0x38>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a04      	ldr	r2, [pc, #16]	; (8007ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ebe:	6013      	str	r3, [r2, #0]
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc80      	pop	{r7}
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	20000778 	.word	0x20000778
 8007ed0:	200007e0 	.word	0x200007e0

08007ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <xTaskGetSchedulerState+0x34>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	e008      	b.n	8007efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee8:	4b08      	ldr	r3, [pc, #32]	; (8007f0c <xTaskGetSchedulerState+0x38>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	607b      	str	r3, [r7, #4]
 8007ef4:	e001      	b.n	8007efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007efa:	687b      	ldr	r3, [r7, #4]
	}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	200007cc 	.word	0x200007cc
 8007f0c:	200007e8 	.word	0x200007e8

08007f10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d05e      	beq.n	8007fe4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2a:	4b31      	ldr	r3, [pc, #196]	; (8007ff0 <xTaskPriorityInherit+0xe0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d24e      	bcs.n	8007fd2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	db06      	blt.n	8007f4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f3c:	4b2c      	ldr	r3, [pc, #176]	; (8007ff0 <xTaskPriorityInherit+0xe0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f42:	f1c3 0207 	rsb	r2, r3, #7
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	6959      	ldr	r1, [r3, #20]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a26      	ldr	r2, [pc, #152]	; (8007ff4 <xTaskPriorityInherit+0xe4>)
 8007f5c:	4413      	add	r3, r2
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	d12f      	bne.n	8007fc2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	3304      	adds	r3, #4
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe fbbc 	bl	80066e4 <uxListRemove>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	2201      	movs	r2, #1
 8007f78:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7c:	43da      	mvns	r2, r3
 8007f7e:	4b1e      	ldr	r3, [pc, #120]	; (8007ff8 <xTaskPriorityInherit+0xe8>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4013      	ands	r3, r2
 8007f84:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <xTaskPriorityInherit+0xe8>)
 8007f86:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f88:	4b19      	ldr	r3, [pc, #100]	; (8007ff0 <xTaskPriorityInherit+0xe0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f96:	2201      	movs	r2, #1
 8007f98:	409a      	lsls	r2, r3
 8007f9a:	4b17      	ldr	r3, [pc, #92]	; (8007ff8 <xTaskPriorityInherit+0xe8>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <xTaskPriorityInherit+0xe8>)
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4a10      	ldr	r2, [pc, #64]	; (8007ff4 <xTaskPriorityInherit+0xe4>)
 8007fb2:	441a      	add	r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f7fe fb37 	bl	800662e <vListInsertEnd>
 8007fc0:	e004      	b.n	8007fcc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fc2:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <xTaskPriorityInherit+0xe0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e008      	b.n	8007fe4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fd6:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <xTaskPriorityInherit+0xe0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d201      	bcs.n	8007fe4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
	}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	200006c0 	.word	0x200006c0
 8007ff4:	200006c4 	.word	0x200006c4
 8007ff8:	200007c8 	.word	0x200007c8

08007ffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d06e      	beq.n	80080f0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008012:	4b3a      	ldr	r3, [pc, #232]	; (80080fc <xTaskPriorityDisinherit+0x100>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	429a      	cmp	r2, r3
 800801a:	d00a      	beq.n	8008032 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	60fb      	str	r3, [r7, #12]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10a      	bne.n	8008050 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	60bb      	str	r3, [r7, #8]
}
 800804c:	bf00      	nop
 800804e:	e7fe      	b.n	800804e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008054:	1e5a      	subs	r2, r3, #1
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008062:	429a      	cmp	r2, r3
 8008064:	d044      	beq.n	80080f0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800806a:	2b00      	cmp	r3, #0
 800806c:	d140      	bne.n	80080f0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3304      	adds	r3, #4
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fb36 	bl	80066e4 <uxListRemove>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d115      	bne.n	80080aa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008082:	491f      	ldr	r1, [pc, #124]	; (8008100 <xTaskPriorityDisinherit+0x104>)
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <xTaskPriorityDisinherit+0xae>
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	2201      	movs	r2, #1
 800809a:	fa02 f303 	lsl.w	r3, r2, r3
 800809e:	43da      	mvns	r2, r3
 80080a0:	4b18      	ldr	r3, [pc, #96]	; (8008104 <xTaskPriorityDisinherit+0x108>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4013      	ands	r3, r2
 80080a6:	4a17      	ldr	r2, [pc, #92]	; (8008104 <xTaskPriorityDisinherit+0x108>)
 80080a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	f1c3 0207 	rsb	r2, r3, #7
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c2:	2201      	movs	r2, #1
 80080c4:	409a      	lsls	r2, r3
 80080c6:	4b0f      	ldr	r3, [pc, #60]	; (8008104 <xTaskPriorityDisinherit+0x108>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	4a0d      	ldr	r2, [pc, #52]	; (8008104 <xTaskPriorityDisinherit+0x108>)
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4a08      	ldr	r2, [pc, #32]	; (8008100 <xTaskPriorityDisinherit+0x104>)
 80080de:	441a      	add	r2, r3
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3304      	adds	r3, #4
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f7fe faa1 	bl	800662e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080ec:	2301      	movs	r3, #1
 80080ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080f0:	697b      	ldr	r3, [r7, #20]
	}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200006c0 	.word	0x200006c0
 8008100:	200006c4 	.word	0x200006c4
 8008104:	200007c8 	.word	0x200007c8

08008108 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008116:	2301      	movs	r3, #1
 8008118:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d077      	beq.n	8008210 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	60fb      	str	r3, [r7, #12]
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d902      	bls.n	800814e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	61fb      	str	r3, [r7, #28]
 800814c:	e002      	b.n	8008154 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008152:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	429a      	cmp	r2, r3
 800815c:	d058      	beq.n	8008210 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	429a      	cmp	r2, r3
 8008166:	d153      	bne.n	8008210 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008168:	4b2b      	ldr	r3, [pc, #172]	; (8008218 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	429a      	cmp	r2, r3
 8008170:	d10a      	bne.n	8008188 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	60bb      	str	r3, [r7, #8]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	db04      	blt.n	80081a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	f1c3 0207 	rsb	r2, r3, #7
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	6959      	ldr	r1, [r3, #20]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4a19      	ldr	r2, [pc, #100]	; (800821c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80081b6:	4413      	add	r3, r2
 80081b8:	4299      	cmp	r1, r3
 80081ba:	d129      	bne.n	8008210 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	3304      	adds	r3, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fa8f 	bl	80066e4 <uxListRemove>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	2201      	movs	r2, #1
 80081d2:	fa02 f303 	lsl.w	r3, r2, r3
 80081d6:	43da      	mvns	r2, r3
 80081d8:	4b11      	ldr	r3, [pc, #68]	; (8008220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4013      	ands	r3, r2
 80081de:	4a10      	ldr	r2, [pc, #64]	; (8008220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	2201      	movs	r2, #1
 80081e8:	409a      	lsls	r2, r3
 80081ea:	4b0d      	ldr	r3, [pc, #52]	; (8008220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	4a0b      	ldr	r2, [pc, #44]	; (8008220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4a06      	ldr	r2, [pc, #24]	; (800821c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008202:	441a      	add	r2, r3
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	3304      	adds	r3, #4
 8008208:	4619      	mov	r1, r3
 800820a:	4610      	mov	r0, r2
 800820c:	f7fe fa0f 	bl	800662e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008210:	bf00      	nop
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	200006c0 	.word	0x200006c0
 800821c:	200006c4 	.word	0x200006c4
 8008220:	200007c8 	.word	0x200007c8

08008224 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <pvTaskIncrementMutexHeldCount+0x24>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008230:	4b05      	ldr	r3, [pc, #20]	; (8008248 <pvTaskIncrementMutexHeldCount+0x24>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008236:	3201      	adds	r2, #1
 8008238:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800823a:	4b03      	ldr	r3, [pc, #12]	; (8008248 <pvTaskIncrementMutexHeldCount+0x24>)
 800823c:	681b      	ldr	r3, [r3, #0]
	}
 800823e:	4618      	mov	r0, r3
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	200006c0 	.word	0x200006c0

0800824c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008256:	4b29      	ldr	r3, [pc, #164]	; (80082fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800825c:	4b28      	ldr	r3, [pc, #160]	; (8008300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3304      	adds	r3, #4
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe fa3e 	bl	80066e4 <uxListRemove>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10b      	bne.n	8008286 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800826e:	4b24      	ldr	r3, [pc, #144]	; (8008300 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	2201      	movs	r2, #1
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	43da      	mvns	r2, r3
 800827c:	4b21      	ldr	r3, [pc, #132]	; (8008304 <prvAddCurrentTaskToDelayedList+0xb8>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4013      	ands	r3, r2
 8008282:	4a20      	ldr	r2, [pc, #128]	; (8008304 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008284:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828c:	d10a      	bne.n	80082a4 <prvAddCurrentTaskToDelayedList+0x58>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d007      	beq.n	80082a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008294:	4b1a      	ldr	r3, [pc, #104]	; (8008300 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3304      	adds	r3, #4
 800829a:	4619      	mov	r1, r3
 800829c:	481a      	ldr	r0, [pc, #104]	; (8008308 <prvAddCurrentTaskToDelayedList+0xbc>)
 800829e:	f7fe f9c6 	bl	800662e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082a2:	e026      	b.n	80082f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082ac:	4b14      	ldr	r3, [pc, #80]	; (8008300 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d209      	bcs.n	80082d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082bc:	4b13      	ldr	r3, [pc, #76]	; (800830c <prvAddCurrentTaskToDelayedList+0xc0>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3304      	adds	r3, #4
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f7fe f9d3 	bl	8006674 <vListInsert>
}
 80082ce:	e010      	b.n	80082f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d0:	4b0f      	ldr	r3, [pc, #60]	; (8008310 <prvAddCurrentTaskToDelayedList+0xc4>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3304      	adds	r3, #4
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f7fe f9c9 	bl	8006674 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082e2:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d202      	bcs.n	80082f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082ec:	4a09      	ldr	r2, [pc, #36]	; (8008314 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	6013      	str	r3, [r2, #0]
}
 80082f2:	bf00      	nop
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	200007c4 	.word	0x200007c4
 8008300:	200006c0 	.word	0x200006c0
 8008304:	200007c8 	.word	0x200007c8
 8008308:	200007ac 	.word	0x200007ac
 800830c:	2000077c 	.word	0x2000077c
 8008310:	20000778 	.word	0x20000778
 8008314:	200007e0 	.word	0x200007e0

08008318 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3b04      	subs	r3, #4
 8008328:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3b04      	subs	r3, #4
 8008336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f023 0201 	bic.w	r2, r3, #1
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3b04      	subs	r3, #4
 8008346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008348:	4a08      	ldr	r2, [pc, #32]	; (800836c <pxPortInitialiseStack+0x54>)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3b14      	subs	r3, #20
 8008352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3b20      	subs	r3, #32
 800835e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008360:	68fb      	ldr	r3, [r7, #12]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr
 800836c:	08008371 	.word	0x08008371

08008370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008376:	2300      	movs	r3, #0
 8008378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800837a:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <prvTaskExitError+0x54>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008382:	d00a      	beq.n	800839a <prvTaskExitError+0x2a>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60fb      	str	r3, [r7, #12]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <prvTaskExitError+0x28>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	60bb      	str	r3, [r7, #8]
}
 80083ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083ae:	bf00      	nop
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0fc      	beq.n	80083b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20000020 	.word	0x20000020
	...

080083d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <pxCurrentTCBConst2>)
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	6808      	ldr	r0, [r1, #0]
 80083d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083da:	f380 8809 	msr	PSP, r0
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f04f 0000 	mov.w	r0, #0
 80083e6:	f380 8811 	msr	BASEPRI, r0
 80083ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80083ee:	4770      	bx	lr

080083f0 <pxCurrentTCBConst2>:
 80083f0:	200006c0 	.word	0x200006c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop

080083f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80083f8:	4806      	ldr	r0, [pc, #24]	; (8008414 <prvPortStartFirstTask+0x1c>)
 80083fa:	6800      	ldr	r0, [r0, #0]
 80083fc:	6800      	ldr	r0, [r0, #0]
 80083fe:	f380 8808 	msr	MSP, r0
 8008402:	b662      	cpsie	i
 8008404:	b661      	cpsie	f
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	df00      	svc	0
 8008410:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008412:	bf00      	nop
 8008414:	e000ed08 	.word	0xe000ed08

08008418 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800841e:	4b32      	ldr	r3, [pc, #200]	; (80084e8 <xPortStartScheduler+0xd0>)
 8008420:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	22ff      	movs	r2, #255	; 0xff
 800842e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008440:	b2da      	uxtb	r2, r3
 8008442:	4b2a      	ldr	r3, [pc, #168]	; (80084ec <xPortStartScheduler+0xd4>)
 8008444:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008446:	4b2a      	ldr	r3, [pc, #168]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008448:	2207      	movs	r2, #7
 800844a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800844c:	e009      	b.n	8008462 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800844e:	4b28      	ldr	r3, [pc, #160]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3b01      	subs	r3, #1
 8008454:	4a26      	ldr	r2, [pc, #152]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008456:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	b2db      	uxtb	r3, r3
 8008460:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d0ef      	beq.n	800844e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800846e:	4b20      	ldr	r3, [pc, #128]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f1c3 0307 	rsb	r3, r3, #7
 8008476:	2b04      	cmp	r3, #4
 8008478:	d00a      	beq.n	8008490 <xPortStartScheduler+0x78>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	60bb      	str	r3, [r7, #8]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008490:	4b17      	ldr	r3, [pc, #92]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	4a16      	ldr	r2, [pc, #88]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008498:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800849a:	4b15      	ldr	r3, [pc, #84]	; (80084f0 <xPortStartScheduler+0xd8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084a2:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <xPortStartScheduler+0xd8>)
 80084a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084ae:	4b11      	ldr	r3, [pc, #68]	; (80084f4 <xPortStartScheduler+0xdc>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a10      	ldr	r2, [pc, #64]	; (80084f4 <xPortStartScheduler+0xdc>)
 80084b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084ba:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <xPortStartScheduler+0xdc>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a0d      	ldr	r2, [pc, #52]	; (80084f4 <xPortStartScheduler+0xdc>)
 80084c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084c6:	f000 f8b9 	bl	800863c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084ca:	4b0b      	ldr	r3, [pc, #44]	; (80084f8 <xPortStartScheduler+0xe0>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084d0:	f7ff ff92 	bl	80083f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084d4:	f7ff fac4 	bl	8007a60 <vTaskSwitchContext>
	prvTaskExitError();
 80084d8:	f7ff ff4a 	bl	8008370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	e000e400 	.word	0xe000e400
 80084ec:	200007ec 	.word	0x200007ec
 80084f0:	200007f0 	.word	0x200007f0
 80084f4:	e000ed20 	.word	0xe000ed20
 80084f8:	20000020 	.word	0x20000020

080084fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	607b      	str	r3, [r7, #4]
}
 8008514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008516:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <vPortEnterCritical+0x58>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	4a0d      	ldr	r2, [pc, #52]	; (8008554 <vPortEnterCritical+0x58>)
 800851e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008520:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <vPortEnterCritical+0x58>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d10f      	bne.n	8008548 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008528:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <vPortEnterCritical+0x5c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <vPortEnterCritical+0x4c>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	603b      	str	r3, [r7, #0]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <vPortEnterCritical+0x4a>
	}
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	bc80      	pop	{r7}
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20000020 	.word	0x20000020
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008562:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <vPortExitCritical+0x4c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <vPortExitCritical+0x24>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	607b      	str	r3, [r7, #4]
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <vPortExitCritical+0x4c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3b01      	subs	r3, #1
 8008586:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <vPortExitCritical+0x4c>)
 8008588:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800858a:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <vPortExitCritical+0x4c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d105      	bne.n	800859e <vPortExitCritical+0x42>
 8008592:	2300      	movs	r3, #0
 8008594:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	f383 8811 	msr	BASEPRI, r3
}
 800859c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800859e:	bf00      	nop
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr
 80085a8:	20000020 	.word	0x20000020
 80085ac:	00000000 	.word	0x00000000

080085b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085b0:	f3ef 8009 	mrs	r0, PSP
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <pxCurrentTCBConst>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085c0:	6010      	str	r0, [r2, #0]
 80085c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80085c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085ca:	f380 8811 	msr	BASEPRI, r0
 80085ce:	f7ff fa47 	bl	8007a60 <vTaskSwitchContext>
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8811 	msr	BASEPRI, r0
 80085da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085de:	6819      	ldr	r1, [r3, #0]
 80085e0:	6808      	ldr	r0, [r1, #0]
 80085e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085e6:	f380 8809 	msr	PSP, r0
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	4770      	bx	lr

080085f0 <pxCurrentTCBConst>:
 80085f0:	200006c0 	.word	0x200006c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop

080085f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	607b      	str	r3, [r7, #4]
}
 8008610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008612:	f7ff f96d 	bl	80078f0 <xTaskIncrementTick>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <xPortSysTickHandler+0x40>)
 800861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	2300      	movs	r3, #0
 8008626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f383 8811 	msr	BASEPRI, r3
}
 800862e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008640:	4b0a      	ldr	r3, [pc, #40]	; (800866c <vPortSetupTimerInterrupt+0x30>)
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008646:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <vPortSetupTimerInterrupt+0x34>)
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <vPortSetupTimerInterrupt+0x38>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a09      	ldr	r2, [pc, #36]	; (8008678 <vPortSetupTimerInterrupt+0x3c>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	099b      	lsrs	r3, r3, #6
 8008658:	4a08      	ldr	r2, [pc, #32]	; (800867c <vPortSetupTimerInterrupt+0x40>)
 800865a:	3b01      	subs	r3, #1
 800865c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800865e:	4b03      	ldr	r3, [pc, #12]	; (800866c <vPortSetupTimerInterrupt+0x30>)
 8008660:	2207      	movs	r2, #7
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr
 800866c:	e000e010 	.word	0xe000e010
 8008670:	e000e018 	.word	0xe000e018
 8008674:	20000014 	.word	0x20000014
 8008678:	10624dd3 	.word	0x10624dd3
 800867c:	e000e014 	.word	0xe000e014

08008680 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008686:	f3ef 8305 	mrs	r3, IPSR
 800868a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b0f      	cmp	r3, #15
 8008690:	d914      	bls.n	80086bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008692:	4a16      	ldr	r2, [pc, #88]	; (80086ec <vPortValidateInterruptPriority+0x6c>)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800869c:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <vPortValidateInterruptPriority+0x70>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	7afa      	ldrb	r2, [r7, #11]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d20a      	bcs.n	80086bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	607b      	str	r3, [r7, #4]
}
 80086b8:	bf00      	nop
 80086ba:	e7fe      	b.n	80086ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086bc:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <vPortValidateInterruptPriority+0x74>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086c4:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <vPortValidateInterruptPriority+0x78>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d90a      	bls.n	80086e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	603b      	str	r3, [r7, #0]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <vPortValidateInterruptPriority+0x60>
	}
 80086e2:	bf00      	nop
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr
 80086ec:	e000e3f0 	.word	0xe000e3f0
 80086f0:	200007ec 	.word	0x200007ec
 80086f4:	e000ed0c 	.word	0xe000ed0c
 80086f8:	200007f0 	.word	0x200007f0

080086fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08a      	sub	sp, #40	; 0x28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008704:	2300      	movs	r3, #0
 8008706:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008708:	f7ff f848 	bl	800779c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800870c:	4b5b      	ldr	r3, [pc, #364]	; (800887c <pvPortMalloc+0x180>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008714:	f000 f920 	bl	8008958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008718:	4b59      	ldr	r3, [pc, #356]	; (8008880 <pvPortMalloc+0x184>)
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4013      	ands	r3, r2
 8008720:	2b00      	cmp	r3, #0
 8008722:	f040 8093 	bne.w	800884c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d01d      	beq.n	8008768 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800872c:	2208      	movs	r2, #8
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4413      	add	r3, r2
 8008732:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f003 0307 	and.w	r3, r3, #7
 800873a:	2b00      	cmp	r3, #0
 800873c:	d014      	beq.n	8008768 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f023 0307 	bic.w	r3, r3, #7
 8008744:	3308      	adds	r3, #8
 8008746:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f003 0307 	and.w	r3, r3, #7
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <pvPortMalloc+0x6c>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	617b      	str	r3, [r7, #20]
}
 8008764:	bf00      	nop
 8008766:	e7fe      	b.n	8008766 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d06e      	beq.n	800884c <pvPortMalloc+0x150>
 800876e:	4b45      	ldr	r3, [pc, #276]	; (8008884 <pvPortMalloc+0x188>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	429a      	cmp	r2, r3
 8008776:	d869      	bhi.n	800884c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008778:	4b43      	ldr	r3, [pc, #268]	; (8008888 <pvPortMalloc+0x18c>)
 800877a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800877c:	4b42      	ldr	r3, [pc, #264]	; (8008888 <pvPortMalloc+0x18c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008782:	e004      	b.n	800878e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	429a      	cmp	r2, r3
 8008796:	d903      	bls.n	80087a0 <pvPortMalloc+0xa4>
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f1      	bne.n	8008784 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087a0:	4b36      	ldr	r3, [pc, #216]	; (800887c <pvPortMalloc+0x180>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d050      	beq.n	800884c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2208      	movs	r2, #8
 80087b0:	4413      	add	r3, r2
 80087b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	1ad2      	subs	r2, r2, r3
 80087c4:	2308      	movs	r3, #8
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d91f      	bls.n	800880c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4413      	add	r3, r2
 80087d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <pvPortMalloc+0xf8>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	613b      	str	r3, [r7, #16]
}
 80087f0:	bf00      	nop
 80087f2:	e7fe      	b.n	80087f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008806:	69b8      	ldr	r0, [r7, #24]
 8008808:	f000 f908 	bl	8008a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800880c:	4b1d      	ldr	r3, [pc, #116]	; (8008884 <pvPortMalloc+0x188>)
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	4a1b      	ldr	r2, [pc, #108]	; (8008884 <pvPortMalloc+0x188>)
 8008818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800881a:	4b1a      	ldr	r3, [pc, #104]	; (8008884 <pvPortMalloc+0x188>)
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	4b1b      	ldr	r3, [pc, #108]	; (800888c <pvPortMalloc+0x190>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d203      	bcs.n	800882e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008826:	4b17      	ldr	r3, [pc, #92]	; (8008884 <pvPortMalloc+0x188>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a18      	ldr	r2, [pc, #96]	; (800888c <pvPortMalloc+0x190>)
 800882c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	4b13      	ldr	r3, [pc, #76]	; (8008880 <pvPortMalloc+0x184>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	431a      	orrs	r2, r3
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008842:	4b13      	ldr	r3, [pc, #76]	; (8008890 <pvPortMalloc+0x194>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	4a11      	ldr	r2, [pc, #68]	; (8008890 <pvPortMalloc+0x194>)
 800884a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800884c:	f7fe ffb4 	bl	80077b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <pvPortMalloc+0x174>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	60fb      	str	r3, [r7, #12]
}
 800886c:	bf00      	nop
 800886e:	e7fe      	b.n	800886e <pvPortMalloc+0x172>
	return pvReturn;
 8008870:	69fb      	ldr	r3, [r7, #28]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3728      	adds	r7, #40	; 0x28
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20001f6c 	.word	0x20001f6c
 8008880:	20001f80 	.word	0x20001f80
 8008884:	20001f70 	.word	0x20001f70
 8008888:	20001f64 	.word	0x20001f64
 800888c:	20001f74 	.word	0x20001f74
 8008890:	20001f78 	.word	0x20001f78

08008894 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d04d      	beq.n	8008942 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088a6:	2308      	movs	r3, #8
 80088a8:	425b      	negs	r3, r3
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	4413      	add	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	4b24      	ldr	r3, [pc, #144]	; (800894c <vPortFree+0xb8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4013      	ands	r3, r2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <vPortFree+0x44>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	60fb      	str	r3, [r7, #12]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <vPortFree+0x62>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60bb      	str	r3, [r7, #8]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	4b14      	ldr	r3, [pc, #80]	; (800894c <vPortFree+0xb8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4013      	ands	r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d01e      	beq.n	8008942 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d11a      	bne.n	8008942 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	4b0e      	ldr	r3, [pc, #56]	; (800894c <vPortFree+0xb8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	43db      	mvns	r3, r3
 8008916:	401a      	ands	r2, r3
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800891c:	f7fe ff3e 	bl	800779c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <vPortFree+0xbc>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4413      	add	r3, r2
 800892a:	4a09      	ldr	r2, [pc, #36]	; (8008950 <vPortFree+0xbc>)
 800892c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800892e:	6938      	ldr	r0, [r7, #16]
 8008930:	f000 f874 	bl	8008a1c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008934:	4b07      	ldr	r3, [pc, #28]	; (8008954 <vPortFree+0xc0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3301      	adds	r3, #1
 800893a:	4a06      	ldr	r2, [pc, #24]	; (8008954 <vPortFree+0xc0>)
 800893c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800893e:	f7fe ff3b 	bl	80077b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008942:	bf00      	nop
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20001f80 	.word	0x20001f80
 8008950:	20001f70 	.word	0x20001f70
 8008954:	20001f7c 	.word	0x20001f7c

08008958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800895e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008964:	4b27      	ldr	r3, [pc, #156]	; (8008a04 <prvHeapInit+0xac>)
 8008966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00c      	beq.n	800898c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3307      	adds	r3, #7
 8008976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f023 0307 	bic.w	r3, r3, #7
 800897e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	4a1f      	ldr	r2, [pc, #124]	; (8008a04 <prvHeapInit+0xac>)
 8008988:	4413      	add	r3, r2
 800898a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008990:	4a1d      	ldr	r2, [pc, #116]	; (8008a08 <prvHeapInit+0xb0>)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008996:	4b1c      	ldr	r3, [pc, #112]	; (8008a08 <prvHeapInit+0xb0>)
 8008998:	2200      	movs	r2, #0
 800899a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	4413      	add	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089a4:	2208      	movs	r2, #8
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	1a9b      	subs	r3, r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0307 	bic.w	r3, r3, #7
 80089b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4a15      	ldr	r2, [pc, #84]	; (8008a0c <prvHeapInit+0xb4>)
 80089b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089ba:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <prvHeapInit+0xb4>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2200      	movs	r2, #0
 80089c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089c2:	4b12      	ldr	r3, [pc, #72]	; (8008a0c <prvHeapInit+0xb4>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	1ad2      	subs	r2, r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <prvHeapInit+0xb4>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	4a0a      	ldr	r2, [pc, #40]	; (8008a10 <prvHeapInit+0xb8>)
 80089e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	4a09      	ldr	r2, [pc, #36]	; (8008a14 <prvHeapInit+0xbc>)
 80089ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089f0:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <prvHeapInit+0xc0>)
 80089f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089f6:	601a      	str	r2, [r3, #0]
}
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	200007f4 	.word	0x200007f4
 8008a08:	20001f64 	.word	0x20001f64
 8008a0c:	20001f6c 	.word	0x20001f6c
 8008a10:	20001f74 	.word	0x20001f74
 8008a14:	20001f70 	.word	0x20001f70
 8008a18:	20001f80 	.word	0x20001f80

08008a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a24:	4b27      	ldr	r3, [pc, #156]	; (8008ac4 <prvInsertBlockIntoFreeList+0xa8>)
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	e002      	b.n	8008a30 <prvInsertBlockIntoFreeList+0x14>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d8f7      	bhi.n	8008a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	4413      	add	r3, r2
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d108      	bne.n	8008a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	685a      	ldr	r2, [r3, #4]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	441a      	add	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	441a      	add	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d118      	bne.n	8008aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <prvInsertBlockIntoFreeList+0xac>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d00d      	beq.n	8008a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	441a      	add	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	e008      	b.n	8008aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <prvInsertBlockIntoFreeList+0xac>)
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	e003      	b.n	8008aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d002      	beq.n	8008aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aba:	bf00      	nop
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc80      	pop	{r7}
 8008ac2:	4770      	bx	lr
 8008ac4:	20001f64 	.word	0x20001f64
 8008ac8:	20001f6c 	.word	0x20001f6c

08008acc <__cvt>:
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad2:	461f      	mov	r7, r3
 8008ad4:	bfbb      	ittet	lt
 8008ad6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008ada:	461f      	movlt	r7, r3
 8008adc:	2300      	movge	r3, #0
 8008ade:	232d      	movlt	r3, #45	; 0x2d
 8008ae0:	b088      	sub	sp, #32
 8008ae2:	4614      	mov	r4, r2
 8008ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ae6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008ae8:	7013      	strb	r3, [r2, #0]
 8008aea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008aec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008af0:	f023 0820 	bic.w	r8, r3, #32
 8008af4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008af8:	d005      	beq.n	8008b06 <__cvt+0x3a>
 8008afa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008afe:	d100      	bne.n	8008b02 <__cvt+0x36>
 8008b00:	3501      	adds	r5, #1
 8008b02:	2302      	movs	r3, #2
 8008b04:	e000      	b.n	8008b08 <__cvt+0x3c>
 8008b06:	2303      	movs	r3, #3
 8008b08:	aa07      	add	r2, sp, #28
 8008b0a:	9204      	str	r2, [sp, #16]
 8008b0c:	aa06      	add	r2, sp, #24
 8008b0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008b12:	e9cd 3500 	strd	r3, r5, [sp]
 8008b16:	4622      	mov	r2, r4
 8008b18:	463b      	mov	r3, r7
 8008b1a:	f001 f905 	bl	8009d28 <_dtoa_r>
 8008b1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b22:	4606      	mov	r6, r0
 8008b24:	d102      	bne.n	8008b2c <__cvt+0x60>
 8008b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b28:	07db      	lsls	r3, r3, #31
 8008b2a:	d522      	bpl.n	8008b72 <__cvt+0xa6>
 8008b2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b30:	eb06 0905 	add.w	r9, r6, r5
 8008b34:	d110      	bne.n	8008b58 <__cvt+0x8c>
 8008b36:	7833      	ldrb	r3, [r6, #0]
 8008b38:	2b30      	cmp	r3, #48	; 0x30
 8008b3a:	d10a      	bne.n	8008b52 <__cvt+0x86>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4620      	mov	r0, r4
 8008b42:	4639      	mov	r1, r7
 8008b44:	f7f7 ff30 	bl	80009a8 <__aeabi_dcmpeq>
 8008b48:	b918      	cbnz	r0, 8008b52 <__cvt+0x86>
 8008b4a:	f1c5 0501 	rsb	r5, r5, #1
 8008b4e:	f8ca 5000 	str.w	r5, [sl]
 8008b52:	f8da 3000 	ldr.w	r3, [sl]
 8008b56:	4499      	add	r9, r3
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 ff22 	bl	80009a8 <__aeabi_dcmpeq>
 8008b64:	b108      	cbz	r0, 8008b6a <__cvt+0x9e>
 8008b66:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b6a:	2230      	movs	r2, #48	; 0x30
 8008b6c:	9b07      	ldr	r3, [sp, #28]
 8008b6e:	454b      	cmp	r3, r9
 8008b70:	d307      	bcc.n	8008b82 <__cvt+0xb6>
 8008b72:	4630      	mov	r0, r6
 8008b74:	9b07      	ldr	r3, [sp, #28]
 8008b76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b78:	1b9b      	subs	r3, r3, r6
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	b008      	add	sp, #32
 8008b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b82:	1c59      	adds	r1, r3, #1
 8008b84:	9107      	str	r1, [sp, #28]
 8008b86:	701a      	strb	r2, [r3, #0]
 8008b88:	e7f0      	b.n	8008b6c <__cvt+0xa0>

08008b8a <__exponent>:
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b8e:	2900      	cmp	r1, #0
 8008b90:	f803 2b02 	strb.w	r2, [r3], #2
 8008b94:	bfb6      	itet	lt
 8008b96:	222d      	movlt	r2, #45	; 0x2d
 8008b98:	222b      	movge	r2, #43	; 0x2b
 8008b9a:	4249      	neglt	r1, r1
 8008b9c:	2909      	cmp	r1, #9
 8008b9e:	7042      	strb	r2, [r0, #1]
 8008ba0:	dd2a      	ble.n	8008bf8 <__exponent+0x6e>
 8008ba2:	f10d 0207 	add.w	r2, sp, #7
 8008ba6:	4617      	mov	r7, r2
 8008ba8:	260a      	movs	r6, #10
 8008baa:	fb91 f5f6 	sdiv	r5, r1, r6
 8008bae:	4694      	mov	ip, r2
 8008bb0:	fb06 1415 	mls	r4, r6, r5, r1
 8008bb4:	3430      	adds	r4, #48	; 0x30
 8008bb6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008bba:	460c      	mov	r4, r1
 8008bbc:	2c63      	cmp	r4, #99	; 0x63
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f102 32ff 	add.w	r2, r2, #4294967295
 8008bc4:	dcf1      	bgt.n	8008baa <__exponent+0x20>
 8008bc6:	3130      	adds	r1, #48	; 0x30
 8008bc8:	f1ac 0402 	sub.w	r4, ip, #2
 8008bcc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008bd0:	4622      	mov	r2, r4
 8008bd2:	1c41      	adds	r1, r0, #1
 8008bd4:	42ba      	cmp	r2, r7
 8008bd6:	d30a      	bcc.n	8008bee <__exponent+0x64>
 8008bd8:	f10d 0209 	add.w	r2, sp, #9
 8008bdc:	eba2 020c 	sub.w	r2, r2, ip
 8008be0:	42bc      	cmp	r4, r7
 8008be2:	bf88      	it	hi
 8008be4:	2200      	movhi	r2, #0
 8008be6:	4413      	add	r3, r2
 8008be8:	1a18      	subs	r0, r3, r0
 8008bea:	b003      	add	sp, #12
 8008bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bee:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008bf2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008bf6:	e7ed      	b.n	8008bd4 <__exponent+0x4a>
 8008bf8:	2330      	movs	r3, #48	; 0x30
 8008bfa:	3130      	adds	r1, #48	; 0x30
 8008bfc:	7083      	strb	r3, [r0, #2]
 8008bfe:	70c1      	strb	r1, [r0, #3]
 8008c00:	1d03      	adds	r3, r0, #4
 8008c02:	e7f1      	b.n	8008be8 <__exponent+0x5e>

08008c04 <_printf_float>:
 8008c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	b091      	sub	sp, #68	; 0x44
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008c10:	4616      	mov	r6, r2
 8008c12:	461f      	mov	r7, r3
 8008c14:	4605      	mov	r5, r0
 8008c16:	f000 ff65 	bl	8009ae4 <_localeconv_r>
 8008c1a:	6803      	ldr	r3, [r0, #0]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c20:	f7f7 fa96 	bl	8000150 <strlen>
 8008c24:	2300      	movs	r3, #0
 8008c26:	930e      	str	r3, [sp, #56]	; 0x38
 8008c28:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2c:	900a      	str	r0, [sp, #40]	; 0x28
 8008c2e:	3307      	adds	r3, #7
 8008c30:	f023 0307 	bic.w	r3, r3, #7
 8008c34:	f103 0208 	add.w	r2, r3, #8
 8008c38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008c3c:	f8d4 b000 	ldr.w	fp, [r4]
 8008c40:	f8c8 2000 	str.w	r2, [r8]
 8008c44:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008c48:	4652      	mov	r2, sl
 8008c4a:	4643      	mov	r3, r8
 8008c4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c50:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008c54:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c56:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5a:	4650      	mov	r0, sl
 8008c5c:	4b9c      	ldr	r3, [pc, #624]	; (8008ed0 <_printf_float+0x2cc>)
 8008c5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c60:	f7f7 fed4 	bl	8000a0c <__aeabi_dcmpun>
 8008c64:	bb70      	cbnz	r0, 8008cc4 <_printf_float+0xc0>
 8008c66:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6a:	4650      	mov	r0, sl
 8008c6c:	4b98      	ldr	r3, [pc, #608]	; (8008ed0 <_printf_float+0x2cc>)
 8008c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c70:	f7f7 feae 	bl	80009d0 <__aeabi_dcmple>
 8008c74:	bb30      	cbnz	r0, 8008cc4 <_printf_float+0xc0>
 8008c76:	2200      	movs	r2, #0
 8008c78:	2300      	movs	r3, #0
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	f7f7 fe9d 	bl	80009bc <__aeabi_dcmplt>
 8008c82:	b110      	cbz	r0, 8008c8a <_printf_float+0x86>
 8008c84:	232d      	movs	r3, #45	; 0x2d
 8008c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c8a:	4a92      	ldr	r2, [pc, #584]	; (8008ed4 <_printf_float+0x2d0>)
 8008c8c:	4b92      	ldr	r3, [pc, #584]	; (8008ed8 <_printf_float+0x2d4>)
 8008c8e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008c92:	bf94      	ite	ls
 8008c94:	4690      	movls	r8, r2
 8008c96:	4698      	movhi	r8, r3
 8008c98:	2303      	movs	r3, #3
 8008c9a:	f04f 0a00 	mov.w	sl, #0
 8008c9e:	6123      	str	r3, [r4, #16]
 8008ca0:	f02b 0304 	bic.w	r3, fp, #4
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	4633      	mov	r3, r6
 8008ca8:	4621      	mov	r1, r4
 8008caa:	4628      	mov	r0, r5
 8008cac:	9700      	str	r7, [sp, #0]
 8008cae:	aa0f      	add	r2, sp, #60	; 0x3c
 8008cb0:	f000 f9d6 	bl	8009060 <_printf_common>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	f040 8090 	bne.w	8008dda <_printf_float+0x1d6>
 8008cba:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbe:	b011      	add	sp, #68	; 0x44
 8008cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc4:	4652      	mov	r2, sl
 8008cc6:	4643      	mov	r3, r8
 8008cc8:	4650      	mov	r0, sl
 8008cca:	4641      	mov	r1, r8
 8008ccc:	f7f7 fe9e 	bl	8000a0c <__aeabi_dcmpun>
 8008cd0:	b148      	cbz	r0, 8008ce6 <_printf_float+0xe2>
 8008cd2:	f1b8 0f00 	cmp.w	r8, #0
 8008cd6:	bfb8      	it	lt
 8008cd8:	232d      	movlt	r3, #45	; 0x2d
 8008cda:	4a80      	ldr	r2, [pc, #512]	; (8008edc <_printf_float+0x2d8>)
 8008cdc:	bfb8      	it	lt
 8008cde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ce2:	4b7f      	ldr	r3, [pc, #508]	; (8008ee0 <_printf_float+0x2dc>)
 8008ce4:	e7d3      	b.n	8008c8e <_printf_float+0x8a>
 8008ce6:	6863      	ldr	r3, [r4, #4]
 8008ce8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	d142      	bne.n	8008d76 <_printf_float+0x172>
 8008cf0:	2306      	movs	r3, #6
 8008cf2:	6063      	str	r3, [r4, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	9206      	str	r2, [sp, #24]
 8008cf8:	aa0e      	add	r2, sp, #56	; 0x38
 8008cfa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008cfe:	aa0d      	add	r2, sp, #52	; 0x34
 8008d00:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008d04:	9203      	str	r2, [sp, #12]
 8008d06:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008d0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	6863      	ldr	r3, [r4, #4]
 8008d12:	4652      	mov	r2, sl
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	4628      	mov	r0, r5
 8008d18:	4643      	mov	r3, r8
 8008d1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d1c:	f7ff fed6 	bl	8008acc <__cvt>
 8008d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d22:	4680      	mov	r8, r0
 8008d24:	2947      	cmp	r1, #71	; 0x47
 8008d26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d28:	d108      	bne.n	8008d3c <_printf_float+0x138>
 8008d2a:	1cc8      	adds	r0, r1, #3
 8008d2c:	db02      	blt.n	8008d34 <_printf_float+0x130>
 8008d2e:	6863      	ldr	r3, [r4, #4]
 8008d30:	4299      	cmp	r1, r3
 8008d32:	dd40      	ble.n	8008db6 <_printf_float+0x1b2>
 8008d34:	f1a9 0902 	sub.w	r9, r9, #2
 8008d38:	fa5f f989 	uxtb.w	r9, r9
 8008d3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d40:	d81f      	bhi.n	8008d82 <_printf_float+0x17e>
 8008d42:	464a      	mov	r2, r9
 8008d44:	3901      	subs	r1, #1
 8008d46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d4a:	910d      	str	r1, [sp, #52]	; 0x34
 8008d4c:	f7ff ff1d 	bl	8008b8a <__exponent>
 8008d50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d52:	4682      	mov	sl, r0
 8008d54:	1813      	adds	r3, r2, r0
 8008d56:	2a01      	cmp	r2, #1
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	dc02      	bgt.n	8008d62 <_printf_float+0x15e>
 8008d5c:	6822      	ldr	r2, [r4, #0]
 8008d5e:	07d2      	lsls	r2, r2, #31
 8008d60:	d501      	bpl.n	8008d66 <_printf_float+0x162>
 8008d62:	3301      	adds	r3, #1
 8008d64:	6123      	str	r3, [r4, #16]
 8008d66:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d09b      	beq.n	8008ca6 <_printf_float+0xa2>
 8008d6e:	232d      	movs	r3, #45	; 0x2d
 8008d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d74:	e797      	b.n	8008ca6 <_printf_float+0xa2>
 8008d76:	2947      	cmp	r1, #71	; 0x47
 8008d78:	d1bc      	bne.n	8008cf4 <_printf_float+0xf0>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1ba      	bne.n	8008cf4 <_printf_float+0xf0>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e7b7      	b.n	8008cf2 <_printf_float+0xee>
 8008d82:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008d86:	d118      	bne.n	8008dba <_printf_float+0x1b6>
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	6863      	ldr	r3, [r4, #4]
 8008d8c:	dd0b      	ble.n	8008da6 <_printf_float+0x1a2>
 8008d8e:	6121      	str	r1, [r4, #16]
 8008d90:	b913      	cbnz	r3, 8008d98 <_printf_float+0x194>
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	07d0      	lsls	r0, r2, #31
 8008d96:	d502      	bpl.n	8008d9e <_printf_float+0x19a>
 8008d98:	3301      	adds	r3, #1
 8008d9a:	440b      	add	r3, r1
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	f04f 0a00 	mov.w	sl, #0
 8008da2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008da4:	e7df      	b.n	8008d66 <_printf_float+0x162>
 8008da6:	b913      	cbnz	r3, 8008dae <_printf_float+0x1aa>
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	07d2      	lsls	r2, r2, #31
 8008dac:	d501      	bpl.n	8008db2 <_printf_float+0x1ae>
 8008dae:	3302      	adds	r3, #2
 8008db0:	e7f4      	b.n	8008d9c <_printf_float+0x198>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e7f2      	b.n	8008d9c <_printf_float+0x198>
 8008db6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dbc:	4299      	cmp	r1, r3
 8008dbe:	db05      	blt.n	8008dcc <_printf_float+0x1c8>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	6121      	str	r1, [r4, #16]
 8008dc4:	07d8      	lsls	r0, r3, #31
 8008dc6:	d5ea      	bpl.n	8008d9e <_printf_float+0x19a>
 8008dc8:	1c4b      	adds	r3, r1, #1
 8008dca:	e7e7      	b.n	8008d9c <_printf_float+0x198>
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	bfcc      	ite	gt
 8008dd0:	2201      	movgt	r2, #1
 8008dd2:	f1c1 0202 	rsble	r2, r1, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	e7e0      	b.n	8008d9c <_printf_float+0x198>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	055a      	lsls	r2, r3, #21
 8008dde:	d407      	bmi.n	8008df0 <_printf_float+0x1ec>
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	4642      	mov	r2, r8
 8008de4:	4631      	mov	r1, r6
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b8      	blx	r7
 8008dea:	3001      	adds	r0, #1
 8008dec:	d12b      	bne.n	8008e46 <_printf_float+0x242>
 8008dee:	e764      	b.n	8008cba <_printf_float+0xb6>
 8008df0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008df4:	f240 80dd 	bls.w	8008fb2 <_printf_float+0x3ae>
 8008df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f7f7 fdd2 	bl	80009a8 <__aeabi_dcmpeq>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d033      	beq.n	8008e70 <_printf_float+0x26c>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	4a35      	ldr	r2, [pc, #212]	; (8008ee4 <_printf_float+0x2e0>)
 8008e10:	47b8      	blx	r7
 8008e12:	3001      	adds	r0, #1
 8008e14:	f43f af51 	beq.w	8008cba <_printf_float+0xb6>
 8008e18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	db02      	blt.n	8008e26 <_printf_float+0x222>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	07d8      	lsls	r0, r3, #31
 8008e24:	d50f      	bpl.n	8008e46 <_printf_float+0x242>
 8008e26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	47b8      	blx	r7
 8008e30:	3001      	adds	r0, #1
 8008e32:	f43f af42 	beq.w	8008cba <_printf_float+0xb6>
 8008e36:	f04f 0800 	mov.w	r8, #0
 8008e3a:	f104 091a 	add.w	r9, r4, #26
 8008e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e40:	3b01      	subs	r3, #1
 8008e42:	4543      	cmp	r3, r8
 8008e44:	dc09      	bgt.n	8008e5a <_printf_float+0x256>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	079b      	lsls	r3, r3, #30
 8008e4a:	f100 8104 	bmi.w	8009056 <_printf_float+0x452>
 8008e4e:	68e0      	ldr	r0, [r4, #12]
 8008e50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e52:	4298      	cmp	r0, r3
 8008e54:	bfb8      	it	lt
 8008e56:	4618      	movlt	r0, r3
 8008e58:	e731      	b.n	8008cbe <_printf_float+0xba>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	464a      	mov	r2, r9
 8008e5e:	4631      	mov	r1, r6
 8008e60:	4628      	mov	r0, r5
 8008e62:	47b8      	blx	r7
 8008e64:	3001      	adds	r0, #1
 8008e66:	f43f af28 	beq.w	8008cba <_printf_float+0xb6>
 8008e6a:	f108 0801 	add.w	r8, r8, #1
 8008e6e:	e7e6      	b.n	8008e3e <_printf_float+0x23a>
 8008e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dc38      	bgt.n	8008ee8 <_printf_float+0x2e4>
 8008e76:	2301      	movs	r3, #1
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	4a19      	ldr	r2, [pc, #100]	; (8008ee4 <_printf_float+0x2e0>)
 8008e7e:	47b8      	blx	r7
 8008e80:	3001      	adds	r0, #1
 8008e82:	f43f af1a 	beq.w	8008cba <_printf_float+0xb6>
 8008e86:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	d102      	bne.n	8008e94 <_printf_float+0x290>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	07d9      	lsls	r1, r3, #31
 8008e92:	d5d8      	bpl.n	8008e46 <_printf_float+0x242>
 8008e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	47b8      	blx	r7
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f43f af0b 	beq.w	8008cba <_printf_float+0xb6>
 8008ea4:	f04f 0900 	mov.w	r9, #0
 8008ea8:	f104 0a1a 	add.w	sl, r4, #26
 8008eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eae:	425b      	negs	r3, r3
 8008eb0:	454b      	cmp	r3, r9
 8008eb2:	dc01      	bgt.n	8008eb8 <_printf_float+0x2b4>
 8008eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eb6:	e794      	b.n	8008de2 <_printf_float+0x1de>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	4652      	mov	r2, sl
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	47b8      	blx	r7
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f43f aef9 	beq.w	8008cba <_printf_float+0xb6>
 8008ec8:	f109 0901 	add.w	r9, r9, #1
 8008ecc:	e7ee      	b.n	8008eac <_printf_float+0x2a8>
 8008ece:	bf00      	nop
 8008ed0:	7fefffff 	.word	0x7fefffff
 8008ed4:	0800deae 	.word	0x0800deae
 8008ed8:	0800deb2 	.word	0x0800deb2
 8008edc:	0800deb6 	.word	0x0800deb6
 8008ee0:	0800deba 	.word	0x0800deba
 8008ee4:	0800e248 	.word	0x0800e248
 8008ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eec:	429a      	cmp	r2, r3
 8008eee:	bfa8      	it	ge
 8008ef0:	461a      	movge	r2, r3
 8008ef2:	2a00      	cmp	r2, #0
 8008ef4:	4691      	mov	r9, r2
 8008ef6:	dc37      	bgt.n	8008f68 <_printf_float+0x364>
 8008ef8:	f04f 0b00 	mov.w	fp, #0
 8008efc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f00:	f104 021a 	add.w	r2, r4, #26
 8008f04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008f08:	ebaa 0309 	sub.w	r3, sl, r9
 8008f0c:	455b      	cmp	r3, fp
 8008f0e:	dc33      	bgt.n	8008f78 <_printf_float+0x374>
 8008f10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f14:	429a      	cmp	r2, r3
 8008f16:	db3b      	blt.n	8008f90 <_printf_float+0x38c>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	07da      	lsls	r2, r3, #31
 8008f1c:	d438      	bmi.n	8008f90 <_printf_float+0x38c>
 8008f1e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008f22:	eba2 0903 	sub.w	r9, r2, r3
 8008f26:	eba2 020a 	sub.w	r2, r2, sl
 8008f2a:	4591      	cmp	r9, r2
 8008f2c:	bfa8      	it	ge
 8008f2e:	4691      	movge	r9, r2
 8008f30:	f1b9 0f00 	cmp.w	r9, #0
 8008f34:	dc34      	bgt.n	8008fa0 <_printf_float+0x39c>
 8008f36:	f04f 0800 	mov.w	r8, #0
 8008f3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f3e:	f104 0a1a 	add.w	sl, r4, #26
 8008f42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f46:	1a9b      	subs	r3, r3, r2
 8008f48:	eba3 0309 	sub.w	r3, r3, r9
 8008f4c:	4543      	cmp	r3, r8
 8008f4e:	f77f af7a 	ble.w	8008e46 <_printf_float+0x242>
 8008f52:	2301      	movs	r3, #1
 8008f54:	4652      	mov	r2, sl
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f43f aeac 	beq.w	8008cba <_printf_float+0xb6>
 8008f62:	f108 0801 	add.w	r8, r8, #1
 8008f66:	e7ec      	b.n	8008f42 <_printf_float+0x33e>
 8008f68:	4613      	mov	r3, r2
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	d1c0      	bne.n	8008ef8 <_printf_float+0x2f4>
 8008f76:	e6a0      	b.n	8008cba <_printf_float+0xb6>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f80:	47b8      	blx	r7
 8008f82:	3001      	adds	r0, #1
 8008f84:	f43f ae99 	beq.w	8008cba <_printf_float+0xb6>
 8008f88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f8a:	f10b 0b01 	add.w	fp, fp, #1
 8008f8e:	e7b9      	b.n	8008f04 <_printf_float+0x300>
 8008f90:	4631      	mov	r1, r6
 8008f92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f96:	4628      	mov	r0, r5
 8008f98:	47b8      	blx	r7
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	d1bf      	bne.n	8008f1e <_printf_float+0x31a>
 8008f9e:	e68c      	b.n	8008cba <_printf_float+0xb6>
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	eb08 020a 	add.w	r2, r8, sl
 8008faa:	47b8      	blx	r7
 8008fac:	3001      	adds	r0, #1
 8008fae:	d1c2      	bne.n	8008f36 <_printf_float+0x332>
 8008fb0:	e683      	b.n	8008cba <_printf_float+0xb6>
 8008fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fb4:	2a01      	cmp	r2, #1
 8008fb6:	dc01      	bgt.n	8008fbc <_printf_float+0x3b8>
 8008fb8:	07db      	lsls	r3, r3, #31
 8008fba:	d539      	bpl.n	8009030 <_printf_float+0x42c>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	4642      	mov	r2, r8
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	47b8      	blx	r7
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	f43f ae77 	beq.w	8008cba <_printf_float+0xb6>
 8008fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	47b8      	blx	r7
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	f43f ae6f 	beq.w	8008cba <_printf_float+0xb6>
 8008fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008fe8:	f7f7 fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8008fec:	b9d8      	cbnz	r0, 8009026 <_printf_float+0x422>
 8008fee:	f109 33ff 	add.w	r3, r9, #4294967295
 8008ff2:	f108 0201 	add.w	r2, r8, #1
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b8      	blx	r7
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d10e      	bne.n	800901e <_printf_float+0x41a>
 8009000:	e65b      	b.n	8008cba <_printf_float+0xb6>
 8009002:	2301      	movs	r3, #1
 8009004:	464a      	mov	r2, r9
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	f43f ae54 	beq.w	8008cba <_printf_float+0xb6>
 8009012:	f108 0801 	add.w	r8, r8, #1
 8009016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009018:	3b01      	subs	r3, #1
 800901a:	4543      	cmp	r3, r8
 800901c:	dcf1      	bgt.n	8009002 <_printf_float+0x3fe>
 800901e:	4653      	mov	r3, sl
 8009020:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009024:	e6de      	b.n	8008de4 <_printf_float+0x1e0>
 8009026:	f04f 0800 	mov.w	r8, #0
 800902a:	f104 091a 	add.w	r9, r4, #26
 800902e:	e7f2      	b.n	8009016 <_printf_float+0x412>
 8009030:	2301      	movs	r3, #1
 8009032:	4642      	mov	r2, r8
 8009034:	e7df      	b.n	8008ff6 <_printf_float+0x3f2>
 8009036:	2301      	movs	r3, #1
 8009038:	464a      	mov	r2, r9
 800903a:	4631      	mov	r1, r6
 800903c:	4628      	mov	r0, r5
 800903e:	47b8      	blx	r7
 8009040:	3001      	adds	r0, #1
 8009042:	f43f ae3a 	beq.w	8008cba <_printf_float+0xb6>
 8009046:	f108 0801 	add.w	r8, r8, #1
 800904a:	68e3      	ldr	r3, [r4, #12]
 800904c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800904e:	1a5b      	subs	r3, r3, r1
 8009050:	4543      	cmp	r3, r8
 8009052:	dcf0      	bgt.n	8009036 <_printf_float+0x432>
 8009054:	e6fb      	b.n	8008e4e <_printf_float+0x24a>
 8009056:	f04f 0800 	mov.w	r8, #0
 800905a:	f104 0919 	add.w	r9, r4, #25
 800905e:	e7f4      	b.n	800904a <_printf_float+0x446>

08009060 <_printf_common>:
 8009060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009064:	4616      	mov	r6, r2
 8009066:	4699      	mov	r9, r3
 8009068:	688a      	ldr	r2, [r1, #8]
 800906a:	690b      	ldr	r3, [r1, #16]
 800906c:	4607      	mov	r7, r0
 800906e:	4293      	cmp	r3, r2
 8009070:	bfb8      	it	lt
 8009072:	4613      	movlt	r3, r2
 8009074:	6033      	str	r3, [r6, #0]
 8009076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800907a:	460c      	mov	r4, r1
 800907c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009080:	b10a      	cbz	r2, 8009086 <_printf_common+0x26>
 8009082:	3301      	adds	r3, #1
 8009084:	6033      	str	r3, [r6, #0]
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	0699      	lsls	r1, r3, #26
 800908a:	bf42      	ittt	mi
 800908c:	6833      	ldrmi	r3, [r6, #0]
 800908e:	3302      	addmi	r3, #2
 8009090:	6033      	strmi	r3, [r6, #0]
 8009092:	6825      	ldr	r5, [r4, #0]
 8009094:	f015 0506 	ands.w	r5, r5, #6
 8009098:	d106      	bne.n	80090a8 <_printf_common+0x48>
 800909a:	f104 0a19 	add.w	sl, r4, #25
 800909e:	68e3      	ldr	r3, [r4, #12]
 80090a0:	6832      	ldr	r2, [r6, #0]
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	42ab      	cmp	r3, r5
 80090a6:	dc2b      	bgt.n	8009100 <_printf_common+0xa0>
 80090a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090ac:	1e13      	subs	r3, r2, #0
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	bf18      	it	ne
 80090b2:	2301      	movne	r3, #1
 80090b4:	0692      	lsls	r2, r2, #26
 80090b6:	d430      	bmi.n	800911a <_printf_common+0xba>
 80090b8:	4649      	mov	r1, r9
 80090ba:	4638      	mov	r0, r7
 80090bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c0:	47c0      	blx	r8
 80090c2:	3001      	adds	r0, #1
 80090c4:	d023      	beq.n	800910e <_printf_common+0xae>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	6922      	ldr	r2, [r4, #16]
 80090ca:	f003 0306 	and.w	r3, r3, #6
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	bf14      	ite	ne
 80090d2:	2500      	movne	r5, #0
 80090d4:	6833      	ldreq	r3, [r6, #0]
 80090d6:	f04f 0600 	mov.w	r6, #0
 80090da:	bf08      	it	eq
 80090dc:	68e5      	ldreq	r5, [r4, #12]
 80090de:	f104 041a 	add.w	r4, r4, #26
 80090e2:	bf08      	it	eq
 80090e4:	1aed      	subeq	r5, r5, r3
 80090e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80090ea:	bf08      	it	eq
 80090ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090f0:	4293      	cmp	r3, r2
 80090f2:	bfc4      	itt	gt
 80090f4:	1a9b      	subgt	r3, r3, r2
 80090f6:	18ed      	addgt	r5, r5, r3
 80090f8:	42b5      	cmp	r5, r6
 80090fa:	d11a      	bne.n	8009132 <_printf_common+0xd2>
 80090fc:	2000      	movs	r0, #0
 80090fe:	e008      	b.n	8009112 <_printf_common+0xb2>
 8009100:	2301      	movs	r3, #1
 8009102:	4652      	mov	r2, sl
 8009104:	4649      	mov	r1, r9
 8009106:	4638      	mov	r0, r7
 8009108:	47c0      	blx	r8
 800910a:	3001      	adds	r0, #1
 800910c:	d103      	bne.n	8009116 <_printf_common+0xb6>
 800910e:	f04f 30ff 	mov.w	r0, #4294967295
 8009112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009116:	3501      	adds	r5, #1
 8009118:	e7c1      	b.n	800909e <_printf_common+0x3e>
 800911a:	2030      	movs	r0, #48	; 0x30
 800911c:	18e1      	adds	r1, r4, r3
 800911e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009128:	4422      	add	r2, r4
 800912a:	3302      	adds	r3, #2
 800912c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009130:	e7c2      	b.n	80090b8 <_printf_common+0x58>
 8009132:	2301      	movs	r3, #1
 8009134:	4622      	mov	r2, r4
 8009136:	4649      	mov	r1, r9
 8009138:	4638      	mov	r0, r7
 800913a:	47c0      	blx	r8
 800913c:	3001      	adds	r0, #1
 800913e:	d0e6      	beq.n	800910e <_printf_common+0xae>
 8009140:	3601      	adds	r6, #1
 8009142:	e7d9      	b.n	80090f8 <_printf_common+0x98>

08009144 <_printf_i>:
 8009144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	7e0f      	ldrb	r7, [r1, #24]
 800914a:	4691      	mov	r9, r2
 800914c:	2f78      	cmp	r7, #120	; 0x78
 800914e:	4680      	mov	r8, r0
 8009150:	460c      	mov	r4, r1
 8009152:	469a      	mov	sl, r3
 8009154:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800915a:	d807      	bhi.n	800916c <_printf_i+0x28>
 800915c:	2f62      	cmp	r7, #98	; 0x62
 800915e:	d80a      	bhi.n	8009176 <_printf_i+0x32>
 8009160:	2f00      	cmp	r7, #0
 8009162:	f000 80d5 	beq.w	8009310 <_printf_i+0x1cc>
 8009166:	2f58      	cmp	r7, #88	; 0x58
 8009168:	f000 80c1 	beq.w	80092ee <_printf_i+0x1aa>
 800916c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009174:	e03a      	b.n	80091ec <_printf_i+0xa8>
 8009176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800917a:	2b15      	cmp	r3, #21
 800917c:	d8f6      	bhi.n	800916c <_printf_i+0x28>
 800917e:	a101      	add	r1, pc, #4	; (adr r1, 8009184 <_printf_i+0x40>)
 8009180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009184:	080091dd 	.word	0x080091dd
 8009188:	080091f1 	.word	0x080091f1
 800918c:	0800916d 	.word	0x0800916d
 8009190:	0800916d 	.word	0x0800916d
 8009194:	0800916d 	.word	0x0800916d
 8009198:	0800916d 	.word	0x0800916d
 800919c:	080091f1 	.word	0x080091f1
 80091a0:	0800916d 	.word	0x0800916d
 80091a4:	0800916d 	.word	0x0800916d
 80091a8:	0800916d 	.word	0x0800916d
 80091ac:	0800916d 	.word	0x0800916d
 80091b0:	080092f7 	.word	0x080092f7
 80091b4:	0800921d 	.word	0x0800921d
 80091b8:	080092b1 	.word	0x080092b1
 80091bc:	0800916d 	.word	0x0800916d
 80091c0:	0800916d 	.word	0x0800916d
 80091c4:	08009319 	.word	0x08009319
 80091c8:	0800916d 	.word	0x0800916d
 80091cc:	0800921d 	.word	0x0800921d
 80091d0:	0800916d 	.word	0x0800916d
 80091d4:	0800916d 	.word	0x0800916d
 80091d8:	080092b9 	.word	0x080092b9
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	1d1a      	adds	r2, r3, #4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	602a      	str	r2, [r5, #0]
 80091e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091ec:	2301      	movs	r3, #1
 80091ee:	e0a0      	b.n	8009332 <_printf_i+0x1ee>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	0607      	lsls	r7, r0, #24
 80091f6:	f103 0104 	add.w	r1, r3, #4
 80091fa:	6029      	str	r1, [r5, #0]
 80091fc:	d501      	bpl.n	8009202 <_printf_i+0xbe>
 80091fe:	681e      	ldr	r6, [r3, #0]
 8009200:	e003      	b.n	800920a <_printf_i+0xc6>
 8009202:	0646      	lsls	r6, r0, #25
 8009204:	d5fb      	bpl.n	80091fe <_printf_i+0xba>
 8009206:	f9b3 6000 	ldrsh.w	r6, [r3]
 800920a:	2e00      	cmp	r6, #0
 800920c:	da03      	bge.n	8009216 <_printf_i+0xd2>
 800920e:	232d      	movs	r3, #45	; 0x2d
 8009210:	4276      	negs	r6, r6
 8009212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009216:	230a      	movs	r3, #10
 8009218:	4859      	ldr	r0, [pc, #356]	; (8009380 <_printf_i+0x23c>)
 800921a:	e012      	b.n	8009242 <_printf_i+0xfe>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	1d19      	adds	r1, r3, #4
 8009222:	6029      	str	r1, [r5, #0]
 8009224:	0605      	lsls	r5, r0, #24
 8009226:	d501      	bpl.n	800922c <_printf_i+0xe8>
 8009228:	681e      	ldr	r6, [r3, #0]
 800922a:	e002      	b.n	8009232 <_printf_i+0xee>
 800922c:	0641      	lsls	r1, r0, #25
 800922e:	d5fb      	bpl.n	8009228 <_printf_i+0xe4>
 8009230:	881e      	ldrh	r6, [r3, #0]
 8009232:	2f6f      	cmp	r7, #111	; 0x6f
 8009234:	bf0c      	ite	eq
 8009236:	2308      	moveq	r3, #8
 8009238:	230a      	movne	r3, #10
 800923a:	4851      	ldr	r0, [pc, #324]	; (8009380 <_printf_i+0x23c>)
 800923c:	2100      	movs	r1, #0
 800923e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009242:	6865      	ldr	r5, [r4, #4]
 8009244:	2d00      	cmp	r5, #0
 8009246:	bfa8      	it	ge
 8009248:	6821      	ldrge	r1, [r4, #0]
 800924a:	60a5      	str	r5, [r4, #8]
 800924c:	bfa4      	itt	ge
 800924e:	f021 0104 	bicge.w	r1, r1, #4
 8009252:	6021      	strge	r1, [r4, #0]
 8009254:	b90e      	cbnz	r6, 800925a <_printf_i+0x116>
 8009256:	2d00      	cmp	r5, #0
 8009258:	d04b      	beq.n	80092f2 <_printf_i+0x1ae>
 800925a:	4615      	mov	r5, r2
 800925c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009260:	fb03 6711 	mls	r7, r3, r1, r6
 8009264:	5dc7      	ldrb	r7, [r0, r7]
 8009266:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800926a:	4637      	mov	r7, r6
 800926c:	42bb      	cmp	r3, r7
 800926e:	460e      	mov	r6, r1
 8009270:	d9f4      	bls.n	800925c <_printf_i+0x118>
 8009272:	2b08      	cmp	r3, #8
 8009274:	d10b      	bne.n	800928e <_printf_i+0x14a>
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	07de      	lsls	r6, r3, #31
 800927a:	d508      	bpl.n	800928e <_printf_i+0x14a>
 800927c:	6923      	ldr	r3, [r4, #16]
 800927e:	6861      	ldr	r1, [r4, #4]
 8009280:	4299      	cmp	r1, r3
 8009282:	bfde      	ittt	le
 8009284:	2330      	movle	r3, #48	; 0x30
 8009286:	f805 3c01 	strble.w	r3, [r5, #-1]
 800928a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800928e:	1b52      	subs	r2, r2, r5
 8009290:	6122      	str	r2, [r4, #16]
 8009292:	464b      	mov	r3, r9
 8009294:	4621      	mov	r1, r4
 8009296:	4640      	mov	r0, r8
 8009298:	f8cd a000 	str.w	sl, [sp]
 800929c:	aa03      	add	r2, sp, #12
 800929e:	f7ff fedf 	bl	8009060 <_printf_common>
 80092a2:	3001      	adds	r0, #1
 80092a4:	d14a      	bne.n	800933c <_printf_i+0x1f8>
 80092a6:	f04f 30ff 	mov.w	r0, #4294967295
 80092aa:	b004      	add	sp, #16
 80092ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	f043 0320 	orr.w	r3, r3, #32
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	2778      	movs	r7, #120	; 0x78
 80092ba:	4832      	ldr	r0, [pc, #200]	; (8009384 <_printf_i+0x240>)
 80092bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	6829      	ldr	r1, [r5, #0]
 80092c4:	061f      	lsls	r7, r3, #24
 80092c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80092ca:	d402      	bmi.n	80092d2 <_printf_i+0x18e>
 80092cc:	065f      	lsls	r7, r3, #25
 80092ce:	bf48      	it	mi
 80092d0:	b2b6      	uxthmi	r6, r6
 80092d2:	07df      	lsls	r7, r3, #31
 80092d4:	bf48      	it	mi
 80092d6:	f043 0320 	orrmi.w	r3, r3, #32
 80092da:	6029      	str	r1, [r5, #0]
 80092dc:	bf48      	it	mi
 80092de:	6023      	strmi	r3, [r4, #0]
 80092e0:	b91e      	cbnz	r6, 80092ea <_printf_i+0x1a6>
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	f023 0320 	bic.w	r3, r3, #32
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	2310      	movs	r3, #16
 80092ec:	e7a6      	b.n	800923c <_printf_i+0xf8>
 80092ee:	4824      	ldr	r0, [pc, #144]	; (8009380 <_printf_i+0x23c>)
 80092f0:	e7e4      	b.n	80092bc <_printf_i+0x178>
 80092f2:	4615      	mov	r5, r2
 80092f4:	e7bd      	b.n	8009272 <_printf_i+0x12e>
 80092f6:	682b      	ldr	r3, [r5, #0]
 80092f8:	6826      	ldr	r6, [r4, #0]
 80092fa:	1d18      	adds	r0, r3, #4
 80092fc:	6961      	ldr	r1, [r4, #20]
 80092fe:	6028      	str	r0, [r5, #0]
 8009300:	0635      	lsls	r5, r6, #24
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	d501      	bpl.n	800930a <_printf_i+0x1c6>
 8009306:	6019      	str	r1, [r3, #0]
 8009308:	e002      	b.n	8009310 <_printf_i+0x1cc>
 800930a:	0670      	lsls	r0, r6, #25
 800930c:	d5fb      	bpl.n	8009306 <_printf_i+0x1c2>
 800930e:	8019      	strh	r1, [r3, #0]
 8009310:	2300      	movs	r3, #0
 8009312:	4615      	mov	r5, r2
 8009314:	6123      	str	r3, [r4, #16]
 8009316:	e7bc      	b.n	8009292 <_printf_i+0x14e>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	2100      	movs	r1, #0
 800931c:	1d1a      	adds	r2, r3, #4
 800931e:	602a      	str	r2, [r5, #0]
 8009320:	681d      	ldr	r5, [r3, #0]
 8009322:	6862      	ldr	r2, [r4, #4]
 8009324:	4628      	mov	r0, r5
 8009326:	f000 fc54 	bl	8009bd2 <memchr>
 800932a:	b108      	cbz	r0, 8009330 <_printf_i+0x1ec>
 800932c:	1b40      	subs	r0, r0, r5
 800932e:	6060      	str	r0, [r4, #4]
 8009330:	6863      	ldr	r3, [r4, #4]
 8009332:	6123      	str	r3, [r4, #16]
 8009334:	2300      	movs	r3, #0
 8009336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800933a:	e7aa      	b.n	8009292 <_printf_i+0x14e>
 800933c:	462a      	mov	r2, r5
 800933e:	4649      	mov	r1, r9
 8009340:	4640      	mov	r0, r8
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	47d0      	blx	sl
 8009346:	3001      	adds	r0, #1
 8009348:	d0ad      	beq.n	80092a6 <_printf_i+0x162>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	079b      	lsls	r3, r3, #30
 800934e:	d413      	bmi.n	8009378 <_printf_i+0x234>
 8009350:	68e0      	ldr	r0, [r4, #12]
 8009352:	9b03      	ldr	r3, [sp, #12]
 8009354:	4298      	cmp	r0, r3
 8009356:	bfb8      	it	lt
 8009358:	4618      	movlt	r0, r3
 800935a:	e7a6      	b.n	80092aa <_printf_i+0x166>
 800935c:	2301      	movs	r3, #1
 800935e:	4632      	mov	r2, r6
 8009360:	4649      	mov	r1, r9
 8009362:	4640      	mov	r0, r8
 8009364:	47d0      	blx	sl
 8009366:	3001      	adds	r0, #1
 8009368:	d09d      	beq.n	80092a6 <_printf_i+0x162>
 800936a:	3501      	adds	r5, #1
 800936c:	68e3      	ldr	r3, [r4, #12]
 800936e:	9903      	ldr	r1, [sp, #12]
 8009370:	1a5b      	subs	r3, r3, r1
 8009372:	42ab      	cmp	r3, r5
 8009374:	dcf2      	bgt.n	800935c <_printf_i+0x218>
 8009376:	e7eb      	b.n	8009350 <_printf_i+0x20c>
 8009378:	2500      	movs	r5, #0
 800937a:	f104 0619 	add.w	r6, r4, #25
 800937e:	e7f5      	b.n	800936c <_printf_i+0x228>
 8009380:	0800debe 	.word	0x0800debe
 8009384:	0800decf 	.word	0x0800decf

08009388 <_scanf_float>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	b087      	sub	sp, #28
 800938e:	9303      	str	r3, [sp, #12]
 8009390:	688b      	ldr	r3, [r1, #8]
 8009392:	4617      	mov	r7, r2
 8009394:	1e5a      	subs	r2, r3, #1
 8009396:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800939a:	bf85      	ittet	hi
 800939c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80093a0:	195b      	addhi	r3, r3, r5
 80093a2:	2300      	movls	r3, #0
 80093a4:	9302      	strhi	r3, [sp, #8]
 80093a6:	bf88      	it	hi
 80093a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80093ac:	468b      	mov	fp, r1
 80093ae:	f04f 0500 	mov.w	r5, #0
 80093b2:	bf8c      	ite	hi
 80093b4:	608b      	strhi	r3, [r1, #8]
 80093b6:	9302      	strls	r3, [sp, #8]
 80093b8:	680b      	ldr	r3, [r1, #0]
 80093ba:	4680      	mov	r8, r0
 80093bc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80093c0:	f84b 3b1c 	str.w	r3, [fp], #28
 80093c4:	460c      	mov	r4, r1
 80093c6:	465e      	mov	r6, fp
 80093c8:	46aa      	mov	sl, r5
 80093ca:	46a9      	mov	r9, r5
 80093cc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80093d0:	9501      	str	r5, [sp, #4]
 80093d2:	68a2      	ldr	r2, [r4, #8]
 80093d4:	b152      	cbz	r2, 80093ec <_scanf_float+0x64>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b4e      	cmp	r3, #78	; 0x4e
 80093dc:	d864      	bhi.n	80094a8 <_scanf_float+0x120>
 80093de:	2b40      	cmp	r3, #64	; 0x40
 80093e0:	d83c      	bhi.n	800945c <_scanf_float+0xd4>
 80093e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80093e6:	b2c8      	uxtb	r0, r1
 80093e8:	280e      	cmp	r0, #14
 80093ea:	d93a      	bls.n	8009462 <_scanf_float+0xda>
 80093ec:	f1b9 0f00 	cmp.w	r9, #0
 80093f0:	d003      	beq.n	80093fa <_scanf_float+0x72>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093fe:	f1ba 0f01 	cmp.w	sl, #1
 8009402:	f200 8113 	bhi.w	800962c <_scanf_float+0x2a4>
 8009406:	455e      	cmp	r6, fp
 8009408:	f200 8105 	bhi.w	8009616 <_scanf_float+0x28e>
 800940c:	2501      	movs	r5, #1
 800940e:	4628      	mov	r0, r5
 8009410:	b007      	add	sp, #28
 8009412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009416:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800941a:	2a0d      	cmp	r2, #13
 800941c:	d8e6      	bhi.n	80093ec <_scanf_float+0x64>
 800941e:	a101      	add	r1, pc, #4	; (adr r1, 8009424 <_scanf_float+0x9c>)
 8009420:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009424:	08009563 	.word	0x08009563
 8009428:	080093ed 	.word	0x080093ed
 800942c:	080093ed 	.word	0x080093ed
 8009430:	080093ed 	.word	0x080093ed
 8009434:	080095c3 	.word	0x080095c3
 8009438:	0800959b 	.word	0x0800959b
 800943c:	080093ed 	.word	0x080093ed
 8009440:	080093ed 	.word	0x080093ed
 8009444:	08009571 	.word	0x08009571
 8009448:	080093ed 	.word	0x080093ed
 800944c:	080093ed 	.word	0x080093ed
 8009450:	080093ed 	.word	0x080093ed
 8009454:	080093ed 	.word	0x080093ed
 8009458:	08009529 	.word	0x08009529
 800945c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009460:	e7db      	b.n	800941a <_scanf_float+0x92>
 8009462:	290e      	cmp	r1, #14
 8009464:	d8c2      	bhi.n	80093ec <_scanf_float+0x64>
 8009466:	a001      	add	r0, pc, #4	; (adr r0, 800946c <_scanf_float+0xe4>)
 8009468:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800946c:	0800951b 	.word	0x0800951b
 8009470:	080093ed 	.word	0x080093ed
 8009474:	0800951b 	.word	0x0800951b
 8009478:	080095af 	.word	0x080095af
 800947c:	080093ed 	.word	0x080093ed
 8009480:	080094c9 	.word	0x080094c9
 8009484:	08009505 	.word	0x08009505
 8009488:	08009505 	.word	0x08009505
 800948c:	08009505 	.word	0x08009505
 8009490:	08009505 	.word	0x08009505
 8009494:	08009505 	.word	0x08009505
 8009498:	08009505 	.word	0x08009505
 800949c:	08009505 	.word	0x08009505
 80094a0:	08009505 	.word	0x08009505
 80094a4:	08009505 	.word	0x08009505
 80094a8:	2b6e      	cmp	r3, #110	; 0x6e
 80094aa:	d809      	bhi.n	80094c0 <_scanf_float+0x138>
 80094ac:	2b60      	cmp	r3, #96	; 0x60
 80094ae:	d8b2      	bhi.n	8009416 <_scanf_float+0x8e>
 80094b0:	2b54      	cmp	r3, #84	; 0x54
 80094b2:	d077      	beq.n	80095a4 <_scanf_float+0x21c>
 80094b4:	2b59      	cmp	r3, #89	; 0x59
 80094b6:	d199      	bne.n	80093ec <_scanf_float+0x64>
 80094b8:	2d07      	cmp	r5, #7
 80094ba:	d197      	bne.n	80093ec <_scanf_float+0x64>
 80094bc:	2508      	movs	r5, #8
 80094be:	e029      	b.n	8009514 <_scanf_float+0x18c>
 80094c0:	2b74      	cmp	r3, #116	; 0x74
 80094c2:	d06f      	beq.n	80095a4 <_scanf_float+0x21c>
 80094c4:	2b79      	cmp	r3, #121	; 0x79
 80094c6:	e7f6      	b.n	80094b6 <_scanf_float+0x12e>
 80094c8:	6821      	ldr	r1, [r4, #0]
 80094ca:	05c8      	lsls	r0, r1, #23
 80094cc:	d51a      	bpl.n	8009504 <_scanf_float+0x17c>
 80094ce:	9b02      	ldr	r3, [sp, #8]
 80094d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80094d4:	6021      	str	r1, [r4, #0]
 80094d6:	f109 0901 	add.w	r9, r9, #1
 80094da:	b11b      	cbz	r3, 80094e4 <_scanf_float+0x15c>
 80094dc:	3b01      	subs	r3, #1
 80094de:	3201      	adds	r2, #1
 80094e0:	9302      	str	r3, [sp, #8]
 80094e2:	60a2      	str	r2, [r4, #8]
 80094e4:	68a3      	ldr	r3, [r4, #8]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	60a3      	str	r3, [r4, #8]
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	3301      	adds	r3, #1
 80094ee:	6123      	str	r3, [r4, #16]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	607b      	str	r3, [r7, #4]
 80094f8:	f340 8084 	ble.w	8009604 <_scanf_float+0x27c>
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	3301      	adds	r3, #1
 8009500:	603b      	str	r3, [r7, #0]
 8009502:	e766      	b.n	80093d2 <_scanf_float+0x4a>
 8009504:	eb1a 0f05 	cmn.w	sl, r5
 8009508:	f47f af70 	bne.w	80093ec <_scanf_float+0x64>
 800950c:	6822      	ldr	r2, [r4, #0]
 800950e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	f806 3b01 	strb.w	r3, [r6], #1
 8009518:	e7e4      	b.n	80094e4 <_scanf_float+0x15c>
 800951a:	6822      	ldr	r2, [r4, #0]
 800951c:	0610      	lsls	r0, r2, #24
 800951e:	f57f af65 	bpl.w	80093ec <_scanf_float+0x64>
 8009522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009526:	e7f4      	b.n	8009512 <_scanf_float+0x18a>
 8009528:	f1ba 0f00 	cmp.w	sl, #0
 800952c:	d10e      	bne.n	800954c <_scanf_float+0x1c4>
 800952e:	f1b9 0f00 	cmp.w	r9, #0
 8009532:	d10e      	bne.n	8009552 <_scanf_float+0x1ca>
 8009534:	6822      	ldr	r2, [r4, #0]
 8009536:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800953a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800953e:	d108      	bne.n	8009552 <_scanf_float+0x1ca>
 8009540:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009544:	f04f 0a01 	mov.w	sl, #1
 8009548:	6022      	str	r2, [r4, #0]
 800954a:	e7e3      	b.n	8009514 <_scanf_float+0x18c>
 800954c:	f1ba 0f02 	cmp.w	sl, #2
 8009550:	d055      	beq.n	80095fe <_scanf_float+0x276>
 8009552:	2d01      	cmp	r5, #1
 8009554:	d002      	beq.n	800955c <_scanf_float+0x1d4>
 8009556:	2d04      	cmp	r5, #4
 8009558:	f47f af48 	bne.w	80093ec <_scanf_float+0x64>
 800955c:	3501      	adds	r5, #1
 800955e:	b2ed      	uxtb	r5, r5
 8009560:	e7d8      	b.n	8009514 <_scanf_float+0x18c>
 8009562:	f1ba 0f01 	cmp.w	sl, #1
 8009566:	f47f af41 	bne.w	80093ec <_scanf_float+0x64>
 800956a:	f04f 0a02 	mov.w	sl, #2
 800956e:	e7d1      	b.n	8009514 <_scanf_float+0x18c>
 8009570:	b97d      	cbnz	r5, 8009592 <_scanf_float+0x20a>
 8009572:	f1b9 0f00 	cmp.w	r9, #0
 8009576:	f47f af3c 	bne.w	80093f2 <_scanf_float+0x6a>
 800957a:	6822      	ldr	r2, [r4, #0]
 800957c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009580:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009584:	f47f af39 	bne.w	80093fa <_scanf_float+0x72>
 8009588:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800958c:	2501      	movs	r5, #1
 800958e:	6022      	str	r2, [r4, #0]
 8009590:	e7c0      	b.n	8009514 <_scanf_float+0x18c>
 8009592:	2d03      	cmp	r5, #3
 8009594:	d0e2      	beq.n	800955c <_scanf_float+0x1d4>
 8009596:	2d05      	cmp	r5, #5
 8009598:	e7de      	b.n	8009558 <_scanf_float+0x1d0>
 800959a:	2d02      	cmp	r5, #2
 800959c:	f47f af26 	bne.w	80093ec <_scanf_float+0x64>
 80095a0:	2503      	movs	r5, #3
 80095a2:	e7b7      	b.n	8009514 <_scanf_float+0x18c>
 80095a4:	2d06      	cmp	r5, #6
 80095a6:	f47f af21 	bne.w	80093ec <_scanf_float+0x64>
 80095aa:	2507      	movs	r5, #7
 80095ac:	e7b2      	b.n	8009514 <_scanf_float+0x18c>
 80095ae:	6822      	ldr	r2, [r4, #0]
 80095b0:	0591      	lsls	r1, r2, #22
 80095b2:	f57f af1b 	bpl.w	80093ec <_scanf_float+0x64>
 80095b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80095ba:	6022      	str	r2, [r4, #0]
 80095bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80095c0:	e7a8      	b.n	8009514 <_scanf_float+0x18c>
 80095c2:	6822      	ldr	r2, [r4, #0]
 80095c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80095c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80095cc:	d006      	beq.n	80095dc <_scanf_float+0x254>
 80095ce:	0550      	lsls	r0, r2, #21
 80095d0:	f57f af0c 	bpl.w	80093ec <_scanf_float+0x64>
 80095d4:	f1b9 0f00 	cmp.w	r9, #0
 80095d8:	f43f af0f 	beq.w	80093fa <_scanf_float+0x72>
 80095dc:	0591      	lsls	r1, r2, #22
 80095de:	bf58      	it	pl
 80095e0:	9901      	ldrpl	r1, [sp, #4]
 80095e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80095e6:	bf58      	it	pl
 80095e8:	eba9 0101 	subpl.w	r1, r9, r1
 80095ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80095f0:	f04f 0900 	mov.w	r9, #0
 80095f4:	bf58      	it	pl
 80095f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80095fa:	6022      	str	r2, [r4, #0]
 80095fc:	e78a      	b.n	8009514 <_scanf_float+0x18c>
 80095fe:	f04f 0a03 	mov.w	sl, #3
 8009602:	e787      	b.n	8009514 <_scanf_float+0x18c>
 8009604:	4639      	mov	r1, r7
 8009606:	4640      	mov	r0, r8
 8009608:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800960c:	4798      	blx	r3
 800960e:	2800      	cmp	r0, #0
 8009610:	f43f aedf 	beq.w	80093d2 <_scanf_float+0x4a>
 8009614:	e6ea      	b.n	80093ec <_scanf_float+0x64>
 8009616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800961a:	463a      	mov	r2, r7
 800961c:	4640      	mov	r0, r8
 800961e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009622:	4798      	blx	r3
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	3b01      	subs	r3, #1
 8009628:	6123      	str	r3, [r4, #16]
 800962a:	e6ec      	b.n	8009406 <_scanf_float+0x7e>
 800962c:	1e6b      	subs	r3, r5, #1
 800962e:	2b06      	cmp	r3, #6
 8009630:	d825      	bhi.n	800967e <_scanf_float+0x2f6>
 8009632:	2d02      	cmp	r5, #2
 8009634:	d836      	bhi.n	80096a4 <_scanf_float+0x31c>
 8009636:	455e      	cmp	r6, fp
 8009638:	f67f aee8 	bls.w	800940c <_scanf_float+0x84>
 800963c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009640:	463a      	mov	r2, r7
 8009642:	4640      	mov	r0, r8
 8009644:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009648:	4798      	blx	r3
 800964a:	6923      	ldr	r3, [r4, #16]
 800964c:	3b01      	subs	r3, #1
 800964e:	6123      	str	r3, [r4, #16]
 8009650:	e7f1      	b.n	8009636 <_scanf_float+0x2ae>
 8009652:	9802      	ldr	r0, [sp, #8]
 8009654:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009658:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800965c:	463a      	mov	r2, r7
 800965e:	9002      	str	r0, [sp, #8]
 8009660:	4640      	mov	r0, r8
 8009662:	4798      	blx	r3
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	3b01      	subs	r3, #1
 8009668:	6123      	str	r3, [r4, #16]
 800966a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800966e:	fa5f fa8a 	uxtb.w	sl, sl
 8009672:	f1ba 0f02 	cmp.w	sl, #2
 8009676:	d1ec      	bne.n	8009652 <_scanf_float+0x2ca>
 8009678:	3d03      	subs	r5, #3
 800967a:	b2ed      	uxtb	r5, r5
 800967c:	1b76      	subs	r6, r6, r5
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	05da      	lsls	r2, r3, #23
 8009682:	d52f      	bpl.n	80096e4 <_scanf_float+0x35c>
 8009684:	055b      	lsls	r3, r3, #21
 8009686:	d510      	bpl.n	80096aa <_scanf_float+0x322>
 8009688:	455e      	cmp	r6, fp
 800968a:	f67f aebf 	bls.w	800940c <_scanf_float+0x84>
 800968e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009692:	463a      	mov	r2, r7
 8009694:	4640      	mov	r0, r8
 8009696:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800969a:	4798      	blx	r3
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	3b01      	subs	r3, #1
 80096a0:	6123      	str	r3, [r4, #16]
 80096a2:	e7f1      	b.n	8009688 <_scanf_float+0x300>
 80096a4:	46aa      	mov	sl, r5
 80096a6:	9602      	str	r6, [sp, #8]
 80096a8:	e7df      	b.n	800966a <_scanf_float+0x2e2>
 80096aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	2965      	cmp	r1, #101	; 0x65
 80096b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80096b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80096ba:	6123      	str	r3, [r4, #16]
 80096bc:	d00c      	beq.n	80096d8 <_scanf_float+0x350>
 80096be:	2945      	cmp	r1, #69	; 0x45
 80096c0:	d00a      	beq.n	80096d8 <_scanf_float+0x350>
 80096c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096c6:	463a      	mov	r2, r7
 80096c8:	4640      	mov	r0, r8
 80096ca:	4798      	blx	r3
 80096cc:	6923      	ldr	r3, [r4, #16]
 80096ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	1eb5      	subs	r5, r6, #2
 80096d6:	6123      	str	r3, [r4, #16]
 80096d8:	463a      	mov	r2, r7
 80096da:	4640      	mov	r0, r8
 80096dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096e0:	4798      	blx	r3
 80096e2:	462e      	mov	r6, r5
 80096e4:	6825      	ldr	r5, [r4, #0]
 80096e6:	f015 0510 	ands.w	r5, r5, #16
 80096ea:	d155      	bne.n	8009798 <_scanf_float+0x410>
 80096ec:	7035      	strb	r5, [r6, #0]
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80096f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096f8:	d11d      	bne.n	8009736 <_scanf_float+0x3ae>
 80096fa:	9b01      	ldr	r3, [sp, #4]
 80096fc:	454b      	cmp	r3, r9
 80096fe:	eba3 0209 	sub.w	r2, r3, r9
 8009702:	d125      	bne.n	8009750 <_scanf_float+0x3c8>
 8009704:	2200      	movs	r2, #0
 8009706:	4659      	mov	r1, fp
 8009708:	4640      	mov	r0, r8
 800970a:	f002 fca1 	bl	800c050 <_strtod_r>
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	f8d4 c000 	ldr.w	ip, [r4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f01c 0f02 	tst.w	ip, #2
 800971a:	4606      	mov	r6, r0
 800971c:	460f      	mov	r7, r1
 800971e:	f103 0204 	add.w	r2, r3, #4
 8009722:	d020      	beq.n	8009766 <_scanf_float+0x3de>
 8009724:	9903      	ldr	r1, [sp, #12]
 8009726:	600a      	str	r2, [r1, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	e9c3 6700 	strd	r6, r7, [r3]
 800972e:	68e3      	ldr	r3, [r4, #12]
 8009730:	3301      	adds	r3, #1
 8009732:	60e3      	str	r3, [r4, #12]
 8009734:	e66b      	b.n	800940e <_scanf_float+0x86>
 8009736:	9b04      	ldr	r3, [sp, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0e3      	beq.n	8009704 <_scanf_float+0x37c>
 800973c:	9905      	ldr	r1, [sp, #20]
 800973e:	230a      	movs	r3, #10
 8009740:	462a      	mov	r2, r5
 8009742:	4640      	mov	r0, r8
 8009744:	3101      	adds	r1, #1
 8009746:	f002 fd07 	bl	800c158 <_strtol_r>
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	9e05      	ldr	r6, [sp, #20]
 800974e:	1ac2      	subs	r2, r0, r3
 8009750:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009754:	429e      	cmp	r6, r3
 8009756:	bf28      	it	cs
 8009758:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800975c:	4630      	mov	r0, r6
 800975e:	490f      	ldr	r1, [pc, #60]	; (800979c <_scanf_float+0x414>)
 8009760:	f000 f916 	bl	8009990 <siprintf>
 8009764:	e7ce      	b.n	8009704 <_scanf_float+0x37c>
 8009766:	f01c 0f04 	tst.w	ip, #4
 800976a:	d1db      	bne.n	8009724 <_scanf_float+0x39c>
 800976c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009770:	f8cc 2000 	str.w	r2, [ip]
 8009774:	f8d3 8000 	ldr.w	r8, [r3]
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	f7f7 f946 	bl	8000a0c <__aeabi_dcmpun>
 8009780:	b128      	cbz	r0, 800978e <_scanf_float+0x406>
 8009782:	4807      	ldr	r0, [pc, #28]	; (80097a0 <_scanf_float+0x418>)
 8009784:	f000 fa42 	bl	8009c0c <nanf>
 8009788:	f8c8 0000 	str.w	r0, [r8]
 800978c:	e7cf      	b.n	800972e <_scanf_float+0x3a6>
 800978e:	4630      	mov	r0, r6
 8009790:	4639      	mov	r1, r7
 8009792:	f7f7 f999 	bl	8000ac8 <__aeabi_d2f>
 8009796:	e7f7      	b.n	8009788 <_scanf_float+0x400>
 8009798:	2500      	movs	r5, #0
 800979a:	e638      	b.n	800940e <_scanf_float+0x86>
 800979c:	0800dee0 	.word	0x0800dee0
 80097a0:	0800e290 	.word	0x0800e290

080097a4 <std>:
 80097a4:	2300      	movs	r3, #0
 80097a6:	b510      	push	{r4, lr}
 80097a8:	4604      	mov	r4, r0
 80097aa:	e9c0 3300 	strd	r3, r3, [r0]
 80097ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097b2:	6083      	str	r3, [r0, #8]
 80097b4:	8181      	strh	r1, [r0, #12]
 80097b6:	6643      	str	r3, [r0, #100]	; 0x64
 80097b8:	81c2      	strh	r2, [r0, #14]
 80097ba:	6183      	str	r3, [r0, #24]
 80097bc:	4619      	mov	r1, r3
 80097be:	2208      	movs	r2, #8
 80097c0:	305c      	adds	r0, #92	; 0x5c
 80097c2:	f000 f974 	bl	8009aae <memset>
 80097c6:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <std+0x58>)
 80097c8:	6224      	str	r4, [r4, #32]
 80097ca:	6263      	str	r3, [r4, #36]	; 0x24
 80097cc:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <std+0x5c>)
 80097ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80097d0:	4b0c      	ldr	r3, [pc, #48]	; (8009804 <std+0x60>)
 80097d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097d4:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <std+0x64>)
 80097d6:	6323      	str	r3, [r4, #48]	; 0x30
 80097d8:	4b0c      	ldr	r3, [pc, #48]	; (800980c <std+0x68>)
 80097da:	429c      	cmp	r4, r3
 80097dc:	d006      	beq.n	80097ec <std+0x48>
 80097de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80097e2:	4294      	cmp	r4, r2
 80097e4:	d002      	beq.n	80097ec <std+0x48>
 80097e6:	33d0      	adds	r3, #208	; 0xd0
 80097e8:	429c      	cmp	r4, r3
 80097ea:	d105      	bne.n	80097f8 <std+0x54>
 80097ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f4:	f000 b9ea 	b.w	8009bcc <__retarget_lock_init_recursive>
 80097f8:	bd10      	pop	{r4, pc}
 80097fa:	bf00      	nop
 80097fc:	08009a25 	.word	0x08009a25
 8009800:	08009a4b 	.word	0x08009a4b
 8009804:	08009a83 	.word	0x08009a83
 8009808:	08009aa7 	.word	0x08009aa7
 800980c:	20001f84 	.word	0x20001f84

08009810 <stdio_exit_handler>:
 8009810:	4a02      	ldr	r2, [pc, #8]	; (800981c <stdio_exit_handler+0xc>)
 8009812:	4903      	ldr	r1, [pc, #12]	; (8009820 <stdio_exit_handler+0x10>)
 8009814:	4803      	ldr	r0, [pc, #12]	; (8009824 <stdio_exit_handler+0x14>)
 8009816:	f000 b869 	b.w	80098ec <_fwalk_sglue>
 800981a:	bf00      	nop
 800981c:	20000024 	.word	0x20000024
 8009820:	0800cb4d 	.word	0x0800cb4d
 8009824:	20000030 	.word	0x20000030

08009828 <cleanup_stdio>:
 8009828:	6841      	ldr	r1, [r0, #4]
 800982a:	4b0c      	ldr	r3, [pc, #48]	; (800985c <cleanup_stdio+0x34>)
 800982c:	b510      	push	{r4, lr}
 800982e:	4299      	cmp	r1, r3
 8009830:	4604      	mov	r4, r0
 8009832:	d001      	beq.n	8009838 <cleanup_stdio+0x10>
 8009834:	f003 f98a 	bl	800cb4c <_fflush_r>
 8009838:	68a1      	ldr	r1, [r4, #8]
 800983a:	4b09      	ldr	r3, [pc, #36]	; (8009860 <cleanup_stdio+0x38>)
 800983c:	4299      	cmp	r1, r3
 800983e:	d002      	beq.n	8009846 <cleanup_stdio+0x1e>
 8009840:	4620      	mov	r0, r4
 8009842:	f003 f983 	bl	800cb4c <_fflush_r>
 8009846:	68e1      	ldr	r1, [r4, #12]
 8009848:	4b06      	ldr	r3, [pc, #24]	; (8009864 <cleanup_stdio+0x3c>)
 800984a:	4299      	cmp	r1, r3
 800984c:	d004      	beq.n	8009858 <cleanup_stdio+0x30>
 800984e:	4620      	mov	r0, r4
 8009850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009854:	f003 b97a 	b.w	800cb4c <_fflush_r>
 8009858:	bd10      	pop	{r4, pc}
 800985a:	bf00      	nop
 800985c:	20001f84 	.word	0x20001f84
 8009860:	20001fec 	.word	0x20001fec
 8009864:	20002054 	.word	0x20002054

08009868 <global_stdio_init.part.0>:
 8009868:	b510      	push	{r4, lr}
 800986a:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <global_stdio_init.part.0+0x30>)
 800986c:	4c0b      	ldr	r4, [pc, #44]	; (800989c <global_stdio_init.part.0+0x34>)
 800986e:	4a0c      	ldr	r2, [pc, #48]	; (80098a0 <global_stdio_init.part.0+0x38>)
 8009870:	4620      	mov	r0, r4
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	2104      	movs	r1, #4
 8009876:	2200      	movs	r2, #0
 8009878:	f7ff ff94 	bl	80097a4 <std>
 800987c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009880:	2201      	movs	r2, #1
 8009882:	2109      	movs	r1, #9
 8009884:	f7ff ff8e 	bl	80097a4 <std>
 8009888:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800988c:	2202      	movs	r2, #2
 800988e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009892:	2112      	movs	r1, #18
 8009894:	f7ff bf86 	b.w	80097a4 <std>
 8009898:	200020bc 	.word	0x200020bc
 800989c:	20001f84 	.word	0x20001f84
 80098a0:	08009811 	.word	0x08009811

080098a4 <__sfp_lock_acquire>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__sfp_lock_acquire+0x8>)
 80098a6:	f000 b992 	b.w	8009bce <__retarget_lock_acquire_recursive>
 80098aa:	bf00      	nop
 80098ac:	200020c5 	.word	0x200020c5

080098b0 <__sfp_lock_release>:
 80098b0:	4801      	ldr	r0, [pc, #4]	; (80098b8 <__sfp_lock_release+0x8>)
 80098b2:	f000 b98d 	b.w	8009bd0 <__retarget_lock_release_recursive>
 80098b6:	bf00      	nop
 80098b8:	200020c5 	.word	0x200020c5

080098bc <__sinit>:
 80098bc:	b510      	push	{r4, lr}
 80098be:	4604      	mov	r4, r0
 80098c0:	f7ff fff0 	bl	80098a4 <__sfp_lock_acquire>
 80098c4:	6a23      	ldr	r3, [r4, #32]
 80098c6:	b11b      	cbz	r3, 80098d0 <__sinit+0x14>
 80098c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098cc:	f7ff bff0 	b.w	80098b0 <__sfp_lock_release>
 80098d0:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <__sinit+0x28>)
 80098d2:	6223      	str	r3, [r4, #32]
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <__sinit+0x2c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1f5      	bne.n	80098c8 <__sinit+0xc>
 80098dc:	f7ff ffc4 	bl	8009868 <global_stdio_init.part.0>
 80098e0:	e7f2      	b.n	80098c8 <__sinit+0xc>
 80098e2:	bf00      	nop
 80098e4:	08009829 	.word	0x08009829
 80098e8:	200020bc 	.word	0x200020bc

080098ec <_fwalk_sglue>:
 80098ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f0:	4607      	mov	r7, r0
 80098f2:	4688      	mov	r8, r1
 80098f4:	4614      	mov	r4, r2
 80098f6:	2600      	movs	r6, #0
 80098f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098fc:	f1b9 0901 	subs.w	r9, r9, #1
 8009900:	d505      	bpl.n	800990e <_fwalk_sglue+0x22>
 8009902:	6824      	ldr	r4, [r4, #0]
 8009904:	2c00      	cmp	r4, #0
 8009906:	d1f7      	bne.n	80098f8 <_fwalk_sglue+0xc>
 8009908:	4630      	mov	r0, r6
 800990a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990e:	89ab      	ldrh	r3, [r5, #12]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d907      	bls.n	8009924 <_fwalk_sglue+0x38>
 8009914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009918:	3301      	adds	r3, #1
 800991a:	d003      	beq.n	8009924 <_fwalk_sglue+0x38>
 800991c:	4629      	mov	r1, r5
 800991e:	4638      	mov	r0, r7
 8009920:	47c0      	blx	r8
 8009922:	4306      	orrs	r6, r0
 8009924:	3568      	adds	r5, #104	; 0x68
 8009926:	e7e9      	b.n	80098fc <_fwalk_sglue+0x10>

08009928 <sniprintf>:
 8009928:	b40c      	push	{r2, r3}
 800992a:	b530      	push	{r4, r5, lr}
 800992c:	4b17      	ldr	r3, [pc, #92]	; (800998c <sniprintf+0x64>)
 800992e:	1e0c      	subs	r4, r1, #0
 8009930:	681d      	ldr	r5, [r3, #0]
 8009932:	b09d      	sub	sp, #116	; 0x74
 8009934:	da08      	bge.n	8009948 <sniprintf+0x20>
 8009936:	238b      	movs	r3, #139	; 0x8b
 8009938:	f04f 30ff 	mov.w	r0, #4294967295
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	b01d      	add	sp, #116	; 0x74
 8009940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009944:	b002      	add	sp, #8
 8009946:	4770      	bx	lr
 8009948:	f44f 7302 	mov.w	r3, #520	; 0x208
 800994c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009950:	bf0c      	ite	eq
 8009952:	4623      	moveq	r3, r4
 8009954:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009958:	9304      	str	r3, [sp, #16]
 800995a:	9307      	str	r3, [sp, #28]
 800995c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009960:	9002      	str	r0, [sp, #8]
 8009962:	9006      	str	r0, [sp, #24]
 8009964:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009968:	4628      	mov	r0, r5
 800996a:	ab21      	add	r3, sp, #132	; 0x84
 800996c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800996e:	a902      	add	r1, sp, #8
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	f002 fc4d 	bl	800c210 <_svfiprintf_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	bfbc      	itt	lt
 800997a:	238b      	movlt	r3, #139	; 0x8b
 800997c:	602b      	strlt	r3, [r5, #0]
 800997e:	2c00      	cmp	r4, #0
 8009980:	d0dd      	beq.n	800993e <sniprintf+0x16>
 8009982:	2200      	movs	r2, #0
 8009984:	9b02      	ldr	r3, [sp, #8]
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	e7d9      	b.n	800993e <sniprintf+0x16>
 800998a:	bf00      	nop
 800998c:	2000007c 	.word	0x2000007c

08009990 <siprintf>:
 8009990:	b40e      	push	{r1, r2, r3}
 8009992:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009996:	b500      	push	{lr}
 8009998:	b09c      	sub	sp, #112	; 0x70
 800999a:	ab1d      	add	r3, sp, #116	; 0x74
 800999c:	9002      	str	r0, [sp, #8]
 800999e:	9006      	str	r0, [sp, #24]
 80099a0:	9107      	str	r1, [sp, #28]
 80099a2:	9104      	str	r1, [sp, #16]
 80099a4:	4808      	ldr	r0, [pc, #32]	; (80099c8 <siprintf+0x38>)
 80099a6:	4909      	ldr	r1, [pc, #36]	; (80099cc <siprintf+0x3c>)
 80099a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ac:	9105      	str	r1, [sp, #20]
 80099ae:	6800      	ldr	r0, [r0, #0]
 80099b0:	a902      	add	r1, sp, #8
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	f002 fc2c 	bl	800c210 <_svfiprintf_r>
 80099b8:	2200      	movs	r2, #0
 80099ba:	9b02      	ldr	r3, [sp, #8]
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	b01c      	add	sp, #112	; 0x70
 80099c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c4:	b003      	add	sp, #12
 80099c6:	4770      	bx	lr
 80099c8:	2000007c 	.word	0x2000007c
 80099cc:	ffff0208 	.word	0xffff0208

080099d0 <siscanf>:
 80099d0:	b40e      	push	{r1, r2, r3}
 80099d2:	f44f 7201 	mov.w	r2, #516	; 0x204
 80099d6:	b530      	push	{r4, r5, lr}
 80099d8:	b09c      	sub	sp, #112	; 0x70
 80099da:	ac1f      	add	r4, sp, #124	; 0x7c
 80099dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80099e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80099e4:	9002      	str	r0, [sp, #8]
 80099e6:	9006      	str	r0, [sp, #24]
 80099e8:	f7f6 fbb2 	bl	8000150 <strlen>
 80099ec:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <siscanf+0x4c>)
 80099ee:	9003      	str	r0, [sp, #12]
 80099f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099f2:	2300      	movs	r3, #0
 80099f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099f6:	9314      	str	r3, [sp, #80]	; 0x50
 80099f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099fc:	9007      	str	r0, [sp, #28]
 80099fe:	4808      	ldr	r0, [pc, #32]	; (8009a20 <siscanf+0x50>)
 8009a00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009a04:	462a      	mov	r2, r5
 8009a06:	4623      	mov	r3, r4
 8009a08:	a902      	add	r1, sp, #8
 8009a0a:	6800      	ldr	r0, [r0, #0]
 8009a0c:	9401      	str	r4, [sp, #4]
 8009a0e:	f002 fd57 	bl	800c4c0 <__ssvfiscanf_r>
 8009a12:	b01c      	add	sp, #112	; 0x70
 8009a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a18:	b003      	add	sp, #12
 8009a1a:	4770      	bx	lr
 8009a1c:	08009a47 	.word	0x08009a47
 8009a20:	2000007c 	.word	0x2000007c

08009a24 <__sread>:
 8009a24:	b510      	push	{r4, lr}
 8009a26:	460c      	mov	r4, r1
 8009a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2c:	f000 f880 	bl	8009b30 <_read_r>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	bfab      	itete	ge
 8009a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a36:	89a3      	ldrhlt	r3, [r4, #12]
 8009a38:	181b      	addge	r3, r3, r0
 8009a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a3e:	bfac      	ite	ge
 8009a40:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a42:	81a3      	strhlt	r3, [r4, #12]
 8009a44:	bd10      	pop	{r4, pc}

08009a46 <__seofread>:
 8009a46:	2000      	movs	r0, #0
 8009a48:	4770      	bx	lr

08009a4a <__swrite>:
 8009a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4e:	461f      	mov	r7, r3
 8009a50:	898b      	ldrh	r3, [r1, #12]
 8009a52:	4605      	mov	r5, r0
 8009a54:	05db      	lsls	r3, r3, #23
 8009a56:	460c      	mov	r4, r1
 8009a58:	4616      	mov	r6, r2
 8009a5a:	d505      	bpl.n	8009a68 <__swrite+0x1e>
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a64:	f000 f852 	bl	8009b0c <_lseek_r>
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	4628      	mov	r0, r5
 8009a74:	463b      	mov	r3, r7
 8009a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7e:	f000 b869 	b.w	8009b54 <_write_r>

08009a82 <__sseek>:
 8009a82:	b510      	push	{r4, lr}
 8009a84:	460c      	mov	r4, r1
 8009a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8a:	f000 f83f 	bl	8009b0c <_lseek_r>
 8009a8e:	1c43      	adds	r3, r0, #1
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	bf15      	itete	ne
 8009a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a9e:	81a3      	strheq	r3, [r4, #12]
 8009aa0:	bf18      	it	ne
 8009aa2:	81a3      	strhne	r3, [r4, #12]
 8009aa4:	bd10      	pop	{r4, pc}

08009aa6 <__sclose>:
 8009aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aaa:	f000 b81f 	b.w	8009aec <_close_r>

08009aae <memset>:
 8009aae:	4603      	mov	r3, r0
 8009ab0:	4402      	add	r2, r0
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d100      	bne.n	8009ab8 <memset+0xa>
 8009ab6:	4770      	bx	lr
 8009ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8009abc:	e7f9      	b.n	8009ab2 <memset+0x4>

08009abe <strncmp>:
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	b16a      	cbz	r2, 8009ade <strncmp+0x20>
 8009ac2:	3901      	subs	r1, #1
 8009ac4:	1884      	adds	r4, r0, r2
 8009ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d103      	bne.n	8009ada <strncmp+0x1c>
 8009ad2:	42a0      	cmp	r0, r4
 8009ad4:	d001      	beq.n	8009ada <strncmp+0x1c>
 8009ad6:	2a00      	cmp	r2, #0
 8009ad8:	d1f5      	bne.n	8009ac6 <strncmp+0x8>
 8009ada:	1ad0      	subs	r0, r2, r3
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	4610      	mov	r0, r2
 8009ae0:	e7fc      	b.n	8009adc <strncmp+0x1e>
	...

08009ae4 <_localeconv_r>:
 8009ae4:	4800      	ldr	r0, [pc, #0]	; (8009ae8 <_localeconv_r+0x4>)
 8009ae6:	4770      	bx	lr
 8009ae8:	20000170 	.word	0x20000170

08009aec <_close_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	2300      	movs	r3, #0
 8009af0:	4d05      	ldr	r5, [pc, #20]	; (8009b08 <_close_r+0x1c>)
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f8 f8b4 	bl	8001c64 <_close>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_close_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_close_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	200020c0 	.word	0x200020c0

08009b0c <_lseek_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	2200      	movs	r2, #0
 8009b16:	4d05      	ldr	r5, [pc, #20]	; (8009b2c <_lseek_r+0x20>)
 8009b18:	602a      	str	r2, [r5, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f7f8 f8c6 	bl	8001cac <_lseek>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_lseek_r+0x1e>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_lseek_r+0x1e>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	200020c0 	.word	0x200020c0

08009b30 <_read_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	4611      	mov	r1, r2
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4d05      	ldr	r5, [pc, #20]	; (8009b50 <_read_r+0x20>)
 8009b3c:	602a      	str	r2, [r5, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f7f8 f857 	bl	8001bf2 <_read>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_read_r+0x1e>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_read_r+0x1e>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	200020c0 	.word	0x200020c0

08009b54 <_write_r>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4d05      	ldr	r5, [pc, #20]	; (8009b74 <_write_r+0x20>)
 8009b60:	602a      	str	r2, [r5, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	f7f8 f862 	bl	8001c2c <_write>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d102      	bne.n	8009b72 <_write_r+0x1e>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b103      	cbz	r3, 8009b72 <_write_r+0x1e>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	200020c0 	.word	0x200020c0

08009b78 <__errno>:
 8009b78:	4b01      	ldr	r3, [pc, #4]	; (8009b80 <__errno+0x8>)
 8009b7a:	6818      	ldr	r0, [r3, #0]
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	2000007c 	.word	0x2000007c

08009b84 <__libc_init_array>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	2600      	movs	r6, #0
 8009b88:	4d0c      	ldr	r5, [pc, #48]	; (8009bbc <__libc_init_array+0x38>)
 8009b8a:	4c0d      	ldr	r4, [pc, #52]	; (8009bc0 <__libc_init_array+0x3c>)
 8009b8c:	1b64      	subs	r4, r4, r5
 8009b8e:	10a4      	asrs	r4, r4, #2
 8009b90:	42a6      	cmp	r6, r4
 8009b92:	d109      	bne.n	8009ba8 <__libc_init_array+0x24>
 8009b94:	f003 ffb2 	bl	800dafc <_init>
 8009b98:	2600      	movs	r6, #0
 8009b9a:	4d0a      	ldr	r5, [pc, #40]	; (8009bc4 <__libc_init_array+0x40>)
 8009b9c:	4c0a      	ldr	r4, [pc, #40]	; (8009bc8 <__libc_init_array+0x44>)
 8009b9e:	1b64      	subs	r4, r4, r5
 8009ba0:	10a4      	asrs	r4, r4, #2
 8009ba2:	42a6      	cmp	r6, r4
 8009ba4:	d105      	bne.n	8009bb2 <__libc_init_array+0x2e>
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bac:	4798      	blx	r3
 8009bae:	3601      	adds	r6, #1
 8009bb0:	e7ee      	b.n	8009b90 <__libc_init_array+0xc>
 8009bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb6:	4798      	blx	r3
 8009bb8:	3601      	adds	r6, #1
 8009bba:	e7f2      	b.n	8009ba2 <__libc_init_array+0x1e>
 8009bbc:	0800e2f4 	.word	0x0800e2f4
 8009bc0:	0800e2f4 	.word	0x0800e2f4
 8009bc4:	0800e2f4 	.word	0x0800e2f4
 8009bc8:	0800e2f8 	.word	0x0800e2f8

08009bcc <__retarget_lock_init_recursive>:
 8009bcc:	4770      	bx	lr

08009bce <__retarget_lock_acquire_recursive>:
 8009bce:	4770      	bx	lr

08009bd0 <__retarget_lock_release_recursive>:
 8009bd0:	4770      	bx	lr

08009bd2 <memchr>:
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	b2c9      	uxtb	r1, r1
 8009bd8:	4402      	add	r2, r0
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	d101      	bne.n	8009be4 <memchr+0x12>
 8009be0:	2000      	movs	r0, #0
 8009be2:	e003      	b.n	8009bec <memchr+0x1a>
 8009be4:	7804      	ldrb	r4, [r0, #0]
 8009be6:	3301      	adds	r3, #1
 8009be8:	428c      	cmp	r4, r1
 8009bea:	d1f6      	bne.n	8009bda <memchr+0x8>
 8009bec:	bd10      	pop	{r4, pc}

08009bee <memcpy>:
 8009bee:	440a      	add	r2, r1
 8009bf0:	4291      	cmp	r1, r2
 8009bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bf6:	d100      	bne.n	8009bfa <memcpy+0xc>
 8009bf8:	4770      	bx	lr
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c00:	4291      	cmp	r1, r2
 8009c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c06:	d1f9      	bne.n	8009bfc <memcpy+0xe>
 8009c08:	bd10      	pop	{r4, pc}
	...

08009c0c <nanf>:
 8009c0c:	4800      	ldr	r0, [pc, #0]	; (8009c10 <nanf+0x4>)
 8009c0e:	4770      	bx	lr
 8009c10:	7fc00000 	.word	0x7fc00000

08009c14 <quorem>:
 8009c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	6903      	ldr	r3, [r0, #16]
 8009c1a:	690c      	ldr	r4, [r1, #16]
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	42a3      	cmp	r3, r4
 8009c20:	db7f      	blt.n	8009d22 <quorem+0x10e>
 8009c22:	3c01      	subs	r4, #1
 8009c24:	f100 0514 	add.w	r5, r0, #20
 8009c28:	f101 0814 	add.w	r8, r1, #20
 8009c2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c4a:	d331      	bcc.n	8009cb0 <quorem+0x9c>
 8009c4c:	f04f 0e00 	mov.w	lr, #0
 8009c50:	4640      	mov	r0, r8
 8009c52:	46ac      	mov	ip, r5
 8009c54:	46f2      	mov	sl, lr
 8009c56:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c5a:	b293      	uxth	r3, r2
 8009c5c:	fb06 e303 	mla	r3, r6, r3, lr
 8009c60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c64:	0c1a      	lsrs	r2, r3, #16
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	fb06 220e 	mla	r2, r6, lr, r2
 8009c6c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c70:	f8dc a000 	ldr.w	sl, [ip]
 8009c74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c78:	fa1f fa8a 	uxth.w	sl, sl
 8009c7c:	4453      	add	r3, sl
 8009c7e:	f8dc a000 	ldr.w	sl, [ip]
 8009c82:	b292      	uxth	r2, r2
 8009c84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c92:	4581      	cmp	r9, r0
 8009c94:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c98:	f84c 3b04 	str.w	r3, [ip], #4
 8009c9c:	d2db      	bcs.n	8009c56 <quorem+0x42>
 8009c9e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ca2:	b92b      	cbnz	r3, 8009cb0 <quorem+0x9c>
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	3b04      	subs	r3, #4
 8009ca8:	429d      	cmp	r5, r3
 8009caa:	461a      	mov	r2, r3
 8009cac:	d32d      	bcc.n	8009d0a <quorem+0xf6>
 8009cae:	613c      	str	r4, [r7, #16]
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	f001 f9dd 	bl	800b070 <__mcmp>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	db23      	blt.n	8009d02 <quorem+0xee>
 8009cba:	4629      	mov	r1, r5
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	3601      	adds	r6, #1
 8009cc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cc4:	f8d1 c000 	ldr.w	ip, [r1]
 8009cc8:	b293      	uxth	r3, r2
 8009cca:	1ac3      	subs	r3, r0, r3
 8009ccc:	0c12      	lsrs	r2, r2, #16
 8009cce:	fa1f f08c 	uxth.w	r0, ip
 8009cd2:	4403      	add	r3, r0
 8009cd4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009cd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ce2:	45c1      	cmp	r9, r8
 8009ce4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ce8:	f841 3b04 	str.w	r3, [r1], #4
 8009cec:	d2e8      	bcs.n	8009cc0 <quorem+0xac>
 8009cee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cf6:	b922      	cbnz	r2, 8009d02 <quorem+0xee>
 8009cf8:	3b04      	subs	r3, #4
 8009cfa:	429d      	cmp	r5, r3
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	d30a      	bcc.n	8009d16 <quorem+0x102>
 8009d00:	613c      	str	r4, [r7, #16]
 8009d02:	4630      	mov	r0, r6
 8009d04:	b003      	add	sp, #12
 8009d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0a:	6812      	ldr	r2, [r2, #0]
 8009d0c:	3b04      	subs	r3, #4
 8009d0e:	2a00      	cmp	r2, #0
 8009d10:	d1cd      	bne.n	8009cae <quorem+0x9a>
 8009d12:	3c01      	subs	r4, #1
 8009d14:	e7c8      	b.n	8009ca8 <quorem+0x94>
 8009d16:	6812      	ldr	r2, [r2, #0]
 8009d18:	3b04      	subs	r3, #4
 8009d1a:	2a00      	cmp	r2, #0
 8009d1c:	d1f0      	bne.n	8009d00 <quorem+0xec>
 8009d1e:	3c01      	subs	r4, #1
 8009d20:	e7eb      	b.n	8009cfa <quorem+0xe6>
 8009d22:	2000      	movs	r0, #0
 8009d24:	e7ee      	b.n	8009d04 <quorem+0xf0>
	...

08009d28 <_dtoa_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	4616      	mov	r6, r2
 8009d2e:	461f      	mov	r7, r3
 8009d30:	69c4      	ldr	r4, [r0, #28]
 8009d32:	b099      	sub	sp, #100	; 0x64
 8009d34:	4605      	mov	r5, r0
 8009d36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009d3e:	b974      	cbnz	r4, 8009d5e <_dtoa_r+0x36>
 8009d40:	2010      	movs	r0, #16
 8009d42:	f000 fe1d 	bl	800a980 <malloc>
 8009d46:	4602      	mov	r2, r0
 8009d48:	61e8      	str	r0, [r5, #28]
 8009d4a:	b920      	cbnz	r0, 8009d56 <_dtoa_r+0x2e>
 8009d4c:	21ef      	movs	r1, #239	; 0xef
 8009d4e:	4bac      	ldr	r3, [pc, #688]	; (800a000 <_dtoa_r+0x2d8>)
 8009d50:	48ac      	ldr	r0, [pc, #688]	; (800a004 <_dtoa_r+0x2dc>)
 8009d52:	f002 ffc5 	bl	800cce0 <__assert_func>
 8009d56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d5a:	6004      	str	r4, [r0, #0]
 8009d5c:	60c4      	str	r4, [r0, #12]
 8009d5e:	69eb      	ldr	r3, [r5, #28]
 8009d60:	6819      	ldr	r1, [r3, #0]
 8009d62:	b151      	cbz	r1, 8009d7a <_dtoa_r+0x52>
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	2301      	movs	r3, #1
 8009d68:	4093      	lsls	r3, r2
 8009d6a:	604a      	str	r2, [r1, #4]
 8009d6c:	608b      	str	r3, [r1, #8]
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f000 fefa 	bl	800ab68 <_Bfree>
 8009d74:	2200      	movs	r2, #0
 8009d76:	69eb      	ldr	r3, [r5, #28]
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	1e3b      	subs	r3, r7, #0
 8009d7c:	bfaf      	iteee	ge
 8009d7e:	2300      	movge	r3, #0
 8009d80:	2201      	movlt	r2, #1
 8009d82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d86:	9305      	strlt	r3, [sp, #20]
 8009d88:	bfa8      	it	ge
 8009d8a:	f8c8 3000 	strge.w	r3, [r8]
 8009d8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009d92:	4b9d      	ldr	r3, [pc, #628]	; (800a008 <_dtoa_r+0x2e0>)
 8009d94:	bfb8      	it	lt
 8009d96:	f8c8 2000 	strlt.w	r2, [r8]
 8009d9a:	ea33 0309 	bics.w	r3, r3, r9
 8009d9e:	d119      	bne.n	8009dd4 <_dtoa_r+0xac>
 8009da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8009da4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dac:	4333      	orrs	r3, r6
 8009dae:	f000 8589 	beq.w	800a8c4 <_dtoa_r+0xb9c>
 8009db2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009db4:	b953      	cbnz	r3, 8009dcc <_dtoa_r+0xa4>
 8009db6:	4b95      	ldr	r3, [pc, #596]	; (800a00c <_dtoa_r+0x2e4>)
 8009db8:	e023      	b.n	8009e02 <_dtoa_r+0xda>
 8009dba:	4b95      	ldr	r3, [pc, #596]	; (800a010 <_dtoa_r+0x2e8>)
 8009dbc:	9303      	str	r3, [sp, #12]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	9803      	ldr	r0, [sp, #12]
 8009dc6:	b019      	add	sp, #100	; 0x64
 8009dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dcc:	4b8f      	ldr	r3, [pc, #572]	; (800a00c <_dtoa_r+0x2e4>)
 8009dce:	9303      	str	r3, [sp, #12]
 8009dd0:	3303      	adds	r3, #3
 8009dd2:	e7f5      	b.n	8009dc0 <_dtoa_r+0x98>
 8009dd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009dd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009de0:	2200      	movs	r2, #0
 8009de2:	2300      	movs	r3, #0
 8009de4:	f7f6 fde0 	bl	80009a8 <__aeabi_dcmpeq>
 8009de8:	4680      	mov	r8, r0
 8009dea:	b160      	cbz	r0, 8009e06 <_dtoa_r+0xde>
 8009dec:	2301      	movs	r3, #1
 8009dee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 8562 	beq.w	800a8be <_dtoa_r+0xb96>
 8009dfa:	4b86      	ldr	r3, [pc, #536]	; (800a014 <_dtoa_r+0x2ec>)
 8009dfc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009dfe:	6013      	str	r3, [r2, #0]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	e7de      	b.n	8009dc4 <_dtoa_r+0x9c>
 8009e06:	ab16      	add	r3, sp, #88	; 0x58
 8009e08:	9301      	str	r3, [sp, #4]
 8009e0a:	ab17      	add	r3, sp, #92	; 0x5c
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	4628      	mov	r0, r5
 8009e10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e14:	f001 fa3c 	bl	800b290 <__d2b>
 8009e18:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009e1c:	4682      	mov	sl, r0
 8009e1e:	2c00      	cmp	r4, #0
 8009e20:	d07e      	beq.n	8009f20 <_dtoa_r+0x1f8>
 8009e22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e30:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009e34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e38:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4b75      	ldr	r3, [pc, #468]	; (800a018 <_dtoa_r+0x2f0>)
 8009e42:	f7f6 f991 	bl	8000168 <__aeabi_dsub>
 8009e46:	a368      	add	r3, pc, #416	; (adr r3, 8009fe8 <_dtoa_r+0x2c0>)
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	f7f6 fb44 	bl	80004d8 <__aeabi_dmul>
 8009e50:	a367      	add	r3, pc, #412	; (adr r3, 8009ff0 <_dtoa_r+0x2c8>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 f989 	bl	800016c <__adddf3>
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	460f      	mov	r7, r1
 8009e60:	f7f6 fad0 	bl	8000404 <__aeabi_i2d>
 8009e64:	a364      	add	r3, pc, #400	; (adr r3, 8009ff8 <_dtoa_r+0x2d0>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f7f6 fb35 	bl	80004d8 <__aeabi_dmul>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4630      	mov	r0, r6
 8009e74:	4639      	mov	r1, r7
 8009e76:	f7f6 f979 	bl	800016c <__adddf3>
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	460f      	mov	r7, r1
 8009e7e:	f7f6 fddb 	bl	8000a38 <__aeabi_d2iz>
 8009e82:	2200      	movs	r2, #0
 8009e84:	4683      	mov	fp, r0
 8009e86:	2300      	movs	r3, #0
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 fd96 	bl	80009bc <__aeabi_dcmplt>
 8009e90:	b148      	cbz	r0, 8009ea6 <_dtoa_r+0x17e>
 8009e92:	4658      	mov	r0, fp
 8009e94:	f7f6 fab6 	bl	8000404 <__aeabi_i2d>
 8009e98:	4632      	mov	r2, r6
 8009e9a:	463b      	mov	r3, r7
 8009e9c:	f7f6 fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8009ea0:	b908      	cbnz	r0, 8009ea6 <_dtoa_r+0x17e>
 8009ea2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ea6:	f1bb 0f16 	cmp.w	fp, #22
 8009eaa:	d857      	bhi.n	8009f5c <_dtoa_r+0x234>
 8009eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009eb0:	4b5a      	ldr	r3, [pc, #360]	; (800a01c <_dtoa_r+0x2f4>)
 8009eb2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f7f6 fd7f 	bl	80009bc <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d04e      	beq.n	8009f60 <_dtoa_r+0x238>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ec8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ecc:	1b1b      	subs	r3, r3, r4
 8009ece:	1e5a      	subs	r2, r3, #1
 8009ed0:	bf46      	itte	mi
 8009ed2:	f1c3 0901 	rsbmi	r9, r3, #1
 8009ed6:	2300      	movmi	r3, #0
 8009ed8:	f04f 0900 	movpl.w	r9, #0
 8009edc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ede:	bf48      	it	mi
 8009ee0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009ee2:	f1bb 0f00 	cmp.w	fp, #0
 8009ee6:	db3d      	blt.n	8009f64 <_dtoa_r+0x23c>
 8009ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009eee:	445b      	add	r3, fp
 8009ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ef8:	2b09      	cmp	r3, #9
 8009efa:	d867      	bhi.n	8009fcc <_dtoa_r+0x2a4>
 8009efc:	2b05      	cmp	r3, #5
 8009efe:	bfc4      	itt	gt
 8009f00:	3b04      	subgt	r3, #4
 8009f02:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f06:	bfc8      	it	gt
 8009f08:	2400      	movgt	r4, #0
 8009f0a:	f1a3 0302 	sub.w	r3, r3, #2
 8009f0e:	bfd8      	it	le
 8009f10:	2401      	movle	r4, #1
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	f200 8086 	bhi.w	800a024 <_dtoa_r+0x2fc>
 8009f18:	e8df f003 	tbb	[pc, r3]
 8009f1c:	5637392c 	.word	0x5637392c
 8009f20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009f24:	441c      	add	r4, r3
 8009f26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009f2a:	2b20      	cmp	r3, #32
 8009f2c:	bfc1      	itttt	gt
 8009f2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f32:	fa09 f903 	lslgt.w	r9, r9, r3
 8009f36:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009f3a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009f3e:	bfd6      	itet	le
 8009f40:	f1c3 0320 	rsble	r3, r3, #32
 8009f44:	ea49 0003 	orrgt.w	r0, r9, r3
 8009f48:	fa06 f003 	lslle.w	r0, r6, r3
 8009f4c:	f7f6 fa4a 	bl	80003e4 <__aeabi_ui2d>
 8009f50:	2201      	movs	r2, #1
 8009f52:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009f56:	3c01      	subs	r4, #1
 8009f58:	9213      	str	r2, [sp, #76]	; 0x4c
 8009f5a:	e76f      	b.n	8009e3c <_dtoa_r+0x114>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e7b3      	b.n	8009ec8 <_dtoa_r+0x1a0>
 8009f60:	900f      	str	r0, [sp, #60]	; 0x3c
 8009f62:	e7b2      	b.n	8009eca <_dtoa_r+0x1a2>
 8009f64:	f1cb 0300 	rsb	r3, fp, #0
 8009f68:	930a      	str	r3, [sp, #40]	; 0x28
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	eba9 090b 	sub.w	r9, r9, fp
 8009f70:	930e      	str	r3, [sp, #56]	; 0x38
 8009f72:	e7c0      	b.n	8009ef6 <_dtoa_r+0x1ce>
 8009f74:	2300      	movs	r3, #0
 8009f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dc55      	bgt.n	800a02a <_dtoa_r+0x302>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	461a      	mov	r2, r3
 8009f82:	9306      	str	r3, [sp, #24]
 8009f84:	9308      	str	r3, [sp, #32]
 8009f86:	9223      	str	r2, [sp, #140]	; 0x8c
 8009f88:	e00b      	b.n	8009fa2 <_dtoa_r+0x27a>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e7f3      	b.n	8009f76 <_dtoa_r+0x24e>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f94:	445b      	add	r3, fp
 8009f96:	9306      	str	r3, [sp, #24]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	9308      	str	r3, [sp, #32]
 8009f9e:	bfb8      	it	lt
 8009fa0:	2301      	movlt	r3, #1
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	2204      	movs	r2, #4
 8009fa6:	69e8      	ldr	r0, [r5, #28]
 8009fa8:	f102 0614 	add.w	r6, r2, #20
 8009fac:	429e      	cmp	r6, r3
 8009fae:	d940      	bls.n	800a032 <_dtoa_r+0x30a>
 8009fb0:	6041      	str	r1, [r0, #4]
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 fd98 	bl	800aae8 <_Balloc>
 8009fb8:	9003      	str	r0, [sp, #12]
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d13c      	bne.n	800a038 <_dtoa_r+0x310>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	f240 11af 	movw	r1, #431	; 0x1af
 8009fc4:	4b16      	ldr	r3, [pc, #88]	; (800a020 <_dtoa_r+0x2f8>)
 8009fc6:	e6c3      	b.n	8009d50 <_dtoa_r+0x28>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e7e1      	b.n	8009f90 <_dtoa_r+0x268>
 8009fcc:	2401      	movs	r4, #1
 8009fce:	2300      	movs	r3, #0
 8009fd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8009fd2:	9322      	str	r3, [sp, #136]	; 0x88
 8009fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd8:	2200      	movs	r2, #0
 8009fda:	9306      	str	r3, [sp, #24]
 8009fdc:	9308      	str	r3, [sp, #32]
 8009fde:	2312      	movs	r3, #18
 8009fe0:	e7d1      	b.n	8009f86 <_dtoa_r+0x25e>
 8009fe2:	bf00      	nop
 8009fe4:	f3af 8000 	nop.w
 8009fe8:	636f4361 	.word	0x636f4361
 8009fec:	3fd287a7 	.word	0x3fd287a7
 8009ff0:	8b60c8b3 	.word	0x8b60c8b3
 8009ff4:	3fc68a28 	.word	0x3fc68a28
 8009ff8:	509f79fb 	.word	0x509f79fb
 8009ffc:	3fd34413 	.word	0x3fd34413
 800a000:	0800def2 	.word	0x0800def2
 800a004:	0800df09 	.word	0x0800df09
 800a008:	7ff00000 	.word	0x7ff00000
 800a00c:	0800deee 	.word	0x0800deee
 800a010:	0800dee5 	.word	0x0800dee5
 800a014:	0800e249 	.word	0x0800e249
 800a018:	3ff80000 	.word	0x3ff80000
 800a01c:	0800dff8 	.word	0x0800dff8
 800a020:	0800df61 	.word	0x0800df61
 800a024:	2301      	movs	r3, #1
 800a026:	930b      	str	r3, [sp, #44]	; 0x2c
 800a028:	e7d4      	b.n	8009fd4 <_dtoa_r+0x2ac>
 800a02a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a02c:	9306      	str	r3, [sp, #24]
 800a02e:	9308      	str	r3, [sp, #32]
 800a030:	e7b7      	b.n	8009fa2 <_dtoa_r+0x27a>
 800a032:	3101      	adds	r1, #1
 800a034:	0052      	lsls	r2, r2, #1
 800a036:	e7b7      	b.n	8009fa8 <_dtoa_r+0x280>
 800a038:	69eb      	ldr	r3, [r5, #28]
 800a03a:	9a03      	ldr	r2, [sp, #12]
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	9b08      	ldr	r3, [sp, #32]
 800a040:	2b0e      	cmp	r3, #14
 800a042:	f200 80a8 	bhi.w	800a196 <_dtoa_r+0x46e>
 800a046:	2c00      	cmp	r4, #0
 800a048:	f000 80a5 	beq.w	800a196 <_dtoa_r+0x46e>
 800a04c:	f1bb 0f00 	cmp.w	fp, #0
 800a050:	dd34      	ble.n	800a0bc <_dtoa_r+0x394>
 800a052:	4b9a      	ldr	r3, [pc, #616]	; (800a2bc <_dtoa_r+0x594>)
 800a054:	f00b 020f 	and.w	r2, fp, #15
 800a058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a05c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a060:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a064:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a068:	ea4f 142b 	mov.w	r4, fp, asr #4
 800a06c:	d016      	beq.n	800a09c <_dtoa_r+0x374>
 800a06e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a072:	4b93      	ldr	r3, [pc, #588]	; (800a2c0 <_dtoa_r+0x598>)
 800a074:	2703      	movs	r7, #3
 800a076:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a07a:	f7f6 fb57 	bl	800072c <__aeabi_ddiv>
 800a07e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a082:	f004 040f 	and.w	r4, r4, #15
 800a086:	4e8e      	ldr	r6, [pc, #568]	; (800a2c0 <_dtoa_r+0x598>)
 800a088:	b954      	cbnz	r4, 800a0a0 <_dtoa_r+0x378>
 800a08a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a08e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a092:	f7f6 fb4b 	bl	800072c <__aeabi_ddiv>
 800a096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a09a:	e029      	b.n	800a0f0 <_dtoa_r+0x3c8>
 800a09c:	2702      	movs	r7, #2
 800a09e:	e7f2      	b.n	800a086 <_dtoa_r+0x35e>
 800a0a0:	07e1      	lsls	r1, r4, #31
 800a0a2:	d508      	bpl.n	800a0b6 <_dtoa_r+0x38e>
 800a0a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0ac:	f7f6 fa14 	bl	80004d8 <__aeabi_dmul>
 800a0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0b4:	3701      	adds	r7, #1
 800a0b6:	1064      	asrs	r4, r4, #1
 800a0b8:	3608      	adds	r6, #8
 800a0ba:	e7e5      	b.n	800a088 <_dtoa_r+0x360>
 800a0bc:	f000 80a5 	beq.w	800a20a <_dtoa_r+0x4e2>
 800a0c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0c4:	f1cb 0400 	rsb	r4, fp, #0
 800a0c8:	4b7c      	ldr	r3, [pc, #496]	; (800a2bc <_dtoa_r+0x594>)
 800a0ca:	f004 020f 	and.w	r2, r4, #15
 800a0ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f7f6 f9ff 	bl	80004d8 <__aeabi_dmul>
 800a0da:	2702      	movs	r7, #2
 800a0dc:	2300      	movs	r3, #0
 800a0de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0e2:	4e77      	ldr	r6, [pc, #476]	; (800a2c0 <_dtoa_r+0x598>)
 800a0e4:	1124      	asrs	r4, r4, #4
 800a0e6:	2c00      	cmp	r4, #0
 800a0e8:	f040 8084 	bne.w	800a1f4 <_dtoa_r+0x4cc>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1d2      	bne.n	800a096 <_dtoa_r+0x36e>
 800a0f0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a0f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a0f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 8087 	beq.w	800a20e <_dtoa_r+0x4e6>
 800a100:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a104:	2200      	movs	r2, #0
 800a106:	4b6f      	ldr	r3, [pc, #444]	; (800a2c4 <_dtoa_r+0x59c>)
 800a108:	f7f6 fc58 	bl	80009bc <__aeabi_dcmplt>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d07e      	beq.n	800a20e <_dtoa_r+0x4e6>
 800a110:	9b08      	ldr	r3, [sp, #32]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d07b      	beq.n	800a20e <_dtoa_r+0x4e6>
 800a116:	9b06      	ldr	r3, [sp, #24]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	dd38      	ble.n	800a18e <_dtoa_r+0x466>
 800a11c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a120:	2200      	movs	r2, #0
 800a122:	4b69      	ldr	r3, [pc, #420]	; (800a2c8 <_dtoa_r+0x5a0>)
 800a124:	f7f6 f9d8 	bl	80004d8 <__aeabi_dmul>
 800a128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a12c:	9c06      	ldr	r4, [sp, #24]
 800a12e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800a132:	3701      	adds	r7, #1
 800a134:	4638      	mov	r0, r7
 800a136:	f7f6 f965 	bl	8000404 <__aeabi_i2d>
 800a13a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a13e:	f7f6 f9cb 	bl	80004d8 <__aeabi_dmul>
 800a142:	2200      	movs	r2, #0
 800a144:	4b61      	ldr	r3, [pc, #388]	; (800a2cc <_dtoa_r+0x5a4>)
 800a146:	f7f6 f811 	bl	800016c <__adddf3>
 800a14a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a14e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a152:	9611      	str	r6, [sp, #68]	; 0x44
 800a154:	2c00      	cmp	r4, #0
 800a156:	d15d      	bne.n	800a214 <_dtoa_r+0x4ec>
 800a158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a15c:	2200      	movs	r2, #0
 800a15e:	4b5c      	ldr	r3, [pc, #368]	; (800a2d0 <_dtoa_r+0x5a8>)
 800a160:	f7f6 f802 	bl	8000168 <__aeabi_dsub>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a16c:	4633      	mov	r3, r6
 800a16e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a170:	f7f6 fc42 	bl	80009f8 <__aeabi_dcmpgt>
 800a174:	2800      	cmp	r0, #0
 800a176:	f040 8295 	bne.w	800a6a4 <_dtoa_r+0x97c>
 800a17a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a17e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a180:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a184:	f7f6 fc1a 	bl	80009bc <__aeabi_dcmplt>
 800a188:	2800      	cmp	r0, #0
 800a18a:	f040 8289 	bne.w	800a6a0 <_dtoa_r+0x978>
 800a18e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a192:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f2c0 8151 	blt.w	800a440 <_dtoa_r+0x718>
 800a19e:	f1bb 0f0e 	cmp.w	fp, #14
 800a1a2:	f300 814d 	bgt.w	800a440 <_dtoa_r+0x718>
 800a1a6:	4b45      	ldr	r3, [pc, #276]	; (800a2bc <_dtoa_r+0x594>)
 800a1a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a1b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f280 80da 	bge.w	800a370 <_dtoa_r+0x648>
 800a1bc:	9b08      	ldr	r3, [sp, #32]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f300 80d6 	bgt.w	800a370 <_dtoa_r+0x648>
 800a1c4:	f040 826b 	bne.w	800a69e <_dtoa_r+0x976>
 800a1c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4b40      	ldr	r3, [pc, #256]	; (800a2d0 <_dtoa_r+0x5a8>)
 800a1d0:	f7f6 f982 	bl	80004d8 <__aeabi_dmul>
 800a1d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1d8:	f7f6 fc04 	bl	80009e4 <__aeabi_dcmpge>
 800a1dc:	9c08      	ldr	r4, [sp, #32]
 800a1de:	4626      	mov	r6, r4
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	f040 8241 	bne.w	800a668 <_dtoa_r+0x940>
 800a1e6:	2331      	movs	r3, #49	; 0x31
 800a1e8:	9f03      	ldr	r7, [sp, #12]
 800a1ea:	f10b 0b01 	add.w	fp, fp, #1
 800a1ee:	f807 3b01 	strb.w	r3, [r7], #1
 800a1f2:	e23d      	b.n	800a670 <_dtoa_r+0x948>
 800a1f4:	07e2      	lsls	r2, r4, #31
 800a1f6:	d505      	bpl.n	800a204 <_dtoa_r+0x4dc>
 800a1f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1fc:	f7f6 f96c 	bl	80004d8 <__aeabi_dmul>
 800a200:	2301      	movs	r3, #1
 800a202:	3701      	adds	r7, #1
 800a204:	1064      	asrs	r4, r4, #1
 800a206:	3608      	adds	r6, #8
 800a208:	e76d      	b.n	800a0e6 <_dtoa_r+0x3be>
 800a20a:	2702      	movs	r7, #2
 800a20c:	e770      	b.n	800a0f0 <_dtoa_r+0x3c8>
 800a20e:	46d8      	mov	r8, fp
 800a210:	9c08      	ldr	r4, [sp, #32]
 800a212:	e78f      	b.n	800a134 <_dtoa_r+0x40c>
 800a214:	9903      	ldr	r1, [sp, #12]
 800a216:	4b29      	ldr	r3, [pc, #164]	; (800a2bc <_dtoa_r+0x594>)
 800a218:	4421      	add	r1, r4
 800a21a:	9112      	str	r1, [sp, #72]	; 0x48
 800a21c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a21e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a222:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a226:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a22a:	2900      	cmp	r1, #0
 800a22c:	d054      	beq.n	800a2d8 <_dtoa_r+0x5b0>
 800a22e:	2000      	movs	r0, #0
 800a230:	4928      	ldr	r1, [pc, #160]	; (800a2d4 <_dtoa_r+0x5ac>)
 800a232:	f7f6 fa7b 	bl	800072c <__aeabi_ddiv>
 800a236:	463b      	mov	r3, r7
 800a238:	4632      	mov	r2, r6
 800a23a:	f7f5 ff95 	bl	8000168 <__aeabi_dsub>
 800a23e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a242:	9f03      	ldr	r7, [sp, #12]
 800a244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a248:	f7f6 fbf6 	bl	8000a38 <__aeabi_d2iz>
 800a24c:	4604      	mov	r4, r0
 800a24e:	f7f6 f8d9 	bl	8000404 <__aeabi_i2d>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a25a:	f7f5 ff85 	bl	8000168 <__aeabi_dsub>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	3430      	adds	r4, #48	; 0x30
 800a264:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a268:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a26c:	f807 4b01 	strb.w	r4, [r7], #1
 800a270:	f7f6 fba4 	bl	80009bc <__aeabi_dcmplt>
 800a274:	2800      	cmp	r0, #0
 800a276:	d173      	bne.n	800a360 <_dtoa_r+0x638>
 800a278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a27c:	2000      	movs	r0, #0
 800a27e:	4911      	ldr	r1, [pc, #68]	; (800a2c4 <_dtoa_r+0x59c>)
 800a280:	f7f5 ff72 	bl	8000168 <__aeabi_dsub>
 800a284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a288:	f7f6 fb98 	bl	80009bc <__aeabi_dcmplt>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	f040 80b6 	bne.w	800a3fe <_dtoa_r+0x6d6>
 800a292:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a294:	429f      	cmp	r7, r3
 800a296:	f43f af7a 	beq.w	800a18e <_dtoa_r+0x466>
 800a29a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a29e:	2200      	movs	r2, #0
 800a2a0:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <_dtoa_r+0x5a0>)
 800a2a2:	f7f6 f919 	bl	80004d8 <__aeabi_dmul>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2b0:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <_dtoa_r+0x5a0>)
 800a2b2:	f7f6 f911 	bl	80004d8 <__aeabi_dmul>
 800a2b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2ba:	e7c3      	b.n	800a244 <_dtoa_r+0x51c>
 800a2bc:	0800dff8 	.word	0x0800dff8
 800a2c0:	0800dfd0 	.word	0x0800dfd0
 800a2c4:	3ff00000 	.word	0x3ff00000
 800a2c8:	40240000 	.word	0x40240000
 800a2cc:	401c0000 	.word	0x401c0000
 800a2d0:	40140000 	.word	0x40140000
 800a2d4:	3fe00000 	.word	0x3fe00000
 800a2d8:	4630      	mov	r0, r6
 800a2da:	4639      	mov	r1, r7
 800a2dc:	f7f6 f8fc 	bl	80004d8 <__aeabi_dmul>
 800a2e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2e6:	9c03      	ldr	r4, [sp, #12]
 800a2e8:	9314      	str	r3, [sp, #80]	; 0x50
 800a2ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2ee:	f7f6 fba3 	bl	8000a38 <__aeabi_d2iz>
 800a2f2:	9015      	str	r0, [sp, #84]	; 0x54
 800a2f4:	f7f6 f886 	bl	8000404 <__aeabi_i2d>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a300:	f7f5 ff32 	bl	8000168 <__aeabi_dsub>
 800a304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a306:	4606      	mov	r6, r0
 800a308:	3330      	adds	r3, #48	; 0x30
 800a30a:	f804 3b01 	strb.w	r3, [r4], #1
 800a30e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a310:	460f      	mov	r7, r1
 800a312:	429c      	cmp	r4, r3
 800a314:	f04f 0200 	mov.w	r2, #0
 800a318:	d124      	bne.n	800a364 <_dtoa_r+0x63c>
 800a31a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a31e:	4baf      	ldr	r3, [pc, #700]	; (800a5dc <_dtoa_r+0x8b4>)
 800a320:	f7f5 ff24 	bl	800016c <__adddf3>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f6 fb64 	bl	80009f8 <__aeabi_dcmpgt>
 800a330:	2800      	cmp	r0, #0
 800a332:	d163      	bne.n	800a3fc <_dtoa_r+0x6d4>
 800a334:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a338:	2000      	movs	r0, #0
 800a33a:	49a8      	ldr	r1, [pc, #672]	; (800a5dc <_dtoa_r+0x8b4>)
 800a33c:	f7f5 ff14 	bl	8000168 <__aeabi_dsub>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4630      	mov	r0, r6
 800a346:	4639      	mov	r1, r7
 800a348:	f7f6 fb38 	bl	80009bc <__aeabi_dcmplt>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	f43f af1e 	beq.w	800a18e <_dtoa_r+0x466>
 800a352:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a354:	1e7b      	subs	r3, r7, #1
 800a356:	9314      	str	r3, [sp, #80]	; 0x50
 800a358:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a35c:	2b30      	cmp	r3, #48	; 0x30
 800a35e:	d0f8      	beq.n	800a352 <_dtoa_r+0x62a>
 800a360:	46c3      	mov	fp, r8
 800a362:	e03b      	b.n	800a3dc <_dtoa_r+0x6b4>
 800a364:	4b9e      	ldr	r3, [pc, #632]	; (800a5e0 <_dtoa_r+0x8b8>)
 800a366:	f7f6 f8b7 	bl	80004d8 <__aeabi_dmul>
 800a36a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a36e:	e7bc      	b.n	800a2ea <_dtoa_r+0x5c2>
 800a370:	9f03      	ldr	r7, [sp, #12]
 800a372:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a376:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a37a:	4640      	mov	r0, r8
 800a37c:	4649      	mov	r1, r9
 800a37e:	f7f6 f9d5 	bl	800072c <__aeabi_ddiv>
 800a382:	f7f6 fb59 	bl	8000a38 <__aeabi_d2iz>
 800a386:	4604      	mov	r4, r0
 800a388:	f7f6 f83c 	bl	8000404 <__aeabi_i2d>
 800a38c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a390:	f7f6 f8a2 	bl	80004d8 <__aeabi_dmul>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4640      	mov	r0, r8
 800a39a:	4649      	mov	r1, r9
 800a39c:	f7f5 fee4 	bl	8000168 <__aeabi_dsub>
 800a3a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a3a4:	f807 6b01 	strb.w	r6, [r7], #1
 800a3a8:	9e03      	ldr	r6, [sp, #12]
 800a3aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a3ae:	1bbe      	subs	r6, r7, r6
 800a3b0:	45b4      	cmp	ip, r6
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	d136      	bne.n	800a426 <_dtoa_r+0x6fe>
 800a3b8:	f7f5 fed8 	bl	800016c <__adddf3>
 800a3bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3c0:	4680      	mov	r8, r0
 800a3c2:	4689      	mov	r9, r1
 800a3c4:	f7f6 fb18 	bl	80009f8 <__aeabi_dcmpgt>
 800a3c8:	bb58      	cbnz	r0, 800a422 <_dtoa_r+0x6fa>
 800a3ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	f7f6 fae9 	bl	80009a8 <__aeabi_dcmpeq>
 800a3d6:	b108      	cbz	r0, 800a3dc <_dtoa_r+0x6b4>
 800a3d8:	07e3      	lsls	r3, r4, #31
 800a3da:	d422      	bmi.n	800a422 <_dtoa_r+0x6fa>
 800a3dc:	4651      	mov	r1, sl
 800a3de:	4628      	mov	r0, r5
 800a3e0:	f000 fbc2 	bl	800ab68 <_Bfree>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a3e8:	703b      	strb	r3, [r7, #0]
 800a3ea:	f10b 0301 	add.w	r3, fp, #1
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f43f ace6 	beq.w	8009dc4 <_dtoa_r+0x9c>
 800a3f8:	601f      	str	r7, [r3, #0]
 800a3fa:	e4e3      	b.n	8009dc4 <_dtoa_r+0x9c>
 800a3fc:	4627      	mov	r7, r4
 800a3fe:	463b      	mov	r3, r7
 800a400:	461f      	mov	r7, r3
 800a402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a406:	2a39      	cmp	r2, #57	; 0x39
 800a408:	d107      	bne.n	800a41a <_dtoa_r+0x6f2>
 800a40a:	9a03      	ldr	r2, [sp, #12]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d1f7      	bne.n	800a400 <_dtoa_r+0x6d8>
 800a410:	2230      	movs	r2, #48	; 0x30
 800a412:	9903      	ldr	r1, [sp, #12]
 800a414:	f108 0801 	add.w	r8, r8, #1
 800a418:	700a      	strb	r2, [r1, #0]
 800a41a:	781a      	ldrb	r2, [r3, #0]
 800a41c:	3201      	adds	r2, #1
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	e79e      	b.n	800a360 <_dtoa_r+0x638>
 800a422:	46d8      	mov	r8, fp
 800a424:	e7eb      	b.n	800a3fe <_dtoa_r+0x6d6>
 800a426:	2200      	movs	r2, #0
 800a428:	4b6d      	ldr	r3, [pc, #436]	; (800a5e0 <_dtoa_r+0x8b8>)
 800a42a:	f7f6 f855 	bl	80004d8 <__aeabi_dmul>
 800a42e:	2200      	movs	r2, #0
 800a430:	2300      	movs	r3, #0
 800a432:	4680      	mov	r8, r0
 800a434:	4689      	mov	r9, r1
 800a436:	f7f6 fab7 	bl	80009a8 <__aeabi_dcmpeq>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d09b      	beq.n	800a376 <_dtoa_r+0x64e>
 800a43e:	e7cd      	b.n	800a3dc <_dtoa_r+0x6b4>
 800a440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a442:	2a00      	cmp	r2, #0
 800a444:	f000 80c4 	beq.w	800a5d0 <_dtoa_r+0x8a8>
 800a448:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a44a:	2a01      	cmp	r2, #1
 800a44c:	f300 80a8 	bgt.w	800a5a0 <_dtoa_r+0x878>
 800a450:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a452:	2a00      	cmp	r2, #0
 800a454:	f000 80a0 	beq.w	800a598 <_dtoa_r+0x870>
 800a458:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a45c:	464f      	mov	r7, r9
 800a45e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a462:	2101      	movs	r1, #1
 800a464:	441a      	add	r2, r3
 800a466:	4628      	mov	r0, r5
 800a468:	4499      	add	r9, r3
 800a46a:	9209      	str	r2, [sp, #36]	; 0x24
 800a46c:	f000 fc7c 	bl	800ad68 <__i2b>
 800a470:	4606      	mov	r6, r0
 800a472:	b15f      	cbz	r7, 800a48c <_dtoa_r+0x764>
 800a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	dd08      	ble.n	800a48c <_dtoa_r+0x764>
 800a47a:	42bb      	cmp	r3, r7
 800a47c:	bfa8      	it	ge
 800a47e:	463b      	movge	r3, r7
 800a480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a482:	eba9 0903 	sub.w	r9, r9, r3
 800a486:	1aff      	subs	r7, r7, r3
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	9309      	str	r3, [sp, #36]	; 0x24
 800a48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a48e:	b1f3      	cbz	r3, 800a4ce <_dtoa_r+0x7a6>
 800a490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a492:	2b00      	cmp	r3, #0
 800a494:	f000 80a0 	beq.w	800a5d8 <_dtoa_r+0x8b0>
 800a498:	2c00      	cmp	r4, #0
 800a49a:	dd10      	ble.n	800a4be <_dtoa_r+0x796>
 800a49c:	4631      	mov	r1, r6
 800a49e:	4622      	mov	r2, r4
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	f000 fd1f 	bl	800aee4 <__pow5mult>
 800a4a6:	4652      	mov	r2, sl
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f000 fc71 	bl	800ad94 <__multiply>
 800a4b2:	4680      	mov	r8, r0
 800a4b4:	4651      	mov	r1, sl
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	f000 fb56 	bl	800ab68 <_Bfree>
 800a4bc:	46c2      	mov	sl, r8
 800a4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4c0:	1b1a      	subs	r2, r3, r4
 800a4c2:	d004      	beq.n	800a4ce <_dtoa_r+0x7a6>
 800a4c4:	4651      	mov	r1, sl
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f000 fd0c 	bl	800aee4 <__pow5mult>
 800a4cc:	4682      	mov	sl, r0
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f000 fc49 	bl	800ad68 <__i2b>
 800a4d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4d8:	4604      	mov	r4, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f340 8082 	ble.w	800a5e4 <_dtoa_r+0x8bc>
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f000 fcfd 	bl	800aee4 <__pow5mult>
 800a4ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	dd7b      	ble.n	800a5ea <_dtoa_r+0x8c2>
 800a4f2:	f04f 0800 	mov.w	r8, #0
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4fc:	6918      	ldr	r0, [r3, #16]
 800a4fe:	f000 fbe5 	bl	800accc <__hi0bits>
 800a502:	f1c0 0020 	rsb	r0, r0, #32
 800a506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a508:	4418      	add	r0, r3
 800a50a:	f010 001f 	ands.w	r0, r0, #31
 800a50e:	f000 8092 	beq.w	800a636 <_dtoa_r+0x90e>
 800a512:	f1c0 0320 	rsb	r3, r0, #32
 800a516:	2b04      	cmp	r3, #4
 800a518:	f340 8085 	ble.w	800a626 <_dtoa_r+0x8fe>
 800a51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51e:	f1c0 001c 	rsb	r0, r0, #28
 800a522:	4403      	add	r3, r0
 800a524:	4481      	add	r9, r0
 800a526:	4407      	add	r7, r0
 800a528:	9309      	str	r3, [sp, #36]	; 0x24
 800a52a:	f1b9 0f00 	cmp.w	r9, #0
 800a52e:	dd05      	ble.n	800a53c <_dtoa_r+0x814>
 800a530:	4651      	mov	r1, sl
 800a532:	464a      	mov	r2, r9
 800a534:	4628      	mov	r0, r5
 800a536:	f000 fd2f 	bl	800af98 <__lshift>
 800a53a:	4682      	mov	sl, r0
 800a53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53e:	2b00      	cmp	r3, #0
 800a540:	dd05      	ble.n	800a54e <_dtoa_r+0x826>
 800a542:	4621      	mov	r1, r4
 800a544:	461a      	mov	r2, r3
 800a546:	4628      	mov	r0, r5
 800a548:	f000 fd26 	bl	800af98 <__lshift>
 800a54c:	4604      	mov	r4, r0
 800a54e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a550:	2b00      	cmp	r3, #0
 800a552:	d072      	beq.n	800a63a <_dtoa_r+0x912>
 800a554:	4621      	mov	r1, r4
 800a556:	4650      	mov	r0, sl
 800a558:	f000 fd8a 	bl	800b070 <__mcmp>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	da6c      	bge.n	800a63a <_dtoa_r+0x912>
 800a560:	2300      	movs	r3, #0
 800a562:	4651      	mov	r1, sl
 800a564:	220a      	movs	r2, #10
 800a566:	4628      	mov	r0, r5
 800a568:	f000 fb20 	bl	800abac <__multadd>
 800a56c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a56e:	4682      	mov	sl, r0
 800a570:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 81ac 	beq.w	800a8d2 <_dtoa_r+0xbaa>
 800a57a:	2300      	movs	r3, #0
 800a57c:	4631      	mov	r1, r6
 800a57e:	220a      	movs	r2, #10
 800a580:	4628      	mov	r0, r5
 800a582:	f000 fb13 	bl	800abac <__multadd>
 800a586:	9b06      	ldr	r3, [sp, #24]
 800a588:	4606      	mov	r6, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f300 8093 	bgt.w	800a6b6 <_dtoa_r+0x98e>
 800a590:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a592:	2b02      	cmp	r3, #2
 800a594:	dc59      	bgt.n	800a64a <_dtoa_r+0x922>
 800a596:	e08e      	b.n	800a6b6 <_dtoa_r+0x98e>
 800a598:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a59a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a59e:	e75d      	b.n	800a45c <_dtoa_r+0x734>
 800a5a0:	9b08      	ldr	r3, [sp, #32]
 800a5a2:	1e5c      	subs	r4, r3, #1
 800a5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	bfbf      	itttt	lt
 800a5aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a5ac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a5ae:	1ae3      	sublt	r3, r4, r3
 800a5b0:	18d2      	addlt	r2, r2, r3
 800a5b2:	bfa8      	it	ge
 800a5b4:	1b1c      	subge	r4, r3, r4
 800a5b6:	9b08      	ldr	r3, [sp, #32]
 800a5b8:	bfbe      	ittt	lt
 800a5ba:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a5bc:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a5be:	2400      	movlt	r4, #0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	bfb5      	itete	lt
 800a5c4:	eba9 0703 	sublt.w	r7, r9, r3
 800a5c8:	464f      	movge	r7, r9
 800a5ca:	2300      	movlt	r3, #0
 800a5cc:	9b08      	ldrge	r3, [sp, #32]
 800a5ce:	e747      	b.n	800a460 <_dtoa_r+0x738>
 800a5d0:	464f      	mov	r7, r9
 800a5d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a5d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a5d6:	e74c      	b.n	800a472 <_dtoa_r+0x74a>
 800a5d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5da:	e773      	b.n	800a4c4 <_dtoa_r+0x79c>
 800a5dc:	3fe00000 	.word	0x3fe00000
 800a5e0:	40240000 	.word	0x40240000
 800a5e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	dc18      	bgt.n	800a61c <_dtoa_r+0x8f4>
 800a5ea:	9b04      	ldr	r3, [sp, #16]
 800a5ec:	b9b3      	cbnz	r3, 800a61c <_dtoa_r+0x8f4>
 800a5ee:	9b05      	ldr	r3, [sp, #20]
 800a5f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5f4:	b993      	cbnz	r3, 800a61c <_dtoa_r+0x8f4>
 800a5f6:	9b05      	ldr	r3, [sp, #20]
 800a5f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5fc:	0d1b      	lsrs	r3, r3, #20
 800a5fe:	051b      	lsls	r3, r3, #20
 800a600:	b17b      	cbz	r3, 800a622 <_dtoa_r+0x8fa>
 800a602:	f04f 0801 	mov.w	r8, #1
 800a606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a608:	f109 0901 	add.w	r9, r9, #1
 800a60c:	3301      	adds	r3, #1
 800a60e:	9309      	str	r3, [sp, #36]	; 0x24
 800a610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a612:	2b00      	cmp	r3, #0
 800a614:	f47f af6f 	bne.w	800a4f6 <_dtoa_r+0x7ce>
 800a618:	2001      	movs	r0, #1
 800a61a:	e774      	b.n	800a506 <_dtoa_r+0x7de>
 800a61c:	f04f 0800 	mov.w	r8, #0
 800a620:	e7f6      	b.n	800a610 <_dtoa_r+0x8e8>
 800a622:	4698      	mov	r8, r3
 800a624:	e7f4      	b.n	800a610 <_dtoa_r+0x8e8>
 800a626:	d080      	beq.n	800a52a <_dtoa_r+0x802>
 800a628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a62a:	331c      	adds	r3, #28
 800a62c:	441a      	add	r2, r3
 800a62e:	4499      	add	r9, r3
 800a630:	441f      	add	r7, r3
 800a632:	9209      	str	r2, [sp, #36]	; 0x24
 800a634:	e779      	b.n	800a52a <_dtoa_r+0x802>
 800a636:	4603      	mov	r3, r0
 800a638:	e7f6      	b.n	800a628 <_dtoa_r+0x900>
 800a63a:	9b08      	ldr	r3, [sp, #32]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dc34      	bgt.n	800a6aa <_dtoa_r+0x982>
 800a640:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a642:	2b02      	cmp	r3, #2
 800a644:	dd31      	ble.n	800a6aa <_dtoa_r+0x982>
 800a646:	9b08      	ldr	r3, [sp, #32]
 800a648:	9306      	str	r3, [sp, #24]
 800a64a:	9b06      	ldr	r3, [sp, #24]
 800a64c:	b963      	cbnz	r3, 800a668 <_dtoa_r+0x940>
 800a64e:	4621      	mov	r1, r4
 800a650:	2205      	movs	r2, #5
 800a652:	4628      	mov	r0, r5
 800a654:	f000 faaa 	bl	800abac <__multadd>
 800a658:	4601      	mov	r1, r0
 800a65a:	4604      	mov	r4, r0
 800a65c:	4650      	mov	r0, sl
 800a65e:	f000 fd07 	bl	800b070 <__mcmp>
 800a662:	2800      	cmp	r0, #0
 800a664:	f73f adbf 	bgt.w	800a1e6 <_dtoa_r+0x4be>
 800a668:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a66a:	9f03      	ldr	r7, [sp, #12]
 800a66c:	ea6f 0b03 	mvn.w	fp, r3
 800a670:	f04f 0800 	mov.w	r8, #0
 800a674:	4621      	mov	r1, r4
 800a676:	4628      	mov	r0, r5
 800a678:	f000 fa76 	bl	800ab68 <_Bfree>
 800a67c:	2e00      	cmp	r6, #0
 800a67e:	f43f aead 	beq.w	800a3dc <_dtoa_r+0x6b4>
 800a682:	f1b8 0f00 	cmp.w	r8, #0
 800a686:	d005      	beq.n	800a694 <_dtoa_r+0x96c>
 800a688:	45b0      	cmp	r8, r6
 800a68a:	d003      	beq.n	800a694 <_dtoa_r+0x96c>
 800a68c:	4641      	mov	r1, r8
 800a68e:	4628      	mov	r0, r5
 800a690:	f000 fa6a 	bl	800ab68 <_Bfree>
 800a694:	4631      	mov	r1, r6
 800a696:	4628      	mov	r0, r5
 800a698:	f000 fa66 	bl	800ab68 <_Bfree>
 800a69c:	e69e      	b.n	800a3dc <_dtoa_r+0x6b4>
 800a69e:	2400      	movs	r4, #0
 800a6a0:	4626      	mov	r6, r4
 800a6a2:	e7e1      	b.n	800a668 <_dtoa_r+0x940>
 800a6a4:	46c3      	mov	fp, r8
 800a6a6:	4626      	mov	r6, r4
 800a6a8:	e59d      	b.n	800a1e6 <_dtoa_r+0x4be>
 800a6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 80c8 	beq.w	800a842 <_dtoa_r+0xb1a>
 800a6b2:	9b08      	ldr	r3, [sp, #32]
 800a6b4:	9306      	str	r3, [sp, #24]
 800a6b6:	2f00      	cmp	r7, #0
 800a6b8:	dd05      	ble.n	800a6c6 <_dtoa_r+0x99e>
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	463a      	mov	r2, r7
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f000 fc6a 	bl	800af98 <__lshift>
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ca:	d05b      	beq.n	800a784 <_dtoa_r+0xa5c>
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	6871      	ldr	r1, [r6, #4]
 800a6d0:	f000 fa0a 	bl	800aae8 <_Balloc>
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	b928      	cbnz	r0, 800a6e4 <_dtoa_r+0x9bc>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a6de:	4b81      	ldr	r3, [pc, #516]	; (800a8e4 <_dtoa_r+0xbbc>)
 800a6e0:	f7ff bb36 	b.w	8009d50 <_dtoa_r+0x28>
 800a6e4:	6932      	ldr	r2, [r6, #16]
 800a6e6:	f106 010c 	add.w	r1, r6, #12
 800a6ea:	3202      	adds	r2, #2
 800a6ec:	0092      	lsls	r2, r2, #2
 800a6ee:	300c      	adds	r0, #12
 800a6f0:	f7ff fa7d 	bl	8009bee <memcpy>
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f000 fc4d 	bl	800af98 <__lshift>
 800a6fe:	46b0      	mov	r8, r6
 800a700:	4606      	mov	r6, r0
 800a702:	9b03      	ldr	r3, [sp, #12]
 800a704:	9a03      	ldr	r2, [sp, #12]
 800a706:	3301      	adds	r3, #1
 800a708:	9308      	str	r3, [sp, #32]
 800a70a:	9b06      	ldr	r3, [sp, #24]
 800a70c:	4413      	add	r3, r2
 800a70e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a710:	9b04      	ldr	r3, [sp, #16]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	930a      	str	r3, [sp, #40]	; 0x28
 800a718:	9b08      	ldr	r3, [sp, #32]
 800a71a:	4621      	mov	r1, r4
 800a71c:	3b01      	subs	r3, #1
 800a71e:	4650      	mov	r0, sl
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	f7ff fa77 	bl	8009c14 <quorem>
 800a726:	4641      	mov	r1, r8
 800a728:	9006      	str	r0, [sp, #24]
 800a72a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a72e:	4650      	mov	r0, sl
 800a730:	f000 fc9e 	bl	800b070 <__mcmp>
 800a734:	4632      	mov	r2, r6
 800a736:	9009      	str	r0, [sp, #36]	; 0x24
 800a738:	4621      	mov	r1, r4
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 fcb4 	bl	800b0a8 <__mdiff>
 800a740:	68c2      	ldr	r2, [r0, #12]
 800a742:	4607      	mov	r7, r0
 800a744:	bb02      	cbnz	r2, 800a788 <_dtoa_r+0xa60>
 800a746:	4601      	mov	r1, r0
 800a748:	4650      	mov	r0, sl
 800a74a:	f000 fc91 	bl	800b070 <__mcmp>
 800a74e:	4602      	mov	r2, r0
 800a750:	4639      	mov	r1, r7
 800a752:	4628      	mov	r0, r5
 800a754:	920c      	str	r2, [sp, #48]	; 0x30
 800a756:	f000 fa07 	bl	800ab68 <_Bfree>
 800a75a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a75c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a75e:	9f08      	ldr	r7, [sp, #32]
 800a760:	ea43 0102 	orr.w	r1, r3, r2
 800a764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a766:	4319      	orrs	r1, r3
 800a768:	d110      	bne.n	800a78c <_dtoa_r+0xa64>
 800a76a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a76e:	d029      	beq.n	800a7c4 <_dtoa_r+0xa9c>
 800a770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a772:	2b00      	cmp	r3, #0
 800a774:	dd02      	ble.n	800a77c <_dtoa_r+0xa54>
 800a776:	9b06      	ldr	r3, [sp, #24]
 800a778:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a77c:	9b04      	ldr	r3, [sp, #16]
 800a77e:	f883 9000 	strb.w	r9, [r3]
 800a782:	e777      	b.n	800a674 <_dtoa_r+0x94c>
 800a784:	4630      	mov	r0, r6
 800a786:	e7ba      	b.n	800a6fe <_dtoa_r+0x9d6>
 800a788:	2201      	movs	r2, #1
 800a78a:	e7e1      	b.n	800a750 <_dtoa_r+0xa28>
 800a78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	db04      	blt.n	800a79c <_dtoa_r+0xa74>
 800a792:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a794:	430b      	orrs	r3, r1
 800a796:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a798:	430b      	orrs	r3, r1
 800a79a:	d120      	bne.n	800a7de <_dtoa_r+0xab6>
 800a79c:	2a00      	cmp	r2, #0
 800a79e:	dded      	ble.n	800a77c <_dtoa_r+0xa54>
 800a7a0:	4651      	mov	r1, sl
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f000 fbf7 	bl	800af98 <__lshift>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	f000 fc5f 	bl	800b070 <__mcmp>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	dc03      	bgt.n	800a7be <_dtoa_r+0xa96>
 800a7b6:	d1e1      	bne.n	800a77c <_dtoa_r+0xa54>
 800a7b8:	f019 0f01 	tst.w	r9, #1
 800a7bc:	d0de      	beq.n	800a77c <_dtoa_r+0xa54>
 800a7be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7c2:	d1d8      	bne.n	800a776 <_dtoa_r+0xa4e>
 800a7c4:	2339      	movs	r3, #57	; 0x39
 800a7c6:	9a04      	ldr	r2, [sp, #16]
 800a7c8:	7013      	strb	r3, [r2, #0]
 800a7ca:	463b      	mov	r3, r7
 800a7cc:	461f      	mov	r7, r3
 800a7ce:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	2a39      	cmp	r2, #57	; 0x39
 800a7d6:	d06b      	beq.n	800a8b0 <_dtoa_r+0xb88>
 800a7d8:	3201      	adds	r2, #1
 800a7da:	701a      	strb	r2, [r3, #0]
 800a7dc:	e74a      	b.n	800a674 <_dtoa_r+0x94c>
 800a7de:	2a00      	cmp	r2, #0
 800a7e0:	dd07      	ble.n	800a7f2 <_dtoa_r+0xaca>
 800a7e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7e6:	d0ed      	beq.n	800a7c4 <_dtoa_r+0xa9c>
 800a7e8:	9a04      	ldr	r2, [sp, #16]
 800a7ea:	f109 0301 	add.w	r3, r9, #1
 800a7ee:	7013      	strb	r3, [r2, #0]
 800a7f0:	e740      	b.n	800a674 <_dtoa_r+0x94c>
 800a7f2:	9b08      	ldr	r3, [sp, #32]
 800a7f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7f6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d042      	beq.n	800a884 <_dtoa_r+0xb5c>
 800a7fe:	4651      	mov	r1, sl
 800a800:	2300      	movs	r3, #0
 800a802:	220a      	movs	r2, #10
 800a804:	4628      	mov	r0, r5
 800a806:	f000 f9d1 	bl	800abac <__multadd>
 800a80a:	45b0      	cmp	r8, r6
 800a80c:	4682      	mov	sl, r0
 800a80e:	f04f 0300 	mov.w	r3, #0
 800a812:	f04f 020a 	mov.w	r2, #10
 800a816:	4641      	mov	r1, r8
 800a818:	4628      	mov	r0, r5
 800a81a:	d107      	bne.n	800a82c <_dtoa_r+0xb04>
 800a81c:	f000 f9c6 	bl	800abac <__multadd>
 800a820:	4680      	mov	r8, r0
 800a822:	4606      	mov	r6, r0
 800a824:	9b08      	ldr	r3, [sp, #32]
 800a826:	3301      	adds	r3, #1
 800a828:	9308      	str	r3, [sp, #32]
 800a82a:	e775      	b.n	800a718 <_dtoa_r+0x9f0>
 800a82c:	f000 f9be 	bl	800abac <__multadd>
 800a830:	4631      	mov	r1, r6
 800a832:	4680      	mov	r8, r0
 800a834:	2300      	movs	r3, #0
 800a836:	220a      	movs	r2, #10
 800a838:	4628      	mov	r0, r5
 800a83a:	f000 f9b7 	bl	800abac <__multadd>
 800a83e:	4606      	mov	r6, r0
 800a840:	e7f0      	b.n	800a824 <_dtoa_r+0xafc>
 800a842:	9b08      	ldr	r3, [sp, #32]
 800a844:	9306      	str	r3, [sp, #24]
 800a846:	9f03      	ldr	r7, [sp, #12]
 800a848:	4621      	mov	r1, r4
 800a84a:	4650      	mov	r0, sl
 800a84c:	f7ff f9e2 	bl	8009c14 <quorem>
 800a850:	9b03      	ldr	r3, [sp, #12]
 800a852:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a856:	f807 9b01 	strb.w	r9, [r7], #1
 800a85a:	1afa      	subs	r2, r7, r3
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	4293      	cmp	r3, r2
 800a860:	dd07      	ble.n	800a872 <_dtoa_r+0xb4a>
 800a862:	4651      	mov	r1, sl
 800a864:	2300      	movs	r3, #0
 800a866:	220a      	movs	r2, #10
 800a868:	4628      	mov	r0, r5
 800a86a:	f000 f99f 	bl	800abac <__multadd>
 800a86e:	4682      	mov	sl, r0
 800a870:	e7ea      	b.n	800a848 <_dtoa_r+0xb20>
 800a872:	9b06      	ldr	r3, [sp, #24]
 800a874:	f04f 0800 	mov.w	r8, #0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bfcc      	ite	gt
 800a87c:	461f      	movgt	r7, r3
 800a87e:	2701      	movle	r7, #1
 800a880:	9b03      	ldr	r3, [sp, #12]
 800a882:	441f      	add	r7, r3
 800a884:	4651      	mov	r1, sl
 800a886:	2201      	movs	r2, #1
 800a888:	4628      	mov	r0, r5
 800a88a:	f000 fb85 	bl	800af98 <__lshift>
 800a88e:	4621      	mov	r1, r4
 800a890:	4682      	mov	sl, r0
 800a892:	f000 fbed 	bl	800b070 <__mcmp>
 800a896:	2800      	cmp	r0, #0
 800a898:	dc97      	bgt.n	800a7ca <_dtoa_r+0xaa2>
 800a89a:	d102      	bne.n	800a8a2 <_dtoa_r+0xb7a>
 800a89c:	f019 0f01 	tst.w	r9, #1
 800a8a0:	d193      	bne.n	800a7ca <_dtoa_r+0xaa2>
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	461f      	mov	r7, r3
 800a8a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8aa:	2a30      	cmp	r2, #48	; 0x30
 800a8ac:	d0fa      	beq.n	800a8a4 <_dtoa_r+0xb7c>
 800a8ae:	e6e1      	b.n	800a674 <_dtoa_r+0x94c>
 800a8b0:	9a03      	ldr	r2, [sp, #12]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d18a      	bne.n	800a7cc <_dtoa_r+0xaa4>
 800a8b6:	2331      	movs	r3, #49	; 0x31
 800a8b8:	f10b 0b01 	add.w	fp, fp, #1
 800a8bc:	e797      	b.n	800a7ee <_dtoa_r+0xac6>
 800a8be:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <_dtoa_r+0xbc0>)
 800a8c0:	f7ff ba9f 	b.w	8009e02 <_dtoa_r+0xda>
 800a8c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f47f aa77 	bne.w	8009dba <_dtoa_r+0x92>
 800a8cc:	4b07      	ldr	r3, [pc, #28]	; (800a8ec <_dtoa_r+0xbc4>)
 800a8ce:	f7ff ba98 	b.w	8009e02 <_dtoa_r+0xda>
 800a8d2:	9b06      	ldr	r3, [sp, #24]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dcb6      	bgt.n	800a846 <_dtoa_r+0xb1e>
 800a8d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	f73f aeb5 	bgt.w	800a64a <_dtoa_r+0x922>
 800a8e0:	e7b1      	b.n	800a846 <_dtoa_r+0xb1e>
 800a8e2:	bf00      	nop
 800a8e4:	0800df61 	.word	0x0800df61
 800a8e8:	0800e248 	.word	0x0800e248
 800a8ec:	0800dee5 	.word	0x0800dee5

0800a8f0 <_free_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	d040      	beq.n	800a97a <_free_r+0x8a>
 800a8f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8fc:	1f0c      	subs	r4, r1, #4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bfb8      	it	lt
 800a902:	18e4      	addlt	r4, r4, r3
 800a904:	f000 f8e4 	bl	800aad0 <__malloc_lock>
 800a908:	4a1c      	ldr	r2, [pc, #112]	; (800a97c <_free_r+0x8c>)
 800a90a:	6813      	ldr	r3, [r2, #0]
 800a90c:	b933      	cbnz	r3, 800a91c <_free_r+0x2c>
 800a90e:	6063      	str	r3, [r4, #4]
 800a910:	6014      	str	r4, [r2, #0]
 800a912:	4628      	mov	r0, r5
 800a914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a918:	f000 b8e0 	b.w	800aadc <__malloc_unlock>
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d908      	bls.n	800a932 <_free_r+0x42>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	1821      	adds	r1, r4, r0
 800a924:	428b      	cmp	r3, r1
 800a926:	bf01      	itttt	eq
 800a928:	6819      	ldreq	r1, [r3, #0]
 800a92a:	685b      	ldreq	r3, [r3, #4]
 800a92c:	1809      	addeq	r1, r1, r0
 800a92e:	6021      	streq	r1, [r4, #0]
 800a930:	e7ed      	b.n	800a90e <_free_r+0x1e>
 800a932:	461a      	mov	r2, r3
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	b10b      	cbz	r3, 800a93c <_free_r+0x4c>
 800a938:	42a3      	cmp	r3, r4
 800a93a:	d9fa      	bls.n	800a932 <_free_r+0x42>
 800a93c:	6811      	ldr	r1, [r2, #0]
 800a93e:	1850      	adds	r0, r2, r1
 800a940:	42a0      	cmp	r0, r4
 800a942:	d10b      	bne.n	800a95c <_free_r+0x6c>
 800a944:	6820      	ldr	r0, [r4, #0]
 800a946:	4401      	add	r1, r0
 800a948:	1850      	adds	r0, r2, r1
 800a94a:	4283      	cmp	r3, r0
 800a94c:	6011      	str	r1, [r2, #0]
 800a94e:	d1e0      	bne.n	800a912 <_free_r+0x22>
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	4408      	add	r0, r1
 800a956:	6010      	str	r0, [r2, #0]
 800a958:	6053      	str	r3, [r2, #4]
 800a95a:	e7da      	b.n	800a912 <_free_r+0x22>
 800a95c:	d902      	bls.n	800a964 <_free_r+0x74>
 800a95e:	230c      	movs	r3, #12
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	e7d6      	b.n	800a912 <_free_r+0x22>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	1821      	adds	r1, r4, r0
 800a968:	428b      	cmp	r3, r1
 800a96a:	bf01      	itttt	eq
 800a96c:	6819      	ldreq	r1, [r3, #0]
 800a96e:	685b      	ldreq	r3, [r3, #4]
 800a970:	1809      	addeq	r1, r1, r0
 800a972:	6021      	streq	r1, [r4, #0]
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	6054      	str	r4, [r2, #4]
 800a978:	e7cb      	b.n	800a912 <_free_r+0x22>
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	200020c8 	.word	0x200020c8

0800a980 <malloc>:
 800a980:	4b02      	ldr	r3, [pc, #8]	; (800a98c <malloc+0xc>)
 800a982:	4601      	mov	r1, r0
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	f000 b823 	b.w	800a9d0 <_malloc_r>
 800a98a:	bf00      	nop
 800a98c:	2000007c 	.word	0x2000007c

0800a990 <sbrk_aligned>:
 800a990:	b570      	push	{r4, r5, r6, lr}
 800a992:	4e0e      	ldr	r6, [pc, #56]	; (800a9cc <sbrk_aligned+0x3c>)
 800a994:	460c      	mov	r4, r1
 800a996:	6831      	ldr	r1, [r6, #0]
 800a998:	4605      	mov	r5, r0
 800a99a:	b911      	cbnz	r1, 800a9a2 <sbrk_aligned+0x12>
 800a99c:	f002 f98a 	bl	800ccb4 <_sbrk_r>
 800a9a0:	6030      	str	r0, [r6, #0]
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f002 f985 	bl	800ccb4 <_sbrk_r>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	d00a      	beq.n	800a9c4 <sbrk_aligned+0x34>
 800a9ae:	1cc4      	adds	r4, r0, #3
 800a9b0:	f024 0403 	bic.w	r4, r4, #3
 800a9b4:	42a0      	cmp	r0, r4
 800a9b6:	d007      	beq.n	800a9c8 <sbrk_aligned+0x38>
 800a9b8:	1a21      	subs	r1, r4, r0
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f002 f97a 	bl	800ccb4 <_sbrk_r>
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d101      	bne.n	800a9c8 <sbrk_aligned+0x38>
 800a9c4:	f04f 34ff 	mov.w	r4, #4294967295
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	200020cc 	.word	0x200020cc

0800a9d0 <_malloc_r>:
 800a9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d4:	1ccd      	adds	r5, r1, #3
 800a9d6:	f025 0503 	bic.w	r5, r5, #3
 800a9da:	3508      	adds	r5, #8
 800a9dc:	2d0c      	cmp	r5, #12
 800a9de:	bf38      	it	cc
 800a9e0:	250c      	movcc	r5, #12
 800a9e2:	2d00      	cmp	r5, #0
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	db01      	blt.n	800a9ec <_malloc_r+0x1c>
 800a9e8:	42a9      	cmp	r1, r5
 800a9ea:	d905      	bls.n	800a9f8 <_malloc_r+0x28>
 800a9ec:	230c      	movs	r3, #12
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	603b      	str	r3, [r7, #0]
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aacc <_malloc_r+0xfc>
 800a9fc:	f000 f868 	bl	800aad0 <__malloc_lock>
 800aa00:	f8d8 3000 	ldr.w	r3, [r8]
 800aa04:	461c      	mov	r4, r3
 800aa06:	bb5c      	cbnz	r4, 800aa60 <_malloc_r+0x90>
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	f7ff ffc0 	bl	800a990 <sbrk_aligned>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	4604      	mov	r4, r0
 800aa14:	d155      	bne.n	800aac2 <_malloc_r+0xf2>
 800aa16:	f8d8 4000 	ldr.w	r4, [r8]
 800aa1a:	4626      	mov	r6, r4
 800aa1c:	2e00      	cmp	r6, #0
 800aa1e:	d145      	bne.n	800aaac <_malloc_r+0xdc>
 800aa20:	2c00      	cmp	r4, #0
 800aa22:	d048      	beq.n	800aab6 <_malloc_r+0xe6>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	4631      	mov	r1, r6
 800aa28:	4638      	mov	r0, r7
 800aa2a:	eb04 0903 	add.w	r9, r4, r3
 800aa2e:	f002 f941 	bl	800ccb4 <_sbrk_r>
 800aa32:	4581      	cmp	r9, r0
 800aa34:	d13f      	bne.n	800aab6 <_malloc_r+0xe6>
 800aa36:	6821      	ldr	r1, [r4, #0]
 800aa38:	4638      	mov	r0, r7
 800aa3a:	1a6d      	subs	r5, r5, r1
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	f7ff ffa7 	bl	800a990 <sbrk_aligned>
 800aa42:	3001      	adds	r0, #1
 800aa44:	d037      	beq.n	800aab6 <_malloc_r+0xe6>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	442b      	add	r3, r5
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d038      	beq.n	800aac6 <_malloc_r+0xf6>
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	42a2      	cmp	r2, r4
 800aa58:	d12b      	bne.n	800aab2 <_malloc_r+0xe2>
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	605a      	str	r2, [r3, #4]
 800aa5e:	e00f      	b.n	800aa80 <_malloc_r+0xb0>
 800aa60:	6822      	ldr	r2, [r4, #0]
 800aa62:	1b52      	subs	r2, r2, r5
 800aa64:	d41f      	bmi.n	800aaa6 <_malloc_r+0xd6>
 800aa66:	2a0b      	cmp	r2, #11
 800aa68:	d917      	bls.n	800aa9a <_malloc_r+0xca>
 800aa6a:	1961      	adds	r1, r4, r5
 800aa6c:	42a3      	cmp	r3, r4
 800aa6e:	6025      	str	r5, [r4, #0]
 800aa70:	bf18      	it	ne
 800aa72:	6059      	strne	r1, [r3, #4]
 800aa74:	6863      	ldr	r3, [r4, #4]
 800aa76:	bf08      	it	eq
 800aa78:	f8c8 1000 	streq.w	r1, [r8]
 800aa7c:	5162      	str	r2, [r4, r5]
 800aa7e:	604b      	str	r3, [r1, #4]
 800aa80:	4638      	mov	r0, r7
 800aa82:	f104 060b 	add.w	r6, r4, #11
 800aa86:	f000 f829 	bl	800aadc <__malloc_unlock>
 800aa8a:	f026 0607 	bic.w	r6, r6, #7
 800aa8e:	1d23      	adds	r3, r4, #4
 800aa90:	1af2      	subs	r2, r6, r3
 800aa92:	d0ae      	beq.n	800a9f2 <_malloc_r+0x22>
 800aa94:	1b9b      	subs	r3, r3, r6
 800aa96:	50a3      	str	r3, [r4, r2]
 800aa98:	e7ab      	b.n	800a9f2 <_malloc_r+0x22>
 800aa9a:	42a3      	cmp	r3, r4
 800aa9c:	6862      	ldr	r2, [r4, #4]
 800aa9e:	d1dd      	bne.n	800aa5c <_malloc_r+0x8c>
 800aaa0:	f8c8 2000 	str.w	r2, [r8]
 800aaa4:	e7ec      	b.n	800aa80 <_malloc_r+0xb0>
 800aaa6:	4623      	mov	r3, r4
 800aaa8:	6864      	ldr	r4, [r4, #4]
 800aaaa:	e7ac      	b.n	800aa06 <_malloc_r+0x36>
 800aaac:	4634      	mov	r4, r6
 800aaae:	6876      	ldr	r6, [r6, #4]
 800aab0:	e7b4      	b.n	800aa1c <_malloc_r+0x4c>
 800aab2:	4613      	mov	r3, r2
 800aab4:	e7cc      	b.n	800aa50 <_malloc_r+0x80>
 800aab6:	230c      	movs	r3, #12
 800aab8:	4638      	mov	r0, r7
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	f000 f80e 	bl	800aadc <__malloc_unlock>
 800aac0:	e797      	b.n	800a9f2 <_malloc_r+0x22>
 800aac2:	6025      	str	r5, [r4, #0]
 800aac4:	e7dc      	b.n	800aa80 <_malloc_r+0xb0>
 800aac6:	605b      	str	r3, [r3, #4]
 800aac8:	deff      	udf	#255	; 0xff
 800aaca:	bf00      	nop
 800aacc:	200020c8 	.word	0x200020c8

0800aad0 <__malloc_lock>:
 800aad0:	4801      	ldr	r0, [pc, #4]	; (800aad8 <__malloc_lock+0x8>)
 800aad2:	f7ff b87c 	b.w	8009bce <__retarget_lock_acquire_recursive>
 800aad6:	bf00      	nop
 800aad8:	200020c4 	.word	0x200020c4

0800aadc <__malloc_unlock>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__malloc_unlock+0x8>)
 800aade:	f7ff b877 	b.w	8009bd0 <__retarget_lock_release_recursive>
 800aae2:	bf00      	nop
 800aae4:	200020c4 	.word	0x200020c4

0800aae8 <_Balloc>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	69c6      	ldr	r6, [r0, #28]
 800aaec:	4604      	mov	r4, r0
 800aaee:	460d      	mov	r5, r1
 800aaf0:	b976      	cbnz	r6, 800ab10 <_Balloc+0x28>
 800aaf2:	2010      	movs	r0, #16
 800aaf4:	f7ff ff44 	bl	800a980 <malloc>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	61e0      	str	r0, [r4, #28]
 800aafc:	b920      	cbnz	r0, 800ab08 <_Balloc+0x20>
 800aafe:	216b      	movs	r1, #107	; 0x6b
 800ab00:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <_Balloc+0x78>)
 800ab02:	4818      	ldr	r0, [pc, #96]	; (800ab64 <_Balloc+0x7c>)
 800ab04:	f002 f8ec 	bl	800cce0 <__assert_func>
 800ab08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab0c:	6006      	str	r6, [r0, #0]
 800ab0e:	60c6      	str	r6, [r0, #12]
 800ab10:	69e6      	ldr	r6, [r4, #28]
 800ab12:	68f3      	ldr	r3, [r6, #12]
 800ab14:	b183      	cbz	r3, 800ab38 <_Balloc+0x50>
 800ab16:	69e3      	ldr	r3, [r4, #28]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab1e:	b9b8      	cbnz	r0, 800ab50 <_Balloc+0x68>
 800ab20:	2101      	movs	r1, #1
 800ab22:	fa01 f605 	lsl.w	r6, r1, r5
 800ab26:	1d72      	adds	r2, r6, #5
 800ab28:	4620      	mov	r0, r4
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	f002 f8f6 	bl	800cd1c <_calloc_r>
 800ab30:	b160      	cbz	r0, 800ab4c <_Balloc+0x64>
 800ab32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab36:	e00e      	b.n	800ab56 <_Balloc+0x6e>
 800ab38:	2221      	movs	r2, #33	; 0x21
 800ab3a:	2104      	movs	r1, #4
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f002 f8ed 	bl	800cd1c <_calloc_r>
 800ab42:	69e3      	ldr	r3, [r4, #28]
 800ab44:	60f0      	str	r0, [r6, #12]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e4      	bne.n	800ab16 <_Balloc+0x2e>
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	6802      	ldr	r2, [r0, #0]
 800ab52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab56:	2300      	movs	r3, #0
 800ab58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab5c:	e7f7      	b.n	800ab4e <_Balloc+0x66>
 800ab5e:	bf00      	nop
 800ab60:	0800def2 	.word	0x0800def2
 800ab64:	0800df72 	.word	0x0800df72

0800ab68 <_Bfree>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	69c6      	ldr	r6, [r0, #28]
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	460c      	mov	r4, r1
 800ab70:	b976      	cbnz	r6, 800ab90 <_Bfree+0x28>
 800ab72:	2010      	movs	r0, #16
 800ab74:	f7ff ff04 	bl	800a980 <malloc>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	61e8      	str	r0, [r5, #28]
 800ab7c:	b920      	cbnz	r0, 800ab88 <_Bfree+0x20>
 800ab7e:	218f      	movs	r1, #143	; 0x8f
 800ab80:	4b08      	ldr	r3, [pc, #32]	; (800aba4 <_Bfree+0x3c>)
 800ab82:	4809      	ldr	r0, [pc, #36]	; (800aba8 <_Bfree+0x40>)
 800ab84:	f002 f8ac 	bl	800cce0 <__assert_func>
 800ab88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab8c:	6006      	str	r6, [r0, #0]
 800ab8e:	60c6      	str	r6, [r0, #12]
 800ab90:	b13c      	cbz	r4, 800aba2 <_Bfree+0x3a>
 800ab92:	69eb      	ldr	r3, [r5, #28]
 800ab94:	6862      	ldr	r2, [r4, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab9c:	6021      	str	r1, [r4, #0]
 800ab9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	0800def2 	.word	0x0800def2
 800aba8:	0800df72 	.word	0x0800df72

0800abac <__multadd>:
 800abac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb0:	4607      	mov	r7, r0
 800abb2:	460c      	mov	r4, r1
 800abb4:	461e      	mov	r6, r3
 800abb6:	2000      	movs	r0, #0
 800abb8:	690d      	ldr	r5, [r1, #16]
 800abba:	f101 0c14 	add.w	ip, r1, #20
 800abbe:	f8dc 3000 	ldr.w	r3, [ip]
 800abc2:	3001      	adds	r0, #1
 800abc4:	b299      	uxth	r1, r3
 800abc6:	fb02 6101 	mla	r1, r2, r1, r6
 800abca:	0c1e      	lsrs	r6, r3, #16
 800abcc:	0c0b      	lsrs	r3, r1, #16
 800abce:	fb02 3306 	mla	r3, r2, r6, r3
 800abd2:	b289      	uxth	r1, r1
 800abd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abd8:	4285      	cmp	r5, r0
 800abda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abde:	f84c 1b04 	str.w	r1, [ip], #4
 800abe2:	dcec      	bgt.n	800abbe <__multadd+0x12>
 800abe4:	b30e      	cbz	r6, 800ac2a <__multadd+0x7e>
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	42ab      	cmp	r3, r5
 800abea:	dc19      	bgt.n	800ac20 <__multadd+0x74>
 800abec:	6861      	ldr	r1, [r4, #4]
 800abee:	4638      	mov	r0, r7
 800abf0:	3101      	adds	r1, #1
 800abf2:	f7ff ff79 	bl	800aae8 <_Balloc>
 800abf6:	4680      	mov	r8, r0
 800abf8:	b928      	cbnz	r0, 800ac06 <__multadd+0x5a>
 800abfa:	4602      	mov	r2, r0
 800abfc:	21ba      	movs	r1, #186	; 0xba
 800abfe:	4b0c      	ldr	r3, [pc, #48]	; (800ac30 <__multadd+0x84>)
 800ac00:	480c      	ldr	r0, [pc, #48]	; (800ac34 <__multadd+0x88>)
 800ac02:	f002 f86d 	bl	800cce0 <__assert_func>
 800ac06:	6922      	ldr	r2, [r4, #16]
 800ac08:	f104 010c 	add.w	r1, r4, #12
 800ac0c:	3202      	adds	r2, #2
 800ac0e:	0092      	lsls	r2, r2, #2
 800ac10:	300c      	adds	r0, #12
 800ac12:	f7fe ffec 	bl	8009bee <memcpy>
 800ac16:	4621      	mov	r1, r4
 800ac18:	4638      	mov	r0, r7
 800ac1a:	f7ff ffa5 	bl	800ab68 <_Bfree>
 800ac1e:	4644      	mov	r4, r8
 800ac20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac24:	3501      	adds	r5, #1
 800ac26:	615e      	str	r6, [r3, #20]
 800ac28:	6125      	str	r5, [r4, #16]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac30:	0800df61 	.word	0x0800df61
 800ac34:	0800df72 	.word	0x0800df72

0800ac38 <__s2b>:
 800ac38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac3c:	4615      	mov	r5, r2
 800ac3e:	2209      	movs	r2, #9
 800ac40:	461f      	mov	r7, r3
 800ac42:	3308      	adds	r3, #8
 800ac44:	460c      	mov	r4, r1
 800ac46:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	2100      	movs	r1, #0
 800ac50:	429a      	cmp	r2, r3
 800ac52:	db09      	blt.n	800ac68 <__s2b+0x30>
 800ac54:	4630      	mov	r0, r6
 800ac56:	f7ff ff47 	bl	800aae8 <_Balloc>
 800ac5a:	b940      	cbnz	r0, 800ac6e <__s2b+0x36>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	21d3      	movs	r1, #211	; 0xd3
 800ac60:	4b18      	ldr	r3, [pc, #96]	; (800acc4 <__s2b+0x8c>)
 800ac62:	4819      	ldr	r0, [pc, #100]	; (800acc8 <__s2b+0x90>)
 800ac64:	f002 f83c 	bl	800cce0 <__assert_func>
 800ac68:	0052      	lsls	r2, r2, #1
 800ac6a:	3101      	adds	r1, #1
 800ac6c:	e7f0      	b.n	800ac50 <__s2b+0x18>
 800ac6e:	9b08      	ldr	r3, [sp, #32]
 800ac70:	2d09      	cmp	r5, #9
 800ac72:	6143      	str	r3, [r0, #20]
 800ac74:	f04f 0301 	mov.w	r3, #1
 800ac78:	6103      	str	r3, [r0, #16]
 800ac7a:	dd16      	ble.n	800acaa <__s2b+0x72>
 800ac7c:	f104 0909 	add.w	r9, r4, #9
 800ac80:	46c8      	mov	r8, r9
 800ac82:	442c      	add	r4, r5
 800ac84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac88:	4601      	mov	r1, r0
 800ac8a:	220a      	movs	r2, #10
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	3b30      	subs	r3, #48	; 0x30
 800ac90:	f7ff ff8c 	bl	800abac <__multadd>
 800ac94:	45a0      	cmp	r8, r4
 800ac96:	d1f5      	bne.n	800ac84 <__s2b+0x4c>
 800ac98:	f1a5 0408 	sub.w	r4, r5, #8
 800ac9c:	444c      	add	r4, r9
 800ac9e:	1b2d      	subs	r5, r5, r4
 800aca0:	1963      	adds	r3, r4, r5
 800aca2:	42bb      	cmp	r3, r7
 800aca4:	db04      	blt.n	800acb0 <__s2b+0x78>
 800aca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acaa:	2509      	movs	r5, #9
 800acac:	340a      	adds	r4, #10
 800acae:	e7f6      	b.n	800ac9e <__s2b+0x66>
 800acb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acb4:	4601      	mov	r1, r0
 800acb6:	220a      	movs	r2, #10
 800acb8:	4630      	mov	r0, r6
 800acba:	3b30      	subs	r3, #48	; 0x30
 800acbc:	f7ff ff76 	bl	800abac <__multadd>
 800acc0:	e7ee      	b.n	800aca0 <__s2b+0x68>
 800acc2:	bf00      	nop
 800acc4:	0800df61 	.word	0x0800df61
 800acc8:	0800df72 	.word	0x0800df72

0800accc <__hi0bits>:
 800accc:	0c02      	lsrs	r2, r0, #16
 800acce:	0412      	lsls	r2, r2, #16
 800acd0:	4603      	mov	r3, r0
 800acd2:	b9ca      	cbnz	r2, 800ad08 <__hi0bits+0x3c>
 800acd4:	0403      	lsls	r3, r0, #16
 800acd6:	2010      	movs	r0, #16
 800acd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800acdc:	bf04      	itt	eq
 800acde:	021b      	lsleq	r3, r3, #8
 800ace0:	3008      	addeq	r0, #8
 800ace2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ace6:	bf04      	itt	eq
 800ace8:	011b      	lsleq	r3, r3, #4
 800acea:	3004      	addeq	r0, #4
 800acec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800acf0:	bf04      	itt	eq
 800acf2:	009b      	lsleq	r3, r3, #2
 800acf4:	3002      	addeq	r0, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	db05      	blt.n	800ad06 <__hi0bits+0x3a>
 800acfa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800acfe:	f100 0001 	add.w	r0, r0, #1
 800ad02:	bf08      	it	eq
 800ad04:	2020      	moveq	r0, #32
 800ad06:	4770      	bx	lr
 800ad08:	2000      	movs	r0, #0
 800ad0a:	e7e5      	b.n	800acd8 <__hi0bits+0xc>

0800ad0c <__lo0bits>:
 800ad0c:	6803      	ldr	r3, [r0, #0]
 800ad0e:	4602      	mov	r2, r0
 800ad10:	f013 0007 	ands.w	r0, r3, #7
 800ad14:	d00b      	beq.n	800ad2e <__lo0bits+0x22>
 800ad16:	07d9      	lsls	r1, r3, #31
 800ad18:	d421      	bmi.n	800ad5e <__lo0bits+0x52>
 800ad1a:	0798      	lsls	r0, r3, #30
 800ad1c:	bf49      	itett	mi
 800ad1e:	085b      	lsrmi	r3, r3, #1
 800ad20:	089b      	lsrpl	r3, r3, #2
 800ad22:	2001      	movmi	r0, #1
 800ad24:	6013      	strmi	r3, [r2, #0]
 800ad26:	bf5c      	itt	pl
 800ad28:	2002      	movpl	r0, #2
 800ad2a:	6013      	strpl	r3, [r2, #0]
 800ad2c:	4770      	bx	lr
 800ad2e:	b299      	uxth	r1, r3
 800ad30:	b909      	cbnz	r1, 800ad36 <__lo0bits+0x2a>
 800ad32:	2010      	movs	r0, #16
 800ad34:	0c1b      	lsrs	r3, r3, #16
 800ad36:	b2d9      	uxtb	r1, r3
 800ad38:	b909      	cbnz	r1, 800ad3e <__lo0bits+0x32>
 800ad3a:	3008      	adds	r0, #8
 800ad3c:	0a1b      	lsrs	r3, r3, #8
 800ad3e:	0719      	lsls	r1, r3, #28
 800ad40:	bf04      	itt	eq
 800ad42:	091b      	lsreq	r3, r3, #4
 800ad44:	3004      	addeq	r0, #4
 800ad46:	0799      	lsls	r1, r3, #30
 800ad48:	bf04      	itt	eq
 800ad4a:	089b      	lsreq	r3, r3, #2
 800ad4c:	3002      	addeq	r0, #2
 800ad4e:	07d9      	lsls	r1, r3, #31
 800ad50:	d403      	bmi.n	800ad5a <__lo0bits+0x4e>
 800ad52:	085b      	lsrs	r3, r3, #1
 800ad54:	f100 0001 	add.w	r0, r0, #1
 800ad58:	d003      	beq.n	800ad62 <__lo0bits+0x56>
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	4770      	bx	lr
 800ad5e:	2000      	movs	r0, #0
 800ad60:	4770      	bx	lr
 800ad62:	2020      	movs	r0, #32
 800ad64:	4770      	bx	lr
	...

0800ad68 <__i2b>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	f7ff febb 	bl	800aae8 <_Balloc>
 800ad72:	4602      	mov	r2, r0
 800ad74:	b928      	cbnz	r0, 800ad82 <__i2b+0x1a>
 800ad76:	f240 1145 	movw	r1, #325	; 0x145
 800ad7a:	4b04      	ldr	r3, [pc, #16]	; (800ad8c <__i2b+0x24>)
 800ad7c:	4804      	ldr	r0, [pc, #16]	; (800ad90 <__i2b+0x28>)
 800ad7e:	f001 ffaf 	bl	800cce0 <__assert_func>
 800ad82:	2301      	movs	r3, #1
 800ad84:	6144      	str	r4, [r0, #20]
 800ad86:	6103      	str	r3, [r0, #16]
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0800df61 	.word	0x0800df61
 800ad90:	0800df72 	.word	0x0800df72

0800ad94 <__multiply>:
 800ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	4691      	mov	r9, r2
 800ad9a:	690a      	ldr	r2, [r1, #16]
 800ad9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ada0:	460c      	mov	r4, r1
 800ada2:	429a      	cmp	r2, r3
 800ada4:	bfbe      	ittt	lt
 800ada6:	460b      	movlt	r3, r1
 800ada8:	464c      	movlt	r4, r9
 800adaa:	4699      	movlt	r9, r3
 800adac:	6927      	ldr	r7, [r4, #16]
 800adae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	6861      	ldr	r1, [r4, #4]
 800adb6:	eb07 060a 	add.w	r6, r7, sl
 800adba:	42b3      	cmp	r3, r6
 800adbc:	b085      	sub	sp, #20
 800adbe:	bfb8      	it	lt
 800adc0:	3101      	addlt	r1, #1
 800adc2:	f7ff fe91 	bl	800aae8 <_Balloc>
 800adc6:	b930      	cbnz	r0, 800add6 <__multiply+0x42>
 800adc8:	4602      	mov	r2, r0
 800adca:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800adce:	4b43      	ldr	r3, [pc, #268]	; (800aedc <__multiply+0x148>)
 800add0:	4843      	ldr	r0, [pc, #268]	; (800aee0 <__multiply+0x14c>)
 800add2:	f001 ff85 	bl	800cce0 <__assert_func>
 800add6:	f100 0514 	add.w	r5, r0, #20
 800adda:	462b      	mov	r3, r5
 800addc:	2200      	movs	r2, #0
 800adde:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ade2:	4543      	cmp	r3, r8
 800ade4:	d321      	bcc.n	800ae2a <__multiply+0x96>
 800ade6:	f104 0314 	add.w	r3, r4, #20
 800adea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800adee:	f109 0314 	add.w	r3, r9, #20
 800adf2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800adf6:	9202      	str	r2, [sp, #8]
 800adf8:	1b3a      	subs	r2, r7, r4
 800adfa:	3a15      	subs	r2, #21
 800adfc:	f022 0203 	bic.w	r2, r2, #3
 800ae00:	3204      	adds	r2, #4
 800ae02:	f104 0115 	add.w	r1, r4, #21
 800ae06:	428f      	cmp	r7, r1
 800ae08:	bf38      	it	cc
 800ae0a:	2204      	movcc	r2, #4
 800ae0c:	9201      	str	r2, [sp, #4]
 800ae0e:	9a02      	ldr	r2, [sp, #8]
 800ae10:	9303      	str	r3, [sp, #12]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d80c      	bhi.n	800ae30 <__multiply+0x9c>
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	dd03      	ble.n	800ae22 <__multiply+0x8e>
 800ae1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d05a      	beq.n	800aed8 <__multiply+0x144>
 800ae22:	6106      	str	r6, [r0, #16]
 800ae24:	b005      	add	sp, #20
 800ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2a:	f843 2b04 	str.w	r2, [r3], #4
 800ae2e:	e7d8      	b.n	800ade2 <__multiply+0x4e>
 800ae30:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae34:	f1ba 0f00 	cmp.w	sl, #0
 800ae38:	d023      	beq.n	800ae82 <__multiply+0xee>
 800ae3a:	46a9      	mov	r9, r5
 800ae3c:	f04f 0c00 	mov.w	ip, #0
 800ae40:	f104 0e14 	add.w	lr, r4, #20
 800ae44:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae48:	f8d9 1000 	ldr.w	r1, [r9]
 800ae4c:	fa1f fb82 	uxth.w	fp, r2
 800ae50:	b289      	uxth	r1, r1
 800ae52:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae56:	4461      	add	r1, ip
 800ae58:	f8d9 c000 	ldr.w	ip, [r9]
 800ae5c:	0c12      	lsrs	r2, r2, #16
 800ae5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ae62:	fb0a c202 	mla	r2, sl, r2, ip
 800ae66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae6a:	b289      	uxth	r1, r1
 800ae6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae70:	4577      	cmp	r7, lr
 800ae72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae76:	f849 1b04 	str.w	r1, [r9], #4
 800ae7a:	d8e3      	bhi.n	800ae44 <__multiply+0xb0>
 800ae7c:	9a01      	ldr	r2, [sp, #4]
 800ae7e:	f845 c002 	str.w	ip, [r5, r2]
 800ae82:	9a03      	ldr	r2, [sp, #12]
 800ae84:	3304      	adds	r3, #4
 800ae86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae8a:	f1b9 0f00 	cmp.w	r9, #0
 800ae8e:	d021      	beq.n	800aed4 <__multiply+0x140>
 800ae90:	46ae      	mov	lr, r5
 800ae92:	f04f 0a00 	mov.w	sl, #0
 800ae96:	6829      	ldr	r1, [r5, #0]
 800ae98:	f104 0c14 	add.w	ip, r4, #20
 800ae9c:	f8bc b000 	ldrh.w	fp, [ip]
 800aea0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aea4:	b289      	uxth	r1, r1
 800aea6:	fb09 220b 	mla	r2, r9, fp, r2
 800aeaa:	4452      	add	r2, sl
 800aeac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aeb0:	f84e 1b04 	str.w	r1, [lr], #4
 800aeb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aeb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aebc:	f8be 1000 	ldrh.w	r1, [lr]
 800aec0:	4567      	cmp	r7, ip
 800aec2:	fb09 110a 	mla	r1, r9, sl, r1
 800aec6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aeca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aece:	d8e5      	bhi.n	800ae9c <__multiply+0x108>
 800aed0:	9a01      	ldr	r2, [sp, #4]
 800aed2:	50a9      	str	r1, [r5, r2]
 800aed4:	3504      	adds	r5, #4
 800aed6:	e79a      	b.n	800ae0e <__multiply+0x7a>
 800aed8:	3e01      	subs	r6, #1
 800aeda:	e79c      	b.n	800ae16 <__multiply+0x82>
 800aedc:	0800df61 	.word	0x0800df61
 800aee0:	0800df72 	.word	0x0800df72

0800aee4 <__pow5mult>:
 800aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee8:	4615      	mov	r5, r2
 800aeea:	f012 0203 	ands.w	r2, r2, #3
 800aeee:	4606      	mov	r6, r0
 800aef0:	460f      	mov	r7, r1
 800aef2:	d007      	beq.n	800af04 <__pow5mult+0x20>
 800aef4:	4c25      	ldr	r4, [pc, #148]	; (800af8c <__pow5mult+0xa8>)
 800aef6:	3a01      	subs	r2, #1
 800aef8:	2300      	movs	r3, #0
 800aefa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aefe:	f7ff fe55 	bl	800abac <__multadd>
 800af02:	4607      	mov	r7, r0
 800af04:	10ad      	asrs	r5, r5, #2
 800af06:	d03d      	beq.n	800af84 <__pow5mult+0xa0>
 800af08:	69f4      	ldr	r4, [r6, #28]
 800af0a:	b97c      	cbnz	r4, 800af2c <__pow5mult+0x48>
 800af0c:	2010      	movs	r0, #16
 800af0e:	f7ff fd37 	bl	800a980 <malloc>
 800af12:	4602      	mov	r2, r0
 800af14:	61f0      	str	r0, [r6, #28]
 800af16:	b928      	cbnz	r0, 800af24 <__pow5mult+0x40>
 800af18:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af1c:	4b1c      	ldr	r3, [pc, #112]	; (800af90 <__pow5mult+0xac>)
 800af1e:	481d      	ldr	r0, [pc, #116]	; (800af94 <__pow5mult+0xb0>)
 800af20:	f001 fede 	bl	800cce0 <__assert_func>
 800af24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af28:	6004      	str	r4, [r0, #0]
 800af2a:	60c4      	str	r4, [r0, #12]
 800af2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800af30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af34:	b94c      	cbnz	r4, 800af4a <__pow5mult+0x66>
 800af36:	f240 2171 	movw	r1, #625	; 0x271
 800af3a:	4630      	mov	r0, r6
 800af3c:	f7ff ff14 	bl	800ad68 <__i2b>
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	f8c8 0008 	str.w	r0, [r8, #8]
 800af48:	6003      	str	r3, [r0, #0]
 800af4a:	f04f 0900 	mov.w	r9, #0
 800af4e:	07eb      	lsls	r3, r5, #31
 800af50:	d50a      	bpl.n	800af68 <__pow5mult+0x84>
 800af52:	4639      	mov	r1, r7
 800af54:	4622      	mov	r2, r4
 800af56:	4630      	mov	r0, r6
 800af58:	f7ff ff1c 	bl	800ad94 <__multiply>
 800af5c:	4680      	mov	r8, r0
 800af5e:	4639      	mov	r1, r7
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff fe01 	bl	800ab68 <_Bfree>
 800af66:	4647      	mov	r7, r8
 800af68:	106d      	asrs	r5, r5, #1
 800af6a:	d00b      	beq.n	800af84 <__pow5mult+0xa0>
 800af6c:	6820      	ldr	r0, [r4, #0]
 800af6e:	b938      	cbnz	r0, 800af80 <__pow5mult+0x9c>
 800af70:	4622      	mov	r2, r4
 800af72:	4621      	mov	r1, r4
 800af74:	4630      	mov	r0, r6
 800af76:	f7ff ff0d 	bl	800ad94 <__multiply>
 800af7a:	6020      	str	r0, [r4, #0]
 800af7c:	f8c0 9000 	str.w	r9, [r0]
 800af80:	4604      	mov	r4, r0
 800af82:	e7e4      	b.n	800af4e <__pow5mult+0x6a>
 800af84:	4638      	mov	r0, r7
 800af86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af8a:	bf00      	nop
 800af8c:	0800e0c0 	.word	0x0800e0c0
 800af90:	0800def2 	.word	0x0800def2
 800af94:	0800df72 	.word	0x0800df72

0800af98 <__lshift>:
 800af98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af9c:	460c      	mov	r4, r1
 800af9e:	4607      	mov	r7, r0
 800afa0:	4691      	mov	r9, r2
 800afa2:	6923      	ldr	r3, [r4, #16]
 800afa4:	6849      	ldr	r1, [r1, #4]
 800afa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afaa:	68a3      	ldr	r3, [r4, #8]
 800afac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afb0:	f108 0601 	add.w	r6, r8, #1
 800afb4:	42b3      	cmp	r3, r6
 800afb6:	db0b      	blt.n	800afd0 <__lshift+0x38>
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff fd95 	bl	800aae8 <_Balloc>
 800afbe:	4605      	mov	r5, r0
 800afc0:	b948      	cbnz	r0, 800afd6 <__lshift+0x3e>
 800afc2:	4602      	mov	r2, r0
 800afc4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800afc8:	4b27      	ldr	r3, [pc, #156]	; (800b068 <__lshift+0xd0>)
 800afca:	4828      	ldr	r0, [pc, #160]	; (800b06c <__lshift+0xd4>)
 800afcc:	f001 fe88 	bl	800cce0 <__assert_func>
 800afd0:	3101      	adds	r1, #1
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	e7ee      	b.n	800afb4 <__lshift+0x1c>
 800afd6:	2300      	movs	r3, #0
 800afd8:	f100 0114 	add.w	r1, r0, #20
 800afdc:	f100 0210 	add.w	r2, r0, #16
 800afe0:	4618      	mov	r0, r3
 800afe2:	4553      	cmp	r3, sl
 800afe4:	db33      	blt.n	800b04e <__lshift+0xb6>
 800afe6:	6920      	ldr	r0, [r4, #16]
 800afe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afec:	f104 0314 	add.w	r3, r4, #20
 800aff0:	f019 091f 	ands.w	r9, r9, #31
 800aff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aff8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800affc:	d02b      	beq.n	800b056 <__lshift+0xbe>
 800affe:	468a      	mov	sl, r1
 800b000:	2200      	movs	r2, #0
 800b002:	f1c9 0e20 	rsb	lr, r9, #32
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	fa00 f009 	lsl.w	r0, r0, r9
 800b00c:	4310      	orrs	r0, r2
 800b00e:	f84a 0b04 	str.w	r0, [sl], #4
 800b012:	f853 2b04 	ldr.w	r2, [r3], #4
 800b016:	459c      	cmp	ip, r3
 800b018:	fa22 f20e 	lsr.w	r2, r2, lr
 800b01c:	d8f3      	bhi.n	800b006 <__lshift+0x6e>
 800b01e:	ebac 0304 	sub.w	r3, ip, r4
 800b022:	3b15      	subs	r3, #21
 800b024:	f023 0303 	bic.w	r3, r3, #3
 800b028:	3304      	adds	r3, #4
 800b02a:	f104 0015 	add.w	r0, r4, #21
 800b02e:	4584      	cmp	ip, r0
 800b030:	bf38      	it	cc
 800b032:	2304      	movcc	r3, #4
 800b034:	50ca      	str	r2, [r1, r3]
 800b036:	b10a      	cbz	r2, 800b03c <__lshift+0xa4>
 800b038:	f108 0602 	add.w	r6, r8, #2
 800b03c:	3e01      	subs	r6, #1
 800b03e:	4638      	mov	r0, r7
 800b040:	4621      	mov	r1, r4
 800b042:	612e      	str	r6, [r5, #16]
 800b044:	f7ff fd90 	bl	800ab68 <_Bfree>
 800b048:	4628      	mov	r0, r5
 800b04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b052:	3301      	adds	r3, #1
 800b054:	e7c5      	b.n	800afe2 <__lshift+0x4a>
 800b056:	3904      	subs	r1, #4
 800b058:	f853 2b04 	ldr.w	r2, [r3], #4
 800b05c:	459c      	cmp	ip, r3
 800b05e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b062:	d8f9      	bhi.n	800b058 <__lshift+0xc0>
 800b064:	e7ea      	b.n	800b03c <__lshift+0xa4>
 800b066:	bf00      	nop
 800b068:	0800df61 	.word	0x0800df61
 800b06c:	0800df72 	.word	0x0800df72

0800b070 <__mcmp>:
 800b070:	4603      	mov	r3, r0
 800b072:	690a      	ldr	r2, [r1, #16]
 800b074:	6900      	ldr	r0, [r0, #16]
 800b076:	b530      	push	{r4, r5, lr}
 800b078:	1a80      	subs	r0, r0, r2
 800b07a:	d10d      	bne.n	800b098 <__mcmp+0x28>
 800b07c:	3314      	adds	r3, #20
 800b07e:	3114      	adds	r1, #20
 800b080:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b084:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b088:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b08c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b090:	4295      	cmp	r5, r2
 800b092:	d002      	beq.n	800b09a <__mcmp+0x2a>
 800b094:	d304      	bcc.n	800b0a0 <__mcmp+0x30>
 800b096:	2001      	movs	r0, #1
 800b098:	bd30      	pop	{r4, r5, pc}
 800b09a:	42a3      	cmp	r3, r4
 800b09c:	d3f4      	bcc.n	800b088 <__mcmp+0x18>
 800b09e:	e7fb      	b.n	800b098 <__mcmp+0x28>
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	e7f8      	b.n	800b098 <__mcmp+0x28>
	...

0800b0a8 <__mdiff>:
 800b0a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	460d      	mov	r5, r1
 800b0ae:	4607      	mov	r7, r0
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	f7ff ffdb 	bl	800b070 <__mcmp>
 800b0ba:	1e06      	subs	r6, r0, #0
 800b0bc:	d111      	bne.n	800b0e2 <__mdiff+0x3a>
 800b0be:	4631      	mov	r1, r6
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	f7ff fd11 	bl	800aae8 <_Balloc>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	b928      	cbnz	r0, 800b0d6 <__mdiff+0x2e>
 800b0ca:	f240 2137 	movw	r1, #567	; 0x237
 800b0ce:	4b3a      	ldr	r3, [pc, #232]	; (800b1b8 <__mdiff+0x110>)
 800b0d0:	483a      	ldr	r0, [pc, #232]	; (800b1bc <__mdiff+0x114>)
 800b0d2:	f001 fe05 	bl	800cce0 <__assert_func>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b0dc:	4610      	mov	r0, r2
 800b0de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e2:	bfa4      	itt	ge
 800b0e4:	4623      	movge	r3, r4
 800b0e6:	462c      	movge	r4, r5
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	6861      	ldr	r1, [r4, #4]
 800b0ec:	bfa6      	itte	ge
 800b0ee:	461d      	movge	r5, r3
 800b0f0:	2600      	movge	r6, #0
 800b0f2:	2601      	movlt	r6, #1
 800b0f4:	f7ff fcf8 	bl	800aae8 <_Balloc>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	b918      	cbnz	r0, 800b104 <__mdiff+0x5c>
 800b0fc:	f240 2145 	movw	r1, #581	; 0x245
 800b100:	4b2d      	ldr	r3, [pc, #180]	; (800b1b8 <__mdiff+0x110>)
 800b102:	e7e5      	b.n	800b0d0 <__mdiff+0x28>
 800b104:	f102 0814 	add.w	r8, r2, #20
 800b108:	46c2      	mov	sl, r8
 800b10a:	f04f 0c00 	mov.w	ip, #0
 800b10e:	6927      	ldr	r7, [r4, #16]
 800b110:	60c6      	str	r6, [r0, #12]
 800b112:	692e      	ldr	r6, [r5, #16]
 800b114:	f104 0014 	add.w	r0, r4, #20
 800b118:	f105 0914 	add.w	r9, r5, #20
 800b11c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b120:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b124:	3410      	adds	r4, #16
 800b126:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b12a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b12e:	fa1f f18b 	uxth.w	r1, fp
 800b132:	4461      	add	r1, ip
 800b134:	fa1f fc83 	uxth.w	ip, r3
 800b138:	0c1b      	lsrs	r3, r3, #16
 800b13a:	eba1 010c 	sub.w	r1, r1, ip
 800b13e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b142:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b146:	b289      	uxth	r1, r1
 800b148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b14c:	454e      	cmp	r6, r9
 800b14e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b152:	f84a 1b04 	str.w	r1, [sl], #4
 800b156:	d8e6      	bhi.n	800b126 <__mdiff+0x7e>
 800b158:	1b73      	subs	r3, r6, r5
 800b15a:	3b15      	subs	r3, #21
 800b15c:	f023 0303 	bic.w	r3, r3, #3
 800b160:	3515      	adds	r5, #21
 800b162:	3304      	adds	r3, #4
 800b164:	42ae      	cmp	r6, r5
 800b166:	bf38      	it	cc
 800b168:	2304      	movcc	r3, #4
 800b16a:	4418      	add	r0, r3
 800b16c:	4443      	add	r3, r8
 800b16e:	461e      	mov	r6, r3
 800b170:	4605      	mov	r5, r0
 800b172:	4575      	cmp	r5, lr
 800b174:	d30e      	bcc.n	800b194 <__mdiff+0xec>
 800b176:	f10e 0103 	add.w	r1, lr, #3
 800b17a:	1a09      	subs	r1, r1, r0
 800b17c:	f021 0103 	bic.w	r1, r1, #3
 800b180:	3803      	subs	r0, #3
 800b182:	4586      	cmp	lr, r0
 800b184:	bf38      	it	cc
 800b186:	2100      	movcc	r1, #0
 800b188:	440b      	add	r3, r1
 800b18a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b18e:	b189      	cbz	r1, 800b1b4 <__mdiff+0x10c>
 800b190:	6117      	str	r7, [r2, #16]
 800b192:	e7a3      	b.n	800b0dc <__mdiff+0x34>
 800b194:	f855 8b04 	ldr.w	r8, [r5], #4
 800b198:	fa1f f188 	uxth.w	r1, r8
 800b19c:	4461      	add	r1, ip
 800b19e:	140c      	asrs	r4, r1, #16
 800b1a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1a4:	b289      	uxth	r1, r1
 800b1a6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1aa:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b1ae:	f846 1b04 	str.w	r1, [r6], #4
 800b1b2:	e7de      	b.n	800b172 <__mdiff+0xca>
 800b1b4:	3f01      	subs	r7, #1
 800b1b6:	e7e8      	b.n	800b18a <__mdiff+0xe2>
 800b1b8:	0800df61 	.word	0x0800df61
 800b1bc:	0800df72 	.word	0x0800df72

0800b1c0 <__ulp>:
 800b1c0:	4b0e      	ldr	r3, [pc, #56]	; (800b1fc <__ulp+0x3c>)
 800b1c2:	400b      	ands	r3, r1
 800b1c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	dc08      	bgt.n	800b1de <__ulp+0x1e>
 800b1cc:	425b      	negs	r3, r3
 800b1ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b1d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1d6:	da04      	bge.n	800b1e2 <__ulp+0x22>
 800b1d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1dc:	4113      	asrs	r3, r2
 800b1de:	2200      	movs	r2, #0
 800b1e0:	e008      	b.n	800b1f4 <__ulp+0x34>
 800b1e2:	f1a2 0314 	sub.w	r3, r2, #20
 800b1e6:	2b1e      	cmp	r3, #30
 800b1e8:	bfd6      	itet	le
 800b1ea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b1ee:	2201      	movgt	r2, #1
 800b1f0:	40da      	lsrle	r2, r3
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	7ff00000 	.word	0x7ff00000

0800b200 <__b2d>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	6905      	ldr	r5, [r0, #16]
 800b204:	f100 0714 	add.w	r7, r0, #20
 800b208:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b20c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b210:	1f2e      	subs	r6, r5, #4
 800b212:	4620      	mov	r0, r4
 800b214:	f7ff fd5a 	bl	800accc <__hi0bits>
 800b218:	f1c0 0220 	rsb	r2, r0, #32
 800b21c:	280a      	cmp	r0, #10
 800b21e:	4603      	mov	r3, r0
 800b220:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b28c <__b2d+0x8c>
 800b224:	600a      	str	r2, [r1, #0]
 800b226:	dc12      	bgt.n	800b24e <__b2d+0x4e>
 800b228:	f1c0 0e0b 	rsb	lr, r0, #11
 800b22c:	fa24 f20e 	lsr.w	r2, r4, lr
 800b230:	42b7      	cmp	r7, r6
 800b232:	ea42 010c 	orr.w	r1, r2, ip
 800b236:	bf2c      	ite	cs
 800b238:	2200      	movcs	r2, #0
 800b23a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b23e:	3315      	adds	r3, #21
 800b240:	fa04 f303 	lsl.w	r3, r4, r3
 800b244:	fa22 f20e 	lsr.w	r2, r2, lr
 800b248:	431a      	orrs	r2, r3
 800b24a:	4610      	mov	r0, r2
 800b24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b24e:	42b7      	cmp	r7, r6
 800b250:	bf2e      	itee	cs
 800b252:	2200      	movcs	r2, #0
 800b254:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b258:	f1a5 0608 	subcc.w	r6, r5, #8
 800b25c:	3b0b      	subs	r3, #11
 800b25e:	d012      	beq.n	800b286 <__b2d+0x86>
 800b260:	f1c3 0520 	rsb	r5, r3, #32
 800b264:	fa22 f105 	lsr.w	r1, r2, r5
 800b268:	409c      	lsls	r4, r3
 800b26a:	430c      	orrs	r4, r1
 800b26c:	42be      	cmp	r6, r7
 800b26e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b272:	bf94      	ite	ls
 800b274:	2400      	movls	r4, #0
 800b276:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b27a:	409a      	lsls	r2, r3
 800b27c:	40ec      	lsrs	r4, r5
 800b27e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b282:	4322      	orrs	r2, r4
 800b284:	e7e1      	b.n	800b24a <__b2d+0x4a>
 800b286:	ea44 010c 	orr.w	r1, r4, ip
 800b28a:	e7de      	b.n	800b24a <__b2d+0x4a>
 800b28c:	3ff00000 	.word	0x3ff00000

0800b290 <__d2b>:
 800b290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b292:	2101      	movs	r1, #1
 800b294:	4617      	mov	r7, r2
 800b296:	461c      	mov	r4, r3
 800b298:	9e08      	ldr	r6, [sp, #32]
 800b29a:	f7ff fc25 	bl	800aae8 <_Balloc>
 800b29e:	4605      	mov	r5, r0
 800b2a0:	b930      	cbnz	r0, 800b2b0 <__d2b+0x20>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	f240 310f 	movw	r1, #783	; 0x30f
 800b2a8:	4b22      	ldr	r3, [pc, #136]	; (800b334 <__d2b+0xa4>)
 800b2aa:	4823      	ldr	r0, [pc, #140]	; (800b338 <__d2b+0xa8>)
 800b2ac:	f001 fd18 	bl	800cce0 <__assert_func>
 800b2b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b2b4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b2b8:	bb24      	cbnz	r4, 800b304 <__d2b+0x74>
 800b2ba:	2f00      	cmp	r7, #0
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	d026      	beq.n	800b30e <__d2b+0x7e>
 800b2c0:	4668      	mov	r0, sp
 800b2c2:	9700      	str	r7, [sp, #0]
 800b2c4:	f7ff fd22 	bl	800ad0c <__lo0bits>
 800b2c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2cc:	b1e8      	cbz	r0, 800b30a <__d2b+0x7a>
 800b2ce:	f1c0 0320 	rsb	r3, r0, #32
 800b2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d6:	430b      	orrs	r3, r1
 800b2d8:	40c2      	lsrs	r2, r0
 800b2da:	616b      	str	r3, [r5, #20]
 800b2dc:	9201      	str	r2, [sp, #4]
 800b2de:	9b01      	ldr	r3, [sp, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bf14      	ite	ne
 800b2e4:	2102      	movne	r1, #2
 800b2e6:	2101      	moveq	r1, #1
 800b2e8:	61ab      	str	r3, [r5, #24]
 800b2ea:	6129      	str	r1, [r5, #16]
 800b2ec:	b1bc      	cbz	r4, 800b31e <__d2b+0x8e>
 800b2ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b2f2:	4404      	add	r4, r0
 800b2f4:	6034      	str	r4, [r6, #0]
 800b2f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fc:	6018      	str	r0, [r3, #0]
 800b2fe:	4628      	mov	r0, r5
 800b300:	b003      	add	sp, #12
 800b302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b308:	e7d7      	b.n	800b2ba <__d2b+0x2a>
 800b30a:	6169      	str	r1, [r5, #20]
 800b30c:	e7e7      	b.n	800b2de <__d2b+0x4e>
 800b30e:	a801      	add	r0, sp, #4
 800b310:	f7ff fcfc 	bl	800ad0c <__lo0bits>
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	2101      	movs	r1, #1
 800b318:	616b      	str	r3, [r5, #20]
 800b31a:	3020      	adds	r0, #32
 800b31c:	e7e5      	b.n	800b2ea <__d2b+0x5a>
 800b31e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b322:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b326:	6030      	str	r0, [r6, #0]
 800b328:	6918      	ldr	r0, [r3, #16]
 800b32a:	f7ff fccf 	bl	800accc <__hi0bits>
 800b32e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b332:	e7e2      	b.n	800b2fa <__d2b+0x6a>
 800b334:	0800df61 	.word	0x0800df61
 800b338:	0800df72 	.word	0x0800df72

0800b33c <__ratio>:
 800b33c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b340:	4688      	mov	r8, r1
 800b342:	4669      	mov	r1, sp
 800b344:	4681      	mov	r9, r0
 800b346:	f7ff ff5b 	bl	800b200 <__b2d>
 800b34a:	460f      	mov	r7, r1
 800b34c:	4604      	mov	r4, r0
 800b34e:	460d      	mov	r5, r1
 800b350:	4640      	mov	r0, r8
 800b352:	a901      	add	r1, sp, #4
 800b354:	f7ff ff54 	bl	800b200 <__b2d>
 800b358:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b35c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b360:	468b      	mov	fp, r1
 800b362:	eba3 0c02 	sub.w	ip, r3, r2
 800b366:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b36a:	1a9b      	subs	r3, r3, r2
 800b36c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b370:	2b00      	cmp	r3, #0
 800b372:	bfd5      	itete	le
 800b374:	460a      	movle	r2, r1
 800b376:	462a      	movgt	r2, r5
 800b378:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b37c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b380:	bfd8      	it	le
 800b382:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b386:	465b      	mov	r3, fp
 800b388:	4602      	mov	r2, r0
 800b38a:	4639      	mov	r1, r7
 800b38c:	4620      	mov	r0, r4
 800b38e:	f7f5 f9cd 	bl	800072c <__aeabi_ddiv>
 800b392:	b003      	add	sp, #12
 800b394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b398 <__copybits>:
 800b398:	3901      	subs	r1, #1
 800b39a:	b570      	push	{r4, r5, r6, lr}
 800b39c:	1149      	asrs	r1, r1, #5
 800b39e:	6914      	ldr	r4, [r2, #16]
 800b3a0:	3101      	adds	r1, #1
 800b3a2:	f102 0314 	add.w	r3, r2, #20
 800b3a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3ae:	1f05      	subs	r5, r0, #4
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	d30c      	bcc.n	800b3ce <__copybits+0x36>
 800b3b4:	1aa3      	subs	r3, r4, r2
 800b3b6:	3b11      	subs	r3, #17
 800b3b8:	f023 0303 	bic.w	r3, r3, #3
 800b3bc:	3211      	adds	r2, #17
 800b3be:	42a2      	cmp	r2, r4
 800b3c0:	bf88      	it	hi
 800b3c2:	2300      	movhi	r3, #0
 800b3c4:	4418      	add	r0, r3
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	4288      	cmp	r0, r1
 800b3ca:	d305      	bcc.n	800b3d8 <__copybits+0x40>
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
 800b3ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3d2:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3d6:	e7eb      	b.n	800b3b0 <__copybits+0x18>
 800b3d8:	f840 3b04 	str.w	r3, [r0], #4
 800b3dc:	e7f4      	b.n	800b3c8 <__copybits+0x30>

0800b3de <__any_on>:
 800b3de:	f100 0214 	add.w	r2, r0, #20
 800b3e2:	6900      	ldr	r0, [r0, #16]
 800b3e4:	114b      	asrs	r3, r1, #5
 800b3e6:	4298      	cmp	r0, r3
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	db11      	blt.n	800b410 <__any_on+0x32>
 800b3ec:	dd0a      	ble.n	800b404 <__any_on+0x26>
 800b3ee:	f011 011f 	ands.w	r1, r1, #31
 800b3f2:	d007      	beq.n	800b404 <__any_on+0x26>
 800b3f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3f8:	fa24 f001 	lsr.w	r0, r4, r1
 800b3fc:	fa00 f101 	lsl.w	r1, r0, r1
 800b400:	428c      	cmp	r4, r1
 800b402:	d10b      	bne.n	800b41c <__any_on+0x3e>
 800b404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b408:	4293      	cmp	r3, r2
 800b40a:	d803      	bhi.n	800b414 <__any_on+0x36>
 800b40c:	2000      	movs	r0, #0
 800b40e:	bd10      	pop	{r4, pc}
 800b410:	4603      	mov	r3, r0
 800b412:	e7f7      	b.n	800b404 <__any_on+0x26>
 800b414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b418:	2900      	cmp	r1, #0
 800b41a:	d0f5      	beq.n	800b408 <__any_on+0x2a>
 800b41c:	2001      	movs	r0, #1
 800b41e:	e7f6      	b.n	800b40e <__any_on+0x30>

0800b420 <sulp>:
 800b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b424:	460f      	mov	r7, r1
 800b426:	4690      	mov	r8, r2
 800b428:	f7ff feca 	bl	800b1c0 <__ulp>
 800b42c:	4604      	mov	r4, r0
 800b42e:	460d      	mov	r5, r1
 800b430:	f1b8 0f00 	cmp.w	r8, #0
 800b434:	d011      	beq.n	800b45a <sulp+0x3a>
 800b436:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b43a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b43e:	2b00      	cmp	r3, #0
 800b440:	dd0b      	ble.n	800b45a <sulp+0x3a>
 800b442:	2400      	movs	r4, #0
 800b444:	051b      	lsls	r3, r3, #20
 800b446:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b44a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b44e:	4622      	mov	r2, r4
 800b450:	462b      	mov	r3, r5
 800b452:	f7f5 f841 	bl	80004d8 <__aeabi_dmul>
 800b456:	4604      	mov	r4, r0
 800b458:	460d      	mov	r5, r1
 800b45a:	4620      	mov	r0, r4
 800b45c:	4629      	mov	r1, r5
 800b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b462:	0000      	movs	r0, r0
 800b464:	0000      	movs	r0, r0
	...

0800b468 <_strtod_l>:
 800b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	b09f      	sub	sp, #124	; 0x7c
 800b46e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b470:	2200      	movs	r2, #0
 800b472:	4604      	mov	r4, r0
 800b474:	921a      	str	r2, [sp, #104]	; 0x68
 800b476:	460d      	mov	r5, r1
 800b478:	f04f 0800 	mov.w	r8, #0
 800b47c:	f04f 0900 	mov.w	r9, #0
 800b480:	460a      	mov	r2, r1
 800b482:	9219      	str	r2, [sp, #100]	; 0x64
 800b484:	7811      	ldrb	r1, [r2, #0]
 800b486:	292b      	cmp	r1, #43	; 0x2b
 800b488:	d04a      	beq.n	800b520 <_strtod_l+0xb8>
 800b48a:	d838      	bhi.n	800b4fe <_strtod_l+0x96>
 800b48c:	290d      	cmp	r1, #13
 800b48e:	d832      	bhi.n	800b4f6 <_strtod_l+0x8e>
 800b490:	2908      	cmp	r1, #8
 800b492:	d832      	bhi.n	800b4fa <_strtod_l+0x92>
 800b494:	2900      	cmp	r1, #0
 800b496:	d03b      	beq.n	800b510 <_strtod_l+0xa8>
 800b498:	2200      	movs	r2, #0
 800b49a:	920e      	str	r2, [sp, #56]	; 0x38
 800b49c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b49e:	7832      	ldrb	r2, [r6, #0]
 800b4a0:	2a30      	cmp	r2, #48	; 0x30
 800b4a2:	f040 80b2 	bne.w	800b60a <_strtod_l+0x1a2>
 800b4a6:	7872      	ldrb	r2, [r6, #1]
 800b4a8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b4ac:	2a58      	cmp	r2, #88	; 0x58
 800b4ae:	d16e      	bne.n	800b58e <_strtod_l+0x126>
 800b4b0:	9302      	str	r3, [sp, #8]
 800b4b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	ab1a      	add	r3, sp, #104	; 0x68
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	4a8c      	ldr	r2, [pc, #560]	; (800b6f0 <_strtod_l+0x288>)
 800b4be:	ab1b      	add	r3, sp, #108	; 0x6c
 800b4c0:	a919      	add	r1, sp, #100	; 0x64
 800b4c2:	f001 fca7 	bl	800ce14 <__gethex>
 800b4c6:	f010 070f 	ands.w	r7, r0, #15
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	d005      	beq.n	800b4da <_strtod_l+0x72>
 800b4ce:	2f06      	cmp	r7, #6
 800b4d0:	d128      	bne.n	800b524 <_strtod_l+0xbc>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	3601      	adds	r6, #1
 800b4d6:	9619      	str	r6, [sp, #100]	; 0x64
 800b4d8:	930e      	str	r3, [sp, #56]	; 0x38
 800b4da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f040 85a0 	bne.w	800c022 <_strtod_l+0xbba>
 800b4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4e4:	b1cb      	cbz	r3, 800b51a <_strtod_l+0xb2>
 800b4e6:	4642      	mov	r2, r8
 800b4e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	b01f      	add	sp, #124	; 0x7c
 800b4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f6:	2920      	cmp	r1, #32
 800b4f8:	d1ce      	bne.n	800b498 <_strtod_l+0x30>
 800b4fa:	3201      	adds	r2, #1
 800b4fc:	e7c1      	b.n	800b482 <_strtod_l+0x1a>
 800b4fe:	292d      	cmp	r1, #45	; 0x2d
 800b500:	d1ca      	bne.n	800b498 <_strtod_l+0x30>
 800b502:	2101      	movs	r1, #1
 800b504:	910e      	str	r1, [sp, #56]	; 0x38
 800b506:	1c51      	adds	r1, r2, #1
 800b508:	9119      	str	r1, [sp, #100]	; 0x64
 800b50a:	7852      	ldrb	r2, [r2, #1]
 800b50c:	2a00      	cmp	r2, #0
 800b50e:	d1c5      	bne.n	800b49c <_strtod_l+0x34>
 800b510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b512:	9519      	str	r5, [sp, #100]	; 0x64
 800b514:	2b00      	cmp	r3, #0
 800b516:	f040 8582 	bne.w	800c01e <_strtod_l+0xbb6>
 800b51a:	4642      	mov	r2, r8
 800b51c:	464b      	mov	r3, r9
 800b51e:	e7e5      	b.n	800b4ec <_strtod_l+0x84>
 800b520:	2100      	movs	r1, #0
 800b522:	e7ef      	b.n	800b504 <_strtod_l+0x9c>
 800b524:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b526:	b13a      	cbz	r2, 800b538 <_strtod_l+0xd0>
 800b528:	2135      	movs	r1, #53	; 0x35
 800b52a:	a81c      	add	r0, sp, #112	; 0x70
 800b52c:	f7ff ff34 	bl	800b398 <__copybits>
 800b530:	4620      	mov	r0, r4
 800b532:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b534:	f7ff fb18 	bl	800ab68 <_Bfree>
 800b538:	3f01      	subs	r7, #1
 800b53a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b53c:	2f04      	cmp	r7, #4
 800b53e:	d806      	bhi.n	800b54e <_strtod_l+0xe6>
 800b540:	e8df f007 	tbb	[pc, r7]
 800b544:	201d0314 	.word	0x201d0314
 800b548:	14          	.byte	0x14
 800b549:	00          	.byte	0x00
 800b54a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800b54e:	05e9      	lsls	r1, r5, #23
 800b550:	bf48      	it	mi
 800b552:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b556:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b55a:	0d1b      	lsrs	r3, r3, #20
 800b55c:	051b      	lsls	r3, r3, #20
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1bb      	bne.n	800b4da <_strtod_l+0x72>
 800b562:	f7fe fb09 	bl	8009b78 <__errno>
 800b566:	2322      	movs	r3, #34	; 0x22
 800b568:	6003      	str	r3, [r0, #0]
 800b56a:	e7b6      	b.n	800b4da <_strtod_l+0x72>
 800b56c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b570:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800b574:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b578:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b57c:	e7e7      	b.n	800b54e <_strtod_l+0xe6>
 800b57e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b6f4 <_strtod_l+0x28c>
 800b582:	e7e4      	b.n	800b54e <_strtod_l+0xe6>
 800b584:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b588:	f04f 38ff 	mov.w	r8, #4294967295
 800b58c:	e7df      	b.n	800b54e <_strtod_l+0xe6>
 800b58e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b590:	1c5a      	adds	r2, r3, #1
 800b592:	9219      	str	r2, [sp, #100]	; 0x64
 800b594:	785b      	ldrb	r3, [r3, #1]
 800b596:	2b30      	cmp	r3, #48	; 0x30
 800b598:	d0f9      	beq.n	800b58e <_strtod_l+0x126>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d09d      	beq.n	800b4da <_strtod_l+0x72>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	f04f 0a00 	mov.w	sl, #0
 800b5a4:	220a      	movs	r2, #10
 800b5a6:	46d3      	mov	fp, sl
 800b5a8:	9305      	str	r3, [sp, #20]
 800b5aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b5ac:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b5b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5b2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b5b4:	7806      	ldrb	r6, [r0, #0]
 800b5b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b5ba:	b2d9      	uxtb	r1, r3
 800b5bc:	2909      	cmp	r1, #9
 800b5be:	d926      	bls.n	800b60e <_strtod_l+0x1a6>
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	494d      	ldr	r1, [pc, #308]	; (800b6f8 <_strtod_l+0x290>)
 800b5c4:	f7fe fa7b 	bl	8009abe <strncmp>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d030      	beq.n	800b62e <_strtod_l+0x1c6>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	4632      	mov	r2, r6
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	465e      	mov	r6, fp
 800b5d4:	9008      	str	r0, [sp, #32]
 800b5d6:	2a65      	cmp	r2, #101	; 0x65
 800b5d8:	d001      	beq.n	800b5de <_strtod_l+0x176>
 800b5da:	2a45      	cmp	r2, #69	; 0x45
 800b5dc:	d113      	bne.n	800b606 <_strtod_l+0x19e>
 800b5de:	b91e      	cbnz	r6, 800b5e8 <_strtod_l+0x180>
 800b5e0:	9a05      	ldr	r2, [sp, #20]
 800b5e2:	4302      	orrs	r2, r0
 800b5e4:	d094      	beq.n	800b510 <_strtod_l+0xa8>
 800b5e6:	2600      	movs	r6, #0
 800b5e8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b5ea:	1c6a      	adds	r2, r5, #1
 800b5ec:	9219      	str	r2, [sp, #100]	; 0x64
 800b5ee:	786a      	ldrb	r2, [r5, #1]
 800b5f0:	2a2b      	cmp	r2, #43	; 0x2b
 800b5f2:	d074      	beq.n	800b6de <_strtod_l+0x276>
 800b5f4:	2a2d      	cmp	r2, #45	; 0x2d
 800b5f6:	d078      	beq.n	800b6ea <_strtod_l+0x282>
 800b5f8:	f04f 0c00 	mov.w	ip, #0
 800b5fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b600:	2909      	cmp	r1, #9
 800b602:	d97f      	bls.n	800b704 <_strtod_l+0x29c>
 800b604:	9519      	str	r5, [sp, #100]	; 0x64
 800b606:	2700      	movs	r7, #0
 800b608:	e09e      	b.n	800b748 <_strtod_l+0x2e0>
 800b60a:	2300      	movs	r3, #0
 800b60c:	e7c8      	b.n	800b5a0 <_strtod_l+0x138>
 800b60e:	f1bb 0f08 	cmp.w	fp, #8
 800b612:	bfd8      	it	le
 800b614:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800b616:	f100 0001 	add.w	r0, r0, #1
 800b61a:	bfd6      	itet	le
 800b61c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b620:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b624:	930a      	strle	r3, [sp, #40]	; 0x28
 800b626:	f10b 0b01 	add.w	fp, fp, #1
 800b62a:	9019      	str	r0, [sp, #100]	; 0x64
 800b62c:	e7c1      	b.n	800b5b2 <_strtod_l+0x14a>
 800b62e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	9219      	str	r2, [sp, #100]	; 0x64
 800b634:	785a      	ldrb	r2, [r3, #1]
 800b636:	f1bb 0f00 	cmp.w	fp, #0
 800b63a:	d037      	beq.n	800b6ac <_strtod_l+0x244>
 800b63c:	465e      	mov	r6, fp
 800b63e:	9008      	str	r0, [sp, #32]
 800b640:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b644:	2b09      	cmp	r3, #9
 800b646:	d912      	bls.n	800b66e <_strtod_l+0x206>
 800b648:	2301      	movs	r3, #1
 800b64a:	e7c4      	b.n	800b5d6 <_strtod_l+0x16e>
 800b64c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b64e:	3001      	adds	r0, #1
 800b650:	1c5a      	adds	r2, r3, #1
 800b652:	9219      	str	r2, [sp, #100]	; 0x64
 800b654:	785a      	ldrb	r2, [r3, #1]
 800b656:	2a30      	cmp	r2, #48	; 0x30
 800b658:	d0f8      	beq.n	800b64c <_strtod_l+0x1e4>
 800b65a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b65e:	2b08      	cmp	r3, #8
 800b660:	f200 84e4 	bhi.w	800c02c <_strtod_l+0xbc4>
 800b664:	9008      	str	r0, [sp, #32]
 800b666:	2000      	movs	r0, #0
 800b668:	4606      	mov	r6, r0
 800b66a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b66c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b66e:	3a30      	subs	r2, #48	; 0x30
 800b670:	f100 0301 	add.w	r3, r0, #1
 800b674:	d014      	beq.n	800b6a0 <_strtod_l+0x238>
 800b676:	9908      	ldr	r1, [sp, #32]
 800b678:	eb00 0c06 	add.w	ip, r0, r6
 800b67c:	4419      	add	r1, r3
 800b67e:	9108      	str	r1, [sp, #32]
 800b680:	4633      	mov	r3, r6
 800b682:	210a      	movs	r1, #10
 800b684:	4563      	cmp	r3, ip
 800b686:	d113      	bne.n	800b6b0 <_strtod_l+0x248>
 800b688:	1833      	adds	r3, r6, r0
 800b68a:	2b08      	cmp	r3, #8
 800b68c:	f106 0601 	add.w	r6, r6, #1
 800b690:	4406      	add	r6, r0
 800b692:	dc1a      	bgt.n	800b6ca <_strtod_l+0x262>
 800b694:	230a      	movs	r3, #10
 800b696:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b698:	fb03 2301 	mla	r3, r3, r1, r2
 800b69c:	930a      	str	r3, [sp, #40]	; 0x28
 800b69e:	2300      	movs	r3, #0
 800b6a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	1c51      	adds	r1, r2, #1
 800b6a6:	9119      	str	r1, [sp, #100]	; 0x64
 800b6a8:	7852      	ldrb	r2, [r2, #1]
 800b6aa:	e7c9      	b.n	800b640 <_strtod_l+0x1d8>
 800b6ac:	4658      	mov	r0, fp
 800b6ae:	e7d2      	b.n	800b656 <_strtod_l+0x1ee>
 800b6b0:	2b08      	cmp	r3, #8
 800b6b2:	f103 0301 	add.w	r3, r3, #1
 800b6b6:	dc03      	bgt.n	800b6c0 <_strtod_l+0x258>
 800b6b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b6ba:	434f      	muls	r7, r1
 800b6bc:	970a      	str	r7, [sp, #40]	; 0x28
 800b6be:	e7e1      	b.n	800b684 <_strtod_l+0x21c>
 800b6c0:	2b10      	cmp	r3, #16
 800b6c2:	bfd8      	it	le
 800b6c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b6c8:	e7dc      	b.n	800b684 <_strtod_l+0x21c>
 800b6ca:	2e10      	cmp	r6, #16
 800b6cc:	bfdc      	itt	le
 800b6ce:	230a      	movle	r3, #10
 800b6d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b6d4:	e7e3      	b.n	800b69e <_strtod_l+0x236>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	9308      	str	r3, [sp, #32]
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e780      	b.n	800b5e0 <_strtod_l+0x178>
 800b6de:	f04f 0c00 	mov.w	ip, #0
 800b6e2:	1caa      	adds	r2, r5, #2
 800b6e4:	9219      	str	r2, [sp, #100]	; 0x64
 800b6e6:	78aa      	ldrb	r2, [r5, #2]
 800b6e8:	e788      	b.n	800b5fc <_strtod_l+0x194>
 800b6ea:	f04f 0c01 	mov.w	ip, #1
 800b6ee:	e7f8      	b.n	800b6e2 <_strtod_l+0x27a>
 800b6f0:	0800e0d0 	.word	0x0800e0d0
 800b6f4:	7ff00000 	.word	0x7ff00000
 800b6f8:	0800e0cc 	.word	0x0800e0cc
 800b6fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b6fe:	1c51      	adds	r1, r2, #1
 800b700:	9119      	str	r1, [sp, #100]	; 0x64
 800b702:	7852      	ldrb	r2, [r2, #1]
 800b704:	2a30      	cmp	r2, #48	; 0x30
 800b706:	d0f9      	beq.n	800b6fc <_strtod_l+0x294>
 800b708:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b70c:	2908      	cmp	r1, #8
 800b70e:	f63f af7a 	bhi.w	800b606 <_strtod_l+0x19e>
 800b712:	3a30      	subs	r2, #48	; 0x30
 800b714:	9209      	str	r2, [sp, #36]	; 0x24
 800b716:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b718:	920c      	str	r2, [sp, #48]	; 0x30
 800b71a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b71c:	1c57      	adds	r7, r2, #1
 800b71e:	9719      	str	r7, [sp, #100]	; 0x64
 800b720:	7852      	ldrb	r2, [r2, #1]
 800b722:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b726:	f1be 0f09 	cmp.w	lr, #9
 800b72a:	d938      	bls.n	800b79e <_strtod_l+0x336>
 800b72c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b72e:	1a7f      	subs	r7, r7, r1
 800b730:	2f08      	cmp	r7, #8
 800b732:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b736:	dc03      	bgt.n	800b740 <_strtod_l+0x2d8>
 800b738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b73a:	428f      	cmp	r7, r1
 800b73c:	bfa8      	it	ge
 800b73e:	460f      	movge	r7, r1
 800b740:	f1bc 0f00 	cmp.w	ip, #0
 800b744:	d000      	beq.n	800b748 <_strtod_l+0x2e0>
 800b746:	427f      	negs	r7, r7
 800b748:	2e00      	cmp	r6, #0
 800b74a:	d14f      	bne.n	800b7ec <_strtod_l+0x384>
 800b74c:	9905      	ldr	r1, [sp, #20]
 800b74e:	4301      	orrs	r1, r0
 800b750:	f47f aec3 	bne.w	800b4da <_strtod_l+0x72>
 800b754:	2b00      	cmp	r3, #0
 800b756:	f47f aedb 	bne.w	800b510 <_strtod_l+0xa8>
 800b75a:	2a69      	cmp	r2, #105	; 0x69
 800b75c:	d029      	beq.n	800b7b2 <_strtod_l+0x34a>
 800b75e:	dc26      	bgt.n	800b7ae <_strtod_l+0x346>
 800b760:	2a49      	cmp	r2, #73	; 0x49
 800b762:	d026      	beq.n	800b7b2 <_strtod_l+0x34a>
 800b764:	2a4e      	cmp	r2, #78	; 0x4e
 800b766:	f47f aed3 	bne.w	800b510 <_strtod_l+0xa8>
 800b76a:	499a      	ldr	r1, [pc, #616]	; (800b9d4 <_strtod_l+0x56c>)
 800b76c:	a819      	add	r0, sp, #100	; 0x64
 800b76e:	f001 fd93 	bl	800d298 <__match>
 800b772:	2800      	cmp	r0, #0
 800b774:	f43f aecc 	beq.w	800b510 <_strtod_l+0xa8>
 800b778:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b28      	cmp	r3, #40	; 0x28
 800b77e:	d12f      	bne.n	800b7e0 <_strtod_l+0x378>
 800b780:	4995      	ldr	r1, [pc, #596]	; (800b9d8 <_strtod_l+0x570>)
 800b782:	aa1c      	add	r2, sp, #112	; 0x70
 800b784:	a819      	add	r0, sp, #100	; 0x64
 800b786:	f001 fd9b 	bl	800d2c0 <__hexnan>
 800b78a:	2805      	cmp	r0, #5
 800b78c:	d128      	bne.n	800b7e0 <_strtod_l+0x378>
 800b78e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b790:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800b794:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b798:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b79c:	e69d      	b.n	800b4da <_strtod_l+0x72>
 800b79e:	210a      	movs	r1, #10
 800b7a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b7a2:	fb01 2107 	mla	r1, r1, r7, r2
 800b7a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b7aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ac:	e7b5      	b.n	800b71a <_strtod_l+0x2b2>
 800b7ae:	2a6e      	cmp	r2, #110	; 0x6e
 800b7b0:	e7d9      	b.n	800b766 <_strtod_l+0x2fe>
 800b7b2:	498a      	ldr	r1, [pc, #552]	; (800b9dc <_strtod_l+0x574>)
 800b7b4:	a819      	add	r0, sp, #100	; 0x64
 800b7b6:	f001 fd6f 	bl	800d298 <__match>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	f43f aea8 	beq.w	800b510 <_strtod_l+0xa8>
 800b7c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b7c2:	4987      	ldr	r1, [pc, #540]	; (800b9e0 <_strtod_l+0x578>)
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	a819      	add	r0, sp, #100	; 0x64
 800b7c8:	9319      	str	r3, [sp, #100]	; 0x64
 800b7ca:	f001 fd65 	bl	800d298 <__match>
 800b7ce:	b910      	cbnz	r0, 800b7d6 <_strtod_l+0x36e>
 800b7d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	9319      	str	r3, [sp, #100]	; 0x64
 800b7d6:	f04f 0800 	mov.w	r8, #0
 800b7da:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800b9e4 <_strtod_l+0x57c>
 800b7de:	e67c      	b.n	800b4da <_strtod_l+0x72>
 800b7e0:	4881      	ldr	r0, [pc, #516]	; (800b9e8 <_strtod_l+0x580>)
 800b7e2:	f001 fa77 	bl	800ccd4 <nan>
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4689      	mov	r9, r1
 800b7ea:	e676      	b.n	800b4da <_strtod_l+0x72>
 800b7ec:	9b08      	ldr	r3, [sp, #32]
 800b7ee:	f1bb 0f00 	cmp.w	fp, #0
 800b7f2:	bf08      	it	eq
 800b7f4:	46b3      	moveq	fp, r6
 800b7f6:	1afb      	subs	r3, r7, r3
 800b7f8:	2e10      	cmp	r6, #16
 800b7fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b7fc:	4635      	mov	r5, r6
 800b7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b800:	bfa8      	it	ge
 800b802:	2510      	movge	r5, #16
 800b804:	f7f4 fdee 	bl	80003e4 <__aeabi_ui2d>
 800b808:	2e09      	cmp	r6, #9
 800b80a:	4680      	mov	r8, r0
 800b80c:	4689      	mov	r9, r1
 800b80e:	dd13      	ble.n	800b838 <_strtod_l+0x3d0>
 800b810:	4b76      	ldr	r3, [pc, #472]	; (800b9ec <_strtod_l+0x584>)
 800b812:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b816:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b81a:	f7f4 fe5d 	bl	80004d8 <__aeabi_dmul>
 800b81e:	4680      	mov	r8, r0
 800b820:	4650      	mov	r0, sl
 800b822:	4689      	mov	r9, r1
 800b824:	f7f4 fdde 	bl	80003e4 <__aeabi_ui2d>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4640      	mov	r0, r8
 800b82e:	4649      	mov	r1, r9
 800b830:	f7f4 fc9c 	bl	800016c <__adddf3>
 800b834:	4680      	mov	r8, r0
 800b836:	4689      	mov	r9, r1
 800b838:	2e0f      	cmp	r6, #15
 800b83a:	dc36      	bgt.n	800b8aa <_strtod_l+0x442>
 800b83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f43f ae4b 	beq.w	800b4da <_strtod_l+0x72>
 800b844:	dd22      	ble.n	800b88c <_strtod_l+0x424>
 800b846:	2b16      	cmp	r3, #22
 800b848:	dc09      	bgt.n	800b85e <_strtod_l+0x3f6>
 800b84a:	4968      	ldr	r1, [pc, #416]	; (800b9ec <_strtod_l+0x584>)
 800b84c:	4642      	mov	r2, r8
 800b84e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b852:	464b      	mov	r3, r9
 800b854:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b858:	f7f4 fe3e 	bl	80004d8 <__aeabi_dmul>
 800b85c:	e7c3      	b.n	800b7e6 <_strtod_l+0x37e>
 800b85e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b860:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b864:	4293      	cmp	r3, r2
 800b866:	db20      	blt.n	800b8aa <_strtod_l+0x442>
 800b868:	4c60      	ldr	r4, [pc, #384]	; (800b9ec <_strtod_l+0x584>)
 800b86a:	f1c6 060f 	rsb	r6, r6, #15
 800b86e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b872:	4642      	mov	r2, r8
 800b874:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b878:	464b      	mov	r3, r9
 800b87a:	f7f4 fe2d 	bl	80004d8 <__aeabi_dmul>
 800b87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b880:	1b9e      	subs	r6, r3, r6
 800b882:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b886:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b88a:	e7e5      	b.n	800b858 <_strtod_l+0x3f0>
 800b88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b88e:	3316      	adds	r3, #22
 800b890:	db0b      	blt.n	800b8aa <_strtod_l+0x442>
 800b892:	9b08      	ldr	r3, [sp, #32]
 800b894:	4640      	mov	r0, r8
 800b896:	1bdf      	subs	r7, r3, r7
 800b898:	4b54      	ldr	r3, [pc, #336]	; (800b9ec <_strtod_l+0x584>)
 800b89a:	4649      	mov	r1, r9
 800b89c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b8a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8a4:	f7f4 ff42 	bl	800072c <__aeabi_ddiv>
 800b8a8:	e79d      	b.n	800b7e6 <_strtod_l+0x37e>
 800b8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ac:	1b75      	subs	r5, r6, r5
 800b8ae:	441d      	add	r5, r3
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	dd70      	ble.n	800b996 <_strtod_l+0x52e>
 800b8b4:	f015 030f 	ands.w	r3, r5, #15
 800b8b8:	d00a      	beq.n	800b8d0 <_strtod_l+0x468>
 800b8ba:	494c      	ldr	r1, [pc, #304]	; (800b9ec <_strtod_l+0x584>)
 800b8bc:	4642      	mov	r2, r8
 800b8be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8c6:	464b      	mov	r3, r9
 800b8c8:	f7f4 fe06 	bl	80004d8 <__aeabi_dmul>
 800b8cc:	4680      	mov	r8, r0
 800b8ce:	4689      	mov	r9, r1
 800b8d0:	f035 050f 	bics.w	r5, r5, #15
 800b8d4:	d04d      	beq.n	800b972 <_strtod_l+0x50a>
 800b8d6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b8da:	dd22      	ble.n	800b922 <_strtod_l+0x4ba>
 800b8dc:	2600      	movs	r6, #0
 800b8de:	46b3      	mov	fp, r6
 800b8e0:	960b      	str	r6, [sp, #44]	; 0x2c
 800b8e2:	9608      	str	r6, [sp, #32]
 800b8e4:	2322      	movs	r3, #34	; 0x22
 800b8e6:	f04f 0800 	mov.w	r8, #0
 800b8ea:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b9e4 <_strtod_l+0x57c>
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f43f adf1 	beq.w	800b4da <_strtod_l+0x72>
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b8fc:	f7ff f934 	bl	800ab68 <_Bfree>
 800b900:	4620      	mov	r0, r4
 800b902:	9908      	ldr	r1, [sp, #32]
 800b904:	f7ff f930 	bl	800ab68 <_Bfree>
 800b908:	4659      	mov	r1, fp
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7ff f92c 	bl	800ab68 <_Bfree>
 800b910:	4620      	mov	r0, r4
 800b912:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b914:	f7ff f928 	bl	800ab68 <_Bfree>
 800b918:	4631      	mov	r1, r6
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7ff f924 	bl	800ab68 <_Bfree>
 800b920:	e5db      	b.n	800b4da <_strtod_l+0x72>
 800b922:	4b33      	ldr	r3, [pc, #204]	; (800b9f0 <_strtod_l+0x588>)
 800b924:	4640      	mov	r0, r8
 800b926:	9305      	str	r3, [sp, #20]
 800b928:	2300      	movs	r3, #0
 800b92a:	4649      	mov	r1, r9
 800b92c:	469a      	mov	sl, r3
 800b92e:	112d      	asrs	r5, r5, #4
 800b930:	2d01      	cmp	r5, #1
 800b932:	dc21      	bgt.n	800b978 <_strtod_l+0x510>
 800b934:	b10b      	cbz	r3, 800b93a <_strtod_l+0x4d2>
 800b936:	4680      	mov	r8, r0
 800b938:	4689      	mov	r9, r1
 800b93a:	492d      	ldr	r1, [pc, #180]	; (800b9f0 <_strtod_l+0x588>)
 800b93c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b940:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b944:	4642      	mov	r2, r8
 800b946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b94a:	464b      	mov	r3, r9
 800b94c:	f7f4 fdc4 	bl	80004d8 <__aeabi_dmul>
 800b950:	4b24      	ldr	r3, [pc, #144]	; (800b9e4 <_strtod_l+0x57c>)
 800b952:	460a      	mov	r2, r1
 800b954:	400b      	ands	r3, r1
 800b956:	4927      	ldr	r1, [pc, #156]	; (800b9f4 <_strtod_l+0x58c>)
 800b958:	4680      	mov	r8, r0
 800b95a:	428b      	cmp	r3, r1
 800b95c:	d8be      	bhi.n	800b8dc <_strtod_l+0x474>
 800b95e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b962:	428b      	cmp	r3, r1
 800b964:	bf86      	itte	hi
 800b966:	f04f 38ff 	movhi.w	r8, #4294967295
 800b96a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b9f8 <_strtod_l+0x590>
 800b96e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b972:	2300      	movs	r3, #0
 800b974:	9305      	str	r3, [sp, #20]
 800b976:	e07b      	b.n	800ba70 <_strtod_l+0x608>
 800b978:	07ea      	lsls	r2, r5, #31
 800b97a:	d505      	bpl.n	800b988 <_strtod_l+0x520>
 800b97c:	9b05      	ldr	r3, [sp, #20]
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fda9 	bl	80004d8 <__aeabi_dmul>
 800b986:	2301      	movs	r3, #1
 800b988:	9a05      	ldr	r2, [sp, #20]
 800b98a:	f10a 0a01 	add.w	sl, sl, #1
 800b98e:	3208      	adds	r2, #8
 800b990:	106d      	asrs	r5, r5, #1
 800b992:	9205      	str	r2, [sp, #20]
 800b994:	e7cc      	b.n	800b930 <_strtod_l+0x4c8>
 800b996:	d0ec      	beq.n	800b972 <_strtod_l+0x50a>
 800b998:	426d      	negs	r5, r5
 800b99a:	f015 020f 	ands.w	r2, r5, #15
 800b99e:	d00a      	beq.n	800b9b6 <_strtod_l+0x54e>
 800b9a0:	4b12      	ldr	r3, [pc, #72]	; (800b9ec <_strtod_l+0x584>)
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9a8:	4649      	mov	r1, r9
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f7f4 febd 	bl	800072c <__aeabi_ddiv>
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	4689      	mov	r9, r1
 800b9b6:	112d      	asrs	r5, r5, #4
 800b9b8:	d0db      	beq.n	800b972 <_strtod_l+0x50a>
 800b9ba:	2d1f      	cmp	r5, #31
 800b9bc:	dd1e      	ble.n	800b9fc <_strtod_l+0x594>
 800b9be:	2600      	movs	r6, #0
 800b9c0:	46b3      	mov	fp, r6
 800b9c2:	960b      	str	r6, [sp, #44]	; 0x2c
 800b9c4:	9608      	str	r6, [sp, #32]
 800b9c6:	2322      	movs	r3, #34	; 0x22
 800b9c8:	f04f 0800 	mov.w	r8, #0
 800b9cc:	f04f 0900 	mov.w	r9, #0
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	e78d      	b.n	800b8f0 <_strtod_l+0x488>
 800b9d4:	0800debb 	.word	0x0800debb
 800b9d8:	0800e0e4 	.word	0x0800e0e4
 800b9dc:	0800deb3 	.word	0x0800deb3
 800b9e0:	0800dee8 	.word	0x0800dee8
 800b9e4:	7ff00000 	.word	0x7ff00000
 800b9e8:	0800e290 	.word	0x0800e290
 800b9ec:	0800dff8 	.word	0x0800dff8
 800b9f0:	0800dfd0 	.word	0x0800dfd0
 800b9f4:	7ca00000 	.word	0x7ca00000
 800b9f8:	7fefffff 	.word	0x7fefffff
 800b9fc:	f015 0310 	ands.w	r3, r5, #16
 800ba00:	bf18      	it	ne
 800ba02:	236a      	movne	r3, #106	; 0x6a
 800ba04:	4640      	mov	r0, r8
 800ba06:	9305      	str	r3, [sp, #20]
 800ba08:	4649      	mov	r1, r9
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800bcd8 <_strtod_l+0x870>
 800ba10:	07ea      	lsls	r2, r5, #31
 800ba12:	d504      	bpl.n	800ba1e <_strtod_l+0x5b6>
 800ba14:	e9da 2300 	ldrd	r2, r3, [sl]
 800ba18:	f7f4 fd5e 	bl	80004d8 <__aeabi_dmul>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	106d      	asrs	r5, r5, #1
 800ba20:	f10a 0a08 	add.w	sl, sl, #8
 800ba24:	d1f4      	bne.n	800ba10 <_strtod_l+0x5a8>
 800ba26:	b10b      	cbz	r3, 800ba2c <_strtod_l+0x5c4>
 800ba28:	4680      	mov	r8, r0
 800ba2a:	4689      	mov	r9, r1
 800ba2c:	9b05      	ldr	r3, [sp, #20]
 800ba2e:	b1bb      	cbz	r3, 800ba60 <_strtod_l+0x5f8>
 800ba30:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ba34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	dd10      	ble.n	800ba60 <_strtod_l+0x5f8>
 800ba3e:	2b1f      	cmp	r3, #31
 800ba40:	f340 8128 	ble.w	800bc94 <_strtod_l+0x82c>
 800ba44:	2b34      	cmp	r3, #52	; 0x34
 800ba46:	bfd8      	it	le
 800ba48:	f04f 33ff 	movle.w	r3, #4294967295
 800ba4c:	f04f 0800 	mov.w	r8, #0
 800ba50:	bfcf      	iteee	gt
 800ba52:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ba56:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ba5a:	4093      	lslle	r3, r2
 800ba5c:	ea03 0901 	andle.w	r9, r3, r1
 800ba60:	2200      	movs	r2, #0
 800ba62:	2300      	movs	r3, #0
 800ba64:	4640      	mov	r0, r8
 800ba66:	4649      	mov	r1, r9
 800ba68:	f7f4 ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d1a6      	bne.n	800b9be <_strtod_l+0x556>
 800ba70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba72:	465a      	mov	r2, fp
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	4620      	mov	r0, r4
 800ba78:	4633      	mov	r3, r6
 800ba7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba7c:	f7ff f8dc 	bl	800ac38 <__s2b>
 800ba80:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba82:	2800      	cmp	r0, #0
 800ba84:	f43f af2a 	beq.w	800b8dc <_strtod_l+0x474>
 800ba88:	2600      	movs	r6, #0
 800ba8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba8c:	9b08      	ldr	r3, [sp, #32]
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	eba3 0307 	sub.w	r3, r3, r7
 800ba94:	bfa8      	it	ge
 800ba96:	2300      	movge	r3, #0
 800ba98:	46b3      	mov	fp, r6
 800ba9a:	9312      	str	r3, [sp, #72]	; 0x48
 800ba9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800baa0:	9316      	str	r3, [sp, #88]	; 0x58
 800baa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa4:	4620      	mov	r0, r4
 800baa6:	6859      	ldr	r1, [r3, #4]
 800baa8:	f7ff f81e 	bl	800aae8 <_Balloc>
 800baac:	9008      	str	r0, [sp, #32]
 800baae:	2800      	cmp	r0, #0
 800bab0:	f43f af18 	beq.w	800b8e4 <_strtod_l+0x47c>
 800bab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bab6:	300c      	adds	r0, #12
 800bab8:	691a      	ldr	r2, [r3, #16]
 800baba:	f103 010c 	add.w	r1, r3, #12
 800babe:	3202      	adds	r2, #2
 800bac0:	0092      	lsls	r2, r2, #2
 800bac2:	f7fe f894 	bl	8009bee <memcpy>
 800bac6:	ab1c      	add	r3, sp, #112	; 0x70
 800bac8:	9301      	str	r3, [sp, #4]
 800baca:	ab1b      	add	r3, sp, #108	; 0x6c
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	4642      	mov	r2, r8
 800bad0:	464b      	mov	r3, r9
 800bad2:	4620      	mov	r0, r4
 800bad4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800bad8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800badc:	f7ff fbd8 	bl	800b290 <__d2b>
 800bae0:	901a      	str	r0, [sp, #104]	; 0x68
 800bae2:	2800      	cmp	r0, #0
 800bae4:	f43f aefe 	beq.w	800b8e4 <_strtod_l+0x47c>
 800bae8:	2101      	movs	r1, #1
 800baea:	4620      	mov	r0, r4
 800baec:	f7ff f93c 	bl	800ad68 <__i2b>
 800baf0:	4683      	mov	fp, r0
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f43f aef6 	beq.w	800b8e4 <_strtod_l+0x47c>
 800baf8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bafa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bafc:	2f00      	cmp	r7, #0
 800bafe:	bfab      	itete	ge
 800bb00:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800bb02:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bb04:	eb07 0a03 	addge.w	sl, r7, r3
 800bb08:	1bdd      	sublt	r5, r3, r7
 800bb0a:	9b05      	ldr	r3, [sp, #20]
 800bb0c:	bfa8      	it	ge
 800bb0e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800bb10:	eba7 0703 	sub.w	r7, r7, r3
 800bb14:	4417      	add	r7, r2
 800bb16:	4b71      	ldr	r3, [pc, #452]	; (800bcdc <_strtod_l+0x874>)
 800bb18:	f107 37ff 	add.w	r7, r7, #4294967295
 800bb1c:	bfb8      	it	lt
 800bb1e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800bb22:	429f      	cmp	r7, r3
 800bb24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bb28:	f280 80c7 	bge.w	800bcba <_strtod_l+0x852>
 800bb2c:	1bdb      	subs	r3, r3, r7
 800bb2e:	2b1f      	cmp	r3, #31
 800bb30:	f04f 0101 	mov.w	r1, #1
 800bb34:	eba2 0203 	sub.w	r2, r2, r3
 800bb38:	f300 80b3 	bgt.w	800bca2 <_strtod_l+0x83a>
 800bb3c:	fa01 f303 	lsl.w	r3, r1, r3
 800bb40:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb42:	2300      	movs	r3, #0
 800bb44:	9310      	str	r3, [sp, #64]	; 0x40
 800bb46:	eb0a 0702 	add.w	r7, sl, r2
 800bb4a:	9b05      	ldr	r3, [sp, #20]
 800bb4c:	45ba      	cmp	sl, r7
 800bb4e:	4415      	add	r5, r2
 800bb50:	441d      	add	r5, r3
 800bb52:	4653      	mov	r3, sl
 800bb54:	bfa8      	it	ge
 800bb56:	463b      	movge	r3, r7
 800bb58:	42ab      	cmp	r3, r5
 800bb5a:	bfa8      	it	ge
 800bb5c:	462b      	movge	r3, r5
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	bfc2      	ittt	gt
 800bb62:	1aff      	subgt	r7, r7, r3
 800bb64:	1aed      	subgt	r5, r5, r3
 800bb66:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bb6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	dd17      	ble.n	800bba0 <_strtod_l+0x738>
 800bb70:	4659      	mov	r1, fp
 800bb72:	461a      	mov	r2, r3
 800bb74:	4620      	mov	r0, r4
 800bb76:	f7ff f9b5 	bl	800aee4 <__pow5mult>
 800bb7a:	4683      	mov	fp, r0
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	f43f aeb1 	beq.w	800b8e4 <_strtod_l+0x47c>
 800bb82:	4601      	mov	r1, r0
 800bb84:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bb86:	4620      	mov	r0, r4
 800bb88:	f7ff f904 	bl	800ad94 <__multiply>
 800bb8c:	900a      	str	r0, [sp, #40]	; 0x28
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f aea8 	beq.w	800b8e4 <_strtod_l+0x47c>
 800bb94:	4620      	mov	r0, r4
 800bb96:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bb98:	f7fe ffe6 	bl	800ab68 <_Bfree>
 800bb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb9e:	931a      	str	r3, [sp, #104]	; 0x68
 800bba0:	2f00      	cmp	r7, #0
 800bba2:	f300 808f 	bgt.w	800bcc4 <_strtod_l+0x85c>
 800bba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	dd08      	ble.n	800bbbe <_strtod_l+0x756>
 800bbac:	4620      	mov	r0, r4
 800bbae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bbb0:	9908      	ldr	r1, [sp, #32]
 800bbb2:	f7ff f997 	bl	800aee4 <__pow5mult>
 800bbb6:	9008      	str	r0, [sp, #32]
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	f43f ae93 	beq.w	800b8e4 <_strtod_l+0x47c>
 800bbbe:	2d00      	cmp	r5, #0
 800bbc0:	dd08      	ble.n	800bbd4 <_strtod_l+0x76c>
 800bbc2:	462a      	mov	r2, r5
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	9908      	ldr	r1, [sp, #32]
 800bbc8:	f7ff f9e6 	bl	800af98 <__lshift>
 800bbcc:	9008      	str	r0, [sp, #32]
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	f43f ae88 	beq.w	800b8e4 <_strtod_l+0x47c>
 800bbd4:	f1ba 0f00 	cmp.w	sl, #0
 800bbd8:	dd08      	ble.n	800bbec <_strtod_l+0x784>
 800bbda:	4659      	mov	r1, fp
 800bbdc:	4652      	mov	r2, sl
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7ff f9da 	bl	800af98 <__lshift>
 800bbe4:	4683      	mov	fp, r0
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f43f ae7c 	beq.w	800b8e4 <_strtod_l+0x47c>
 800bbec:	4620      	mov	r0, r4
 800bbee:	9a08      	ldr	r2, [sp, #32]
 800bbf0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bbf2:	f7ff fa59 	bl	800b0a8 <__mdiff>
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	f43f ae73 	beq.w	800b8e4 <_strtod_l+0x47c>
 800bbfe:	2500      	movs	r5, #0
 800bc00:	68c3      	ldr	r3, [r0, #12]
 800bc02:	4659      	mov	r1, fp
 800bc04:	60c5      	str	r5, [r0, #12]
 800bc06:	930a      	str	r3, [sp, #40]	; 0x28
 800bc08:	f7ff fa32 	bl	800b070 <__mcmp>
 800bc0c:	42a8      	cmp	r0, r5
 800bc0e:	da6b      	bge.n	800bce8 <_strtod_l+0x880>
 800bc10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc12:	ea53 0308 	orrs.w	r3, r3, r8
 800bc16:	f040 808f 	bne.w	800bd38 <_strtod_l+0x8d0>
 800bc1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f040 808a 	bne.w	800bd38 <_strtod_l+0x8d0>
 800bc24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc28:	0d1b      	lsrs	r3, r3, #20
 800bc2a:	051b      	lsls	r3, r3, #20
 800bc2c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bc30:	f240 8082 	bls.w	800bd38 <_strtod_l+0x8d0>
 800bc34:	6973      	ldr	r3, [r6, #20]
 800bc36:	b913      	cbnz	r3, 800bc3e <_strtod_l+0x7d6>
 800bc38:	6933      	ldr	r3, [r6, #16]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	dd7c      	ble.n	800bd38 <_strtod_l+0x8d0>
 800bc3e:	4631      	mov	r1, r6
 800bc40:	2201      	movs	r2, #1
 800bc42:	4620      	mov	r0, r4
 800bc44:	f7ff f9a8 	bl	800af98 <__lshift>
 800bc48:	4659      	mov	r1, fp
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	f7ff fa10 	bl	800b070 <__mcmp>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	dd71      	ble.n	800bd38 <_strtod_l+0x8d0>
 800bc54:	9905      	ldr	r1, [sp, #20]
 800bc56:	464b      	mov	r3, r9
 800bc58:	4a21      	ldr	r2, [pc, #132]	; (800bce0 <_strtod_l+0x878>)
 800bc5a:	2900      	cmp	r1, #0
 800bc5c:	f000 808d 	beq.w	800bd7a <_strtod_l+0x912>
 800bc60:	ea02 0109 	and.w	r1, r2, r9
 800bc64:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bc68:	f300 8087 	bgt.w	800bd7a <_strtod_l+0x912>
 800bc6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bc70:	f77f aea9 	ble.w	800b9c6 <_strtod_l+0x55e>
 800bc74:	4640      	mov	r0, r8
 800bc76:	4649      	mov	r1, r9
 800bc78:	4b1a      	ldr	r3, [pc, #104]	; (800bce4 <_strtod_l+0x87c>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f7f4 fc2c 	bl	80004d8 <__aeabi_dmul>
 800bc80:	4b17      	ldr	r3, [pc, #92]	; (800bce0 <_strtod_l+0x878>)
 800bc82:	4680      	mov	r8, r0
 800bc84:	400b      	ands	r3, r1
 800bc86:	4689      	mov	r9, r1
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f47f ae35 	bne.w	800b8f8 <_strtod_l+0x490>
 800bc8e:	2322      	movs	r3, #34	; 0x22
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	e631      	b.n	800b8f8 <_strtod_l+0x490>
 800bc94:	f04f 32ff 	mov.w	r2, #4294967295
 800bc98:	fa02 f303 	lsl.w	r3, r2, r3
 800bc9c:	ea03 0808 	and.w	r8, r3, r8
 800bca0:	e6de      	b.n	800ba60 <_strtod_l+0x5f8>
 800bca2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800bca6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800bcaa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800bcae:	37e2      	adds	r7, #226	; 0xe2
 800bcb0:	fa01 f307 	lsl.w	r3, r1, r7
 800bcb4:	9310      	str	r3, [sp, #64]	; 0x40
 800bcb6:	9113      	str	r1, [sp, #76]	; 0x4c
 800bcb8:	e745      	b.n	800bb46 <_strtod_l+0x6de>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	9310      	str	r3, [sp, #64]	; 0x40
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	9313      	str	r3, [sp, #76]	; 0x4c
 800bcc2:	e740      	b.n	800bb46 <_strtod_l+0x6de>
 800bcc4:	463a      	mov	r2, r7
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bcca:	f7ff f965 	bl	800af98 <__lshift>
 800bcce:	901a      	str	r0, [sp, #104]	; 0x68
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	f47f af68 	bne.w	800bba6 <_strtod_l+0x73e>
 800bcd6:	e605      	b.n	800b8e4 <_strtod_l+0x47c>
 800bcd8:	0800e0f8 	.word	0x0800e0f8
 800bcdc:	fffffc02 	.word	0xfffffc02
 800bce0:	7ff00000 	.word	0x7ff00000
 800bce4:	39500000 	.word	0x39500000
 800bce8:	46ca      	mov	sl, r9
 800bcea:	d165      	bne.n	800bdb8 <_strtod_l+0x950>
 800bcec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcf2:	b352      	cbz	r2, 800bd4a <_strtod_l+0x8e2>
 800bcf4:	4a9e      	ldr	r2, [pc, #632]	; (800bf70 <_strtod_l+0xb08>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d12a      	bne.n	800bd50 <_strtod_l+0x8e8>
 800bcfa:	9b05      	ldr	r3, [sp, #20]
 800bcfc:	4641      	mov	r1, r8
 800bcfe:	b1fb      	cbz	r3, 800bd40 <_strtod_l+0x8d8>
 800bd00:	4b9c      	ldr	r3, [pc, #624]	; (800bf74 <_strtod_l+0xb0c>)
 800bd02:	f04f 32ff 	mov.w	r2, #4294967295
 800bd06:	ea09 0303 	and.w	r3, r9, r3
 800bd0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd0e:	d81a      	bhi.n	800bd46 <_strtod_l+0x8de>
 800bd10:	0d1b      	lsrs	r3, r3, #20
 800bd12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd16:	fa02 f303 	lsl.w	r3, r2, r3
 800bd1a:	4299      	cmp	r1, r3
 800bd1c:	d118      	bne.n	800bd50 <_strtod_l+0x8e8>
 800bd1e:	4b96      	ldr	r3, [pc, #600]	; (800bf78 <_strtod_l+0xb10>)
 800bd20:	459a      	cmp	sl, r3
 800bd22:	d102      	bne.n	800bd2a <_strtod_l+0x8c2>
 800bd24:	3101      	adds	r1, #1
 800bd26:	f43f addd 	beq.w	800b8e4 <_strtod_l+0x47c>
 800bd2a:	f04f 0800 	mov.w	r8, #0
 800bd2e:	4b91      	ldr	r3, [pc, #580]	; (800bf74 <_strtod_l+0xb0c>)
 800bd30:	ea0a 0303 	and.w	r3, sl, r3
 800bd34:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bd38:	9b05      	ldr	r3, [sp, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d19a      	bne.n	800bc74 <_strtod_l+0x80c>
 800bd3e:	e5db      	b.n	800b8f8 <_strtod_l+0x490>
 800bd40:	f04f 33ff 	mov.w	r3, #4294967295
 800bd44:	e7e9      	b.n	800bd1a <_strtod_l+0x8b2>
 800bd46:	4613      	mov	r3, r2
 800bd48:	e7e7      	b.n	800bd1a <_strtod_l+0x8b2>
 800bd4a:	ea53 0308 	orrs.w	r3, r3, r8
 800bd4e:	d081      	beq.n	800bc54 <_strtod_l+0x7ec>
 800bd50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd52:	b1e3      	cbz	r3, 800bd8e <_strtod_l+0x926>
 800bd54:	ea13 0f0a 	tst.w	r3, sl
 800bd58:	d0ee      	beq.n	800bd38 <_strtod_l+0x8d0>
 800bd5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	4649      	mov	r1, r9
 800bd60:	9a05      	ldr	r2, [sp, #20]
 800bd62:	b1c3      	cbz	r3, 800bd96 <_strtod_l+0x92e>
 800bd64:	f7ff fb5c 	bl	800b420 <sulp>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bd70:	f7f4 f9fc 	bl	800016c <__adddf3>
 800bd74:	4680      	mov	r8, r0
 800bd76:	4689      	mov	r9, r1
 800bd78:	e7de      	b.n	800bd38 <_strtod_l+0x8d0>
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bd80:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bd84:	f04f 38ff 	mov.w	r8, #4294967295
 800bd88:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bd8c:	e7d4      	b.n	800bd38 <_strtod_l+0x8d0>
 800bd8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd90:	ea13 0f08 	tst.w	r3, r8
 800bd94:	e7e0      	b.n	800bd58 <_strtod_l+0x8f0>
 800bd96:	f7ff fb43 	bl	800b420 <sulp>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bda0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bda2:	f7f4 f9e1 	bl	8000168 <__aeabi_dsub>
 800bda6:	2200      	movs	r2, #0
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4680      	mov	r8, r0
 800bdac:	4689      	mov	r9, r1
 800bdae:	f7f4 fdfb 	bl	80009a8 <__aeabi_dcmpeq>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d0c0      	beq.n	800bd38 <_strtod_l+0x8d0>
 800bdb6:	e606      	b.n	800b9c6 <_strtod_l+0x55e>
 800bdb8:	4659      	mov	r1, fp
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7ff fabe 	bl	800b33c <__ratio>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdce:	f7f4 fdff 	bl	80009d0 <__aeabi_dcmple>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d06f      	beq.n	800beb6 <_strtod_l+0xa4e>
 800bdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d17c      	bne.n	800bed6 <_strtod_l+0xa6e>
 800bddc:	f1b8 0f00 	cmp.w	r8, #0
 800bde0:	d159      	bne.n	800be96 <_strtod_l+0xa2e>
 800bde2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d17b      	bne.n	800bee2 <_strtod_l+0xa7a>
 800bdea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdee:	2200      	movs	r2, #0
 800bdf0:	4b62      	ldr	r3, [pc, #392]	; (800bf7c <_strtod_l+0xb14>)
 800bdf2:	f7f4 fde3 	bl	80009bc <__aeabi_dcmplt>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d15a      	bne.n	800beb0 <_strtod_l+0xa48>
 800bdfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdfe:	2200      	movs	r2, #0
 800be00:	4b5f      	ldr	r3, [pc, #380]	; (800bf80 <_strtod_l+0xb18>)
 800be02:	f7f4 fb69 	bl	80004d8 <__aeabi_dmul>
 800be06:	4605      	mov	r5, r0
 800be08:	460f      	mov	r7, r1
 800be0a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800be0e:	9506      	str	r5, [sp, #24]
 800be10:	9307      	str	r3, [sp, #28]
 800be12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be16:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800be1a:	4b56      	ldr	r3, [pc, #344]	; (800bf74 <_strtod_l+0xb0c>)
 800be1c:	4a55      	ldr	r2, [pc, #340]	; (800bf74 <_strtod_l+0xb0c>)
 800be1e:	ea0a 0303 	and.w	r3, sl, r3
 800be22:	9313      	str	r3, [sp, #76]	; 0x4c
 800be24:	4b57      	ldr	r3, [pc, #348]	; (800bf84 <_strtod_l+0xb1c>)
 800be26:	ea0a 0202 	and.w	r2, sl, r2
 800be2a:	429a      	cmp	r2, r3
 800be2c:	f040 80b0 	bne.w	800bf90 <_strtod_l+0xb28>
 800be30:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800be34:	4640      	mov	r0, r8
 800be36:	4649      	mov	r1, r9
 800be38:	f7ff f9c2 	bl	800b1c0 <__ulp>
 800be3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be40:	f7f4 fb4a 	bl	80004d8 <__aeabi_dmul>
 800be44:	4642      	mov	r2, r8
 800be46:	464b      	mov	r3, r9
 800be48:	f7f4 f990 	bl	800016c <__adddf3>
 800be4c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800bf74 <_strtod_l+0xb0c>
 800be50:	4a4d      	ldr	r2, [pc, #308]	; (800bf88 <_strtod_l+0xb20>)
 800be52:	ea01 0a0a 	and.w	sl, r1, sl
 800be56:	4592      	cmp	sl, r2
 800be58:	4680      	mov	r8, r0
 800be5a:	d948      	bls.n	800beee <_strtod_l+0xa86>
 800be5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be5e:	4b46      	ldr	r3, [pc, #280]	; (800bf78 <_strtod_l+0xb10>)
 800be60:	429a      	cmp	r2, r3
 800be62:	d103      	bne.n	800be6c <_strtod_l+0xa04>
 800be64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be66:	3301      	adds	r3, #1
 800be68:	f43f ad3c 	beq.w	800b8e4 <_strtod_l+0x47c>
 800be6c:	f04f 38ff 	mov.w	r8, #4294967295
 800be70:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800bf78 <_strtod_l+0xb10>
 800be74:	4620      	mov	r0, r4
 800be76:	991a      	ldr	r1, [sp, #104]	; 0x68
 800be78:	f7fe fe76 	bl	800ab68 <_Bfree>
 800be7c:	4620      	mov	r0, r4
 800be7e:	9908      	ldr	r1, [sp, #32]
 800be80:	f7fe fe72 	bl	800ab68 <_Bfree>
 800be84:	4659      	mov	r1, fp
 800be86:	4620      	mov	r0, r4
 800be88:	f7fe fe6e 	bl	800ab68 <_Bfree>
 800be8c:	4631      	mov	r1, r6
 800be8e:	4620      	mov	r0, r4
 800be90:	f7fe fe6a 	bl	800ab68 <_Bfree>
 800be94:	e605      	b.n	800baa2 <_strtod_l+0x63a>
 800be96:	f1b8 0f01 	cmp.w	r8, #1
 800be9a:	d103      	bne.n	800bea4 <_strtod_l+0xa3c>
 800be9c:	f1b9 0f00 	cmp.w	r9, #0
 800bea0:	f43f ad91 	beq.w	800b9c6 <_strtod_l+0x55e>
 800bea4:	2200      	movs	r2, #0
 800bea6:	4b39      	ldr	r3, [pc, #228]	; (800bf8c <_strtod_l+0xb24>)
 800bea8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800beaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800beae:	e016      	b.n	800bede <_strtod_l+0xa76>
 800beb0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800beb2:	4f33      	ldr	r7, [pc, #204]	; (800bf80 <_strtod_l+0xb18>)
 800beb4:	e7a9      	b.n	800be0a <_strtod_l+0x9a2>
 800beb6:	4b32      	ldr	r3, [pc, #200]	; (800bf80 <_strtod_l+0xb18>)
 800beb8:	2200      	movs	r2, #0
 800beba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bebe:	f7f4 fb0b 	bl	80004d8 <__aeabi_dmul>
 800bec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bec4:	4605      	mov	r5, r0
 800bec6:	460f      	mov	r7, r1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d09e      	beq.n	800be0a <_strtod_l+0x9a2>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bed4:	e79d      	b.n	800be12 <_strtod_l+0x9aa>
 800bed6:	2200      	movs	r2, #0
 800bed8:	4b28      	ldr	r3, [pc, #160]	; (800bf7c <_strtod_l+0xb14>)
 800beda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bede:	4f27      	ldr	r7, [pc, #156]	; (800bf7c <_strtod_l+0xb14>)
 800bee0:	e797      	b.n	800be12 <_strtod_l+0x9aa>
 800bee2:	2200      	movs	r2, #0
 800bee4:	4b29      	ldr	r3, [pc, #164]	; (800bf8c <_strtod_l+0xb24>)
 800bee6:	4645      	mov	r5, r8
 800bee8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800beec:	e7f7      	b.n	800bede <_strtod_l+0xa76>
 800beee:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800bef2:	9b05      	ldr	r3, [sp, #20]
 800bef4:	46ca      	mov	sl, r9
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1bc      	bne.n	800be74 <_strtod_l+0xa0c>
 800befa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800befe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf00:	0d1b      	lsrs	r3, r3, #20
 800bf02:	051b      	lsls	r3, r3, #20
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d1b5      	bne.n	800be74 <_strtod_l+0xa0c>
 800bf08:	4628      	mov	r0, r5
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	f7f4 ff60 	bl	8000dd0 <__aeabi_d2lz>
 800bf10:	f7f4 fab4 	bl	800047c <__aeabi_l2d>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4628      	mov	r0, r5
 800bf1a:	4639      	mov	r1, r7
 800bf1c:	f7f4 f924 	bl	8000168 <__aeabi_dsub>
 800bf20:	460b      	mov	r3, r1
 800bf22:	4602      	mov	r2, r0
 800bf24:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800bf28:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bf2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf2e:	ea4a 0a08 	orr.w	sl, sl, r8
 800bf32:	ea5a 0a03 	orrs.w	sl, sl, r3
 800bf36:	d06c      	beq.n	800c012 <_strtod_l+0xbaa>
 800bf38:	a309      	add	r3, pc, #36	; (adr r3, 800bf60 <_strtod_l+0xaf8>)
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	f7f4 fd3d 	bl	80009bc <__aeabi_dcmplt>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	f47f acd8 	bne.w	800b8f8 <_strtod_l+0x490>
 800bf48:	a307      	add	r3, pc, #28	; (adr r3, 800bf68 <_strtod_l+0xb00>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf52:	f7f4 fd51 	bl	80009f8 <__aeabi_dcmpgt>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d08c      	beq.n	800be74 <_strtod_l+0xa0c>
 800bf5a:	e4cd      	b.n	800b8f8 <_strtod_l+0x490>
 800bf5c:	f3af 8000 	nop.w
 800bf60:	94a03595 	.word	0x94a03595
 800bf64:	3fdfffff 	.word	0x3fdfffff
 800bf68:	35afe535 	.word	0x35afe535
 800bf6c:	3fe00000 	.word	0x3fe00000
 800bf70:	000fffff 	.word	0x000fffff
 800bf74:	7ff00000 	.word	0x7ff00000
 800bf78:	7fefffff 	.word	0x7fefffff
 800bf7c:	3ff00000 	.word	0x3ff00000
 800bf80:	3fe00000 	.word	0x3fe00000
 800bf84:	7fe00000 	.word	0x7fe00000
 800bf88:	7c9fffff 	.word	0x7c9fffff
 800bf8c:	bff00000 	.word	0xbff00000
 800bf90:	9b05      	ldr	r3, [sp, #20]
 800bf92:	b333      	cbz	r3, 800bfe2 <_strtod_l+0xb7a>
 800bf94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf9a:	d822      	bhi.n	800bfe2 <_strtod_l+0xb7a>
 800bf9c:	a328      	add	r3, pc, #160	; (adr r3, 800c040 <_strtod_l+0xbd8>)
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	f7f4 fd13 	bl	80009d0 <__aeabi_dcmple>
 800bfaa:	b1a0      	cbz	r0, 800bfd6 <_strtod_l+0xb6e>
 800bfac:	4639      	mov	r1, r7
 800bfae:	4628      	mov	r0, r5
 800bfb0:	f7f4 fd6a 	bl	8000a88 <__aeabi_d2uiz>
 800bfb4:	2801      	cmp	r0, #1
 800bfb6:	bf38      	it	cc
 800bfb8:	2001      	movcc	r0, #1
 800bfba:	f7f4 fa13 	bl	80003e4 <__aeabi_ui2d>
 800bfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	460f      	mov	r7, r1
 800bfc4:	bb03      	cbnz	r3, 800c008 <_strtod_l+0xba0>
 800bfc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfca:	9014      	str	r0, [sp, #80]	; 0x50
 800bfcc:	9315      	str	r3, [sp, #84]	; 0x54
 800bfce:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bfd2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800bfd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfda:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bfde:	1a9b      	subs	r3, r3, r2
 800bfe0:	9311      	str	r3, [sp, #68]	; 0x44
 800bfe2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bfe4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bfe6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800bfea:	f7ff f8e9 	bl	800b1c0 <__ulp>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4640      	mov	r0, r8
 800bff4:	4649      	mov	r1, r9
 800bff6:	f7f4 fa6f 	bl	80004d8 <__aeabi_dmul>
 800bffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bffe:	f7f4 f8b5 	bl	800016c <__adddf3>
 800c002:	4680      	mov	r8, r0
 800c004:	4689      	mov	r9, r1
 800c006:	e774      	b.n	800bef2 <_strtod_l+0xa8a>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c010:	e7dd      	b.n	800bfce <_strtod_l+0xb66>
 800c012:	a30d      	add	r3, pc, #52	; (adr r3, 800c048 <_strtod_l+0xbe0>)
 800c014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c018:	f7f4 fcd0 	bl	80009bc <__aeabi_dcmplt>
 800c01c:	e79b      	b.n	800bf56 <_strtod_l+0xaee>
 800c01e:	2300      	movs	r3, #0
 800c020:	930e      	str	r3, [sp, #56]	; 0x38
 800c022:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c024:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	f7ff ba5b 	b.w	800b4e2 <_strtod_l+0x7a>
 800c02c:	2a65      	cmp	r2, #101	; 0x65
 800c02e:	f43f ab52 	beq.w	800b6d6 <_strtod_l+0x26e>
 800c032:	2a45      	cmp	r2, #69	; 0x45
 800c034:	f43f ab4f 	beq.w	800b6d6 <_strtod_l+0x26e>
 800c038:	2301      	movs	r3, #1
 800c03a:	f7ff bb87 	b.w	800b74c <_strtod_l+0x2e4>
 800c03e:	bf00      	nop
 800c040:	ffc00000 	.word	0xffc00000
 800c044:	41dfffff 	.word	0x41dfffff
 800c048:	94a03595 	.word	0x94a03595
 800c04c:	3fcfffff 	.word	0x3fcfffff

0800c050 <_strtod_r>:
 800c050:	4b01      	ldr	r3, [pc, #4]	; (800c058 <_strtod_r+0x8>)
 800c052:	f7ff ba09 	b.w	800b468 <_strtod_l>
 800c056:	bf00      	nop
 800c058:	20000080 	.word	0x20000080

0800c05c <_strtol_l.constprop.0>:
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c062:	4686      	mov	lr, r0
 800c064:	4690      	mov	r8, r2
 800c066:	d001      	beq.n	800c06c <_strtol_l.constprop.0+0x10>
 800c068:	2b24      	cmp	r3, #36	; 0x24
 800c06a:	d906      	bls.n	800c07a <_strtol_l.constprop.0+0x1e>
 800c06c:	f7fd fd84 	bl	8009b78 <__errno>
 800c070:	2316      	movs	r3, #22
 800c072:	6003      	str	r3, [r0, #0]
 800c074:	2000      	movs	r0, #0
 800c076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07a:	460d      	mov	r5, r1
 800c07c:	4835      	ldr	r0, [pc, #212]	; (800c154 <_strtol_l.constprop.0+0xf8>)
 800c07e:	462a      	mov	r2, r5
 800c080:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c084:	5d06      	ldrb	r6, [r0, r4]
 800c086:	f016 0608 	ands.w	r6, r6, #8
 800c08a:	d1f8      	bne.n	800c07e <_strtol_l.constprop.0+0x22>
 800c08c:	2c2d      	cmp	r4, #45	; 0x2d
 800c08e:	d12e      	bne.n	800c0ee <_strtol_l.constprop.0+0x92>
 800c090:	2601      	movs	r6, #1
 800c092:	782c      	ldrb	r4, [r5, #0]
 800c094:	1c95      	adds	r5, r2, #2
 800c096:	2b00      	cmp	r3, #0
 800c098:	d057      	beq.n	800c14a <_strtol_l.constprop.0+0xee>
 800c09a:	2b10      	cmp	r3, #16
 800c09c:	d109      	bne.n	800c0b2 <_strtol_l.constprop.0+0x56>
 800c09e:	2c30      	cmp	r4, #48	; 0x30
 800c0a0:	d107      	bne.n	800c0b2 <_strtol_l.constprop.0+0x56>
 800c0a2:	782a      	ldrb	r2, [r5, #0]
 800c0a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c0a8:	2a58      	cmp	r2, #88	; 0x58
 800c0aa:	d149      	bne.n	800c140 <_strtol_l.constprop.0+0xe4>
 800c0ac:	2310      	movs	r3, #16
 800c0ae:	786c      	ldrb	r4, [r5, #1]
 800c0b0:	3502      	adds	r5, #2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800c0b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c0bc:	fbbc f9f3 	udiv	r9, ip, r3
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	fb03 ca19 	mls	sl, r3, r9, ip
 800c0c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c0ca:	2f09      	cmp	r7, #9
 800c0cc:	d814      	bhi.n	800c0f8 <_strtol_l.constprop.0+0x9c>
 800c0ce:	463c      	mov	r4, r7
 800c0d0:	42a3      	cmp	r3, r4
 800c0d2:	dd20      	ble.n	800c116 <_strtol_l.constprop.0+0xba>
 800c0d4:	1c57      	adds	r7, r2, #1
 800c0d6:	d007      	beq.n	800c0e8 <_strtol_l.constprop.0+0x8c>
 800c0d8:	4581      	cmp	r9, r0
 800c0da:	d319      	bcc.n	800c110 <_strtol_l.constprop.0+0xb4>
 800c0dc:	d101      	bne.n	800c0e2 <_strtol_l.constprop.0+0x86>
 800c0de:	45a2      	cmp	sl, r4
 800c0e0:	db16      	blt.n	800c110 <_strtol_l.constprop.0+0xb4>
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	fb00 4003 	mla	r0, r0, r3, r4
 800c0e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ec:	e7eb      	b.n	800c0c6 <_strtol_l.constprop.0+0x6a>
 800c0ee:	2c2b      	cmp	r4, #43	; 0x2b
 800c0f0:	bf04      	itt	eq
 800c0f2:	782c      	ldrbeq	r4, [r5, #0]
 800c0f4:	1c95      	addeq	r5, r2, #2
 800c0f6:	e7ce      	b.n	800c096 <_strtol_l.constprop.0+0x3a>
 800c0f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c0fc:	2f19      	cmp	r7, #25
 800c0fe:	d801      	bhi.n	800c104 <_strtol_l.constprop.0+0xa8>
 800c100:	3c37      	subs	r4, #55	; 0x37
 800c102:	e7e5      	b.n	800c0d0 <_strtol_l.constprop.0+0x74>
 800c104:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c108:	2f19      	cmp	r7, #25
 800c10a:	d804      	bhi.n	800c116 <_strtol_l.constprop.0+0xba>
 800c10c:	3c57      	subs	r4, #87	; 0x57
 800c10e:	e7df      	b.n	800c0d0 <_strtol_l.constprop.0+0x74>
 800c110:	f04f 32ff 	mov.w	r2, #4294967295
 800c114:	e7e8      	b.n	800c0e8 <_strtol_l.constprop.0+0x8c>
 800c116:	1c53      	adds	r3, r2, #1
 800c118:	d108      	bne.n	800c12c <_strtol_l.constprop.0+0xd0>
 800c11a:	2322      	movs	r3, #34	; 0x22
 800c11c:	4660      	mov	r0, ip
 800c11e:	f8ce 3000 	str.w	r3, [lr]
 800c122:	f1b8 0f00 	cmp.w	r8, #0
 800c126:	d0a6      	beq.n	800c076 <_strtol_l.constprop.0+0x1a>
 800c128:	1e69      	subs	r1, r5, #1
 800c12a:	e006      	b.n	800c13a <_strtol_l.constprop.0+0xde>
 800c12c:	b106      	cbz	r6, 800c130 <_strtol_l.constprop.0+0xd4>
 800c12e:	4240      	negs	r0, r0
 800c130:	f1b8 0f00 	cmp.w	r8, #0
 800c134:	d09f      	beq.n	800c076 <_strtol_l.constprop.0+0x1a>
 800c136:	2a00      	cmp	r2, #0
 800c138:	d1f6      	bne.n	800c128 <_strtol_l.constprop.0+0xcc>
 800c13a:	f8c8 1000 	str.w	r1, [r8]
 800c13e:	e79a      	b.n	800c076 <_strtol_l.constprop.0+0x1a>
 800c140:	2430      	movs	r4, #48	; 0x30
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1b5      	bne.n	800c0b2 <_strtol_l.constprop.0+0x56>
 800c146:	2308      	movs	r3, #8
 800c148:	e7b3      	b.n	800c0b2 <_strtol_l.constprop.0+0x56>
 800c14a:	2c30      	cmp	r4, #48	; 0x30
 800c14c:	d0a9      	beq.n	800c0a2 <_strtol_l.constprop.0+0x46>
 800c14e:	230a      	movs	r3, #10
 800c150:	e7af      	b.n	800c0b2 <_strtol_l.constprop.0+0x56>
 800c152:	bf00      	nop
 800c154:	0800e121 	.word	0x0800e121

0800c158 <_strtol_r>:
 800c158:	f7ff bf80 	b.w	800c05c <_strtol_l.constprop.0>

0800c15c <__ssputs_r>:
 800c15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c160:	461f      	mov	r7, r3
 800c162:	688e      	ldr	r6, [r1, #8]
 800c164:	4682      	mov	sl, r0
 800c166:	42be      	cmp	r6, r7
 800c168:	460c      	mov	r4, r1
 800c16a:	4690      	mov	r8, r2
 800c16c:	680b      	ldr	r3, [r1, #0]
 800c16e:	d82c      	bhi.n	800c1ca <__ssputs_r+0x6e>
 800c170:	898a      	ldrh	r2, [r1, #12]
 800c172:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c176:	d026      	beq.n	800c1c6 <__ssputs_r+0x6a>
 800c178:	6965      	ldr	r5, [r4, #20]
 800c17a:	6909      	ldr	r1, [r1, #16]
 800c17c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c180:	eba3 0901 	sub.w	r9, r3, r1
 800c184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c188:	1c7b      	adds	r3, r7, #1
 800c18a:	444b      	add	r3, r9
 800c18c:	106d      	asrs	r5, r5, #1
 800c18e:	429d      	cmp	r5, r3
 800c190:	bf38      	it	cc
 800c192:	461d      	movcc	r5, r3
 800c194:	0553      	lsls	r3, r2, #21
 800c196:	d527      	bpl.n	800c1e8 <__ssputs_r+0x8c>
 800c198:	4629      	mov	r1, r5
 800c19a:	f7fe fc19 	bl	800a9d0 <_malloc_r>
 800c19e:	4606      	mov	r6, r0
 800c1a0:	b360      	cbz	r0, 800c1fc <__ssputs_r+0xa0>
 800c1a2:	464a      	mov	r2, r9
 800c1a4:	6921      	ldr	r1, [r4, #16]
 800c1a6:	f7fd fd22 	bl	8009bee <memcpy>
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1b4:	81a3      	strh	r3, [r4, #12]
 800c1b6:	6126      	str	r6, [r4, #16]
 800c1b8:	444e      	add	r6, r9
 800c1ba:	6026      	str	r6, [r4, #0]
 800c1bc:	463e      	mov	r6, r7
 800c1be:	6165      	str	r5, [r4, #20]
 800c1c0:	eba5 0509 	sub.w	r5, r5, r9
 800c1c4:	60a5      	str	r5, [r4, #8]
 800c1c6:	42be      	cmp	r6, r7
 800c1c8:	d900      	bls.n	800c1cc <__ssputs_r+0x70>
 800c1ca:	463e      	mov	r6, r7
 800c1cc:	4632      	mov	r2, r6
 800c1ce:	4641      	mov	r1, r8
 800c1d0:	6820      	ldr	r0, [r4, #0]
 800c1d2:	f000 fd54 	bl	800cc7e <memmove>
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	68a3      	ldr	r3, [r4, #8]
 800c1da:	1b9b      	subs	r3, r3, r6
 800c1dc:	60a3      	str	r3, [r4, #8]
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	4433      	add	r3, r6
 800c1e2:	6023      	str	r3, [r4, #0]
 800c1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1e8:	462a      	mov	r2, r5
 800c1ea:	f001 f916 	bl	800d41a <_realloc_r>
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d1e0      	bne.n	800c1b6 <__ssputs_r+0x5a>
 800c1f4:	4650      	mov	r0, sl
 800c1f6:	6921      	ldr	r1, [r4, #16]
 800c1f8:	f7fe fb7a 	bl	800a8f0 <_free_r>
 800c1fc:	230c      	movs	r3, #12
 800c1fe:	f8ca 3000 	str.w	r3, [sl]
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	f04f 30ff 	mov.w	r0, #4294967295
 800c208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c20c:	81a3      	strh	r3, [r4, #12]
 800c20e:	e7e9      	b.n	800c1e4 <__ssputs_r+0x88>

0800c210 <_svfiprintf_r>:
 800c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	4698      	mov	r8, r3
 800c216:	898b      	ldrh	r3, [r1, #12]
 800c218:	4607      	mov	r7, r0
 800c21a:	061b      	lsls	r3, r3, #24
 800c21c:	460d      	mov	r5, r1
 800c21e:	4614      	mov	r4, r2
 800c220:	b09d      	sub	sp, #116	; 0x74
 800c222:	d50e      	bpl.n	800c242 <_svfiprintf_r+0x32>
 800c224:	690b      	ldr	r3, [r1, #16]
 800c226:	b963      	cbnz	r3, 800c242 <_svfiprintf_r+0x32>
 800c228:	2140      	movs	r1, #64	; 0x40
 800c22a:	f7fe fbd1 	bl	800a9d0 <_malloc_r>
 800c22e:	6028      	str	r0, [r5, #0]
 800c230:	6128      	str	r0, [r5, #16]
 800c232:	b920      	cbnz	r0, 800c23e <_svfiprintf_r+0x2e>
 800c234:	230c      	movs	r3, #12
 800c236:	603b      	str	r3, [r7, #0]
 800c238:	f04f 30ff 	mov.w	r0, #4294967295
 800c23c:	e0d0      	b.n	800c3e0 <_svfiprintf_r+0x1d0>
 800c23e:	2340      	movs	r3, #64	; 0x40
 800c240:	616b      	str	r3, [r5, #20]
 800c242:	2300      	movs	r3, #0
 800c244:	9309      	str	r3, [sp, #36]	; 0x24
 800c246:	2320      	movs	r3, #32
 800c248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c24c:	2330      	movs	r3, #48	; 0x30
 800c24e:	f04f 0901 	mov.w	r9, #1
 800c252:	f8cd 800c 	str.w	r8, [sp, #12]
 800c256:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c3f8 <_svfiprintf_r+0x1e8>
 800c25a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c25e:	4623      	mov	r3, r4
 800c260:	469a      	mov	sl, r3
 800c262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c266:	b10a      	cbz	r2, 800c26c <_svfiprintf_r+0x5c>
 800c268:	2a25      	cmp	r2, #37	; 0x25
 800c26a:	d1f9      	bne.n	800c260 <_svfiprintf_r+0x50>
 800c26c:	ebba 0b04 	subs.w	fp, sl, r4
 800c270:	d00b      	beq.n	800c28a <_svfiprintf_r+0x7a>
 800c272:	465b      	mov	r3, fp
 800c274:	4622      	mov	r2, r4
 800c276:	4629      	mov	r1, r5
 800c278:	4638      	mov	r0, r7
 800c27a:	f7ff ff6f 	bl	800c15c <__ssputs_r>
 800c27e:	3001      	adds	r0, #1
 800c280:	f000 80a9 	beq.w	800c3d6 <_svfiprintf_r+0x1c6>
 800c284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c286:	445a      	add	r2, fp
 800c288:	9209      	str	r2, [sp, #36]	; 0x24
 800c28a:	f89a 3000 	ldrb.w	r3, [sl]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 80a1 	beq.w	800c3d6 <_svfiprintf_r+0x1c6>
 800c294:	2300      	movs	r3, #0
 800c296:	f04f 32ff 	mov.w	r2, #4294967295
 800c29a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c29e:	f10a 0a01 	add.w	sl, sl, #1
 800c2a2:	9304      	str	r3, [sp, #16]
 800c2a4:	9307      	str	r3, [sp, #28]
 800c2a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c2ac:	4654      	mov	r4, sl
 800c2ae:	2205      	movs	r2, #5
 800c2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b4:	4850      	ldr	r0, [pc, #320]	; (800c3f8 <_svfiprintf_r+0x1e8>)
 800c2b6:	f7fd fc8c 	bl	8009bd2 <memchr>
 800c2ba:	9a04      	ldr	r2, [sp, #16]
 800c2bc:	b9d8      	cbnz	r0, 800c2f6 <_svfiprintf_r+0xe6>
 800c2be:	06d0      	lsls	r0, r2, #27
 800c2c0:	bf44      	itt	mi
 800c2c2:	2320      	movmi	r3, #32
 800c2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2c8:	0711      	lsls	r1, r2, #28
 800c2ca:	bf44      	itt	mi
 800c2cc:	232b      	movmi	r3, #43	; 0x2b
 800c2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2d8:	d015      	beq.n	800c306 <_svfiprintf_r+0xf6>
 800c2da:	4654      	mov	r4, sl
 800c2dc:	2000      	movs	r0, #0
 800c2de:	f04f 0c0a 	mov.w	ip, #10
 800c2e2:	9a07      	ldr	r2, [sp, #28]
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ea:	3b30      	subs	r3, #48	; 0x30
 800c2ec:	2b09      	cmp	r3, #9
 800c2ee:	d94d      	bls.n	800c38c <_svfiprintf_r+0x17c>
 800c2f0:	b1b0      	cbz	r0, 800c320 <_svfiprintf_r+0x110>
 800c2f2:	9207      	str	r2, [sp, #28]
 800c2f4:	e014      	b.n	800c320 <_svfiprintf_r+0x110>
 800c2f6:	eba0 0308 	sub.w	r3, r0, r8
 800c2fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c2fe:	4313      	orrs	r3, r2
 800c300:	46a2      	mov	sl, r4
 800c302:	9304      	str	r3, [sp, #16]
 800c304:	e7d2      	b.n	800c2ac <_svfiprintf_r+0x9c>
 800c306:	9b03      	ldr	r3, [sp, #12]
 800c308:	1d19      	adds	r1, r3, #4
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	9103      	str	r1, [sp, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	bfbb      	ittet	lt
 800c312:	425b      	neglt	r3, r3
 800c314:	f042 0202 	orrlt.w	r2, r2, #2
 800c318:	9307      	strge	r3, [sp, #28]
 800c31a:	9307      	strlt	r3, [sp, #28]
 800c31c:	bfb8      	it	lt
 800c31e:	9204      	strlt	r2, [sp, #16]
 800c320:	7823      	ldrb	r3, [r4, #0]
 800c322:	2b2e      	cmp	r3, #46	; 0x2e
 800c324:	d10c      	bne.n	800c340 <_svfiprintf_r+0x130>
 800c326:	7863      	ldrb	r3, [r4, #1]
 800c328:	2b2a      	cmp	r3, #42	; 0x2a
 800c32a:	d134      	bne.n	800c396 <_svfiprintf_r+0x186>
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	3402      	adds	r4, #2
 800c330:	1d1a      	adds	r2, r3, #4
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	9203      	str	r2, [sp, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	bfb8      	it	lt
 800c33a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c33e:	9305      	str	r3, [sp, #20]
 800c340:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c3fc <_svfiprintf_r+0x1ec>
 800c344:	2203      	movs	r2, #3
 800c346:	4650      	mov	r0, sl
 800c348:	7821      	ldrb	r1, [r4, #0]
 800c34a:	f7fd fc42 	bl	8009bd2 <memchr>
 800c34e:	b138      	cbz	r0, 800c360 <_svfiprintf_r+0x150>
 800c350:	2240      	movs	r2, #64	; 0x40
 800c352:	9b04      	ldr	r3, [sp, #16]
 800c354:	eba0 000a 	sub.w	r0, r0, sl
 800c358:	4082      	lsls	r2, r0
 800c35a:	4313      	orrs	r3, r2
 800c35c:	3401      	adds	r4, #1
 800c35e:	9304      	str	r3, [sp, #16]
 800c360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c364:	2206      	movs	r2, #6
 800c366:	4826      	ldr	r0, [pc, #152]	; (800c400 <_svfiprintf_r+0x1f0>)
 800c368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c36c:	f7fd fc31 	bl	8009bd2 <memchr>
 800c370:	2800      	cmp	r0, #0
 800c372:	d038      	beq.n	800c3e6 <_svfiprintf_r+0x1d6>
 800c374:	4b23      	ldr	r3, [pc, #140]	; (800c404 <_svfiprintf_r+0x1f4>)
 800c376:	bb1b      	cbnz	r3, 800c3c0 <_svfiprintf_r+0x1b0>
 800c378:	9b03      	ldr	r3, [sp, #12]
 800c37a:	3307      	adds	r3, #7
 800c37c:	f023 0307 	bic.w	r3, r3, #7
 800c380:	3308      	adds	r3, #8
 800c382:	9303      	str	r3, [sp, #12]
 800c384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c386:	4433      	add	r3, r6
 800c388:	9309      	str	r3, [sp, #36]	; 0x24
 800c38a:	e768      	b.n	800c25e <_svfiprintf_r+0x4e>
 800c38c:	460c      	mov	r4, r1
 800c38e:	2001      	movs	r0, #1
 800c390:	fb0c 3202 	mla	r2, ip, r2, r3
 800c394:	e7a6      	b.n	800c2e4 <_svfiprintf_r+0xd4>
 800c396:	2300      	movs	r3, #0
 800c398:	f04f 0c0a 	mov.w	ip, #10
 800c39c:	4619      	mov	r1, r3
 800c39e:	3401      	adds	r4, #1
 800c3a0:	9305      	str	r3, [sp, #20]
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3a8:	3a30      	subs	r2, #48	; 0x30
 800c3aa:	2a09      	cmp	r2, #9
 800c3ac:	d903      	bls.n	800c3b6 <_svfiprintf_r+0x1a6>
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d0c6      	beq.n	800c340 <_svfiprintf_r+0x130>
 800c3b2:	9105      	str	r1, [sp, #20]
 800c3b4:	e7c4      	b.n	800c340 <_svfiprintf_r+0x130>
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3be:	e7f0      	b.n	800c3a2 <_svfiprintf_r+0x192>
 800c3c0:	ab03      	add	r3, sp, #12
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	462a      	mov	r2, r5
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	4b0f      	ldr	r3, [pc, #60]	; (800c408 <_svfiprintf_r+0x1f8>)
 800c3ca:	a904      	add	r1, sp, #16
 800c3cc:	f7fc fc1a 	bl	8008c04 <_printf_float>
 800c3d0:	1c42      	adds	r2, r0, #1
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	d1d6      	bne.n	800c384 <_svfiprintf_r+0x174>
 800c3d6:	89ab      	ldrh	r3, [r5, #12]
 800c3d8:	065b      	lsls	r3, r3, #25
 800c3da:	f53f af2d 	bmi.w	800c238 <_svfiprintf_r+0x28>
 800c3de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3e0:	b01d      	add	sp, #116	; 0x74
 800c3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e6:	ab03      	add	r3, sp, #12
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	462a      	mov	r2, r5
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	4b06      	ldr	r3, [pc, #24]	; (800c408 <_svfiprintf_r+0x1f8>)
 800c3f0:	a904      	add	r1, sp, #16
 800c3f2:	f7fc fea7 	bl	8009144 <_printf_i>
 800c3f6:	e7eb      	b.n	800c3d0 <_svfiprintf_r+0x1c0>
 800c3f8:	0800e221 	.word	0x0800e221
 800c3fc:	0800e227 	.word	0x0800e227
 800c400:	0800e22b 	.word	0x0800e22b
 800c404:	08008c05 	.word	0x08008c05
 800c408:	0800c15d 	.word	0x0800c15d

0800c40c <_sungetc_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	1c4b      	adds	r3, r1, #1
 800c410:	4614      	mov	r4, r2
 800c412:	d103      	bne.n	800c41c <_sungetc_r+0x10>
 800c414:	f04f 35ff 	mov.w	r5, #4294967295
 800c418:	4628      	mov	r0, r5
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
 800c41c:	8993      	ldrh	r3, [r2, #12]
 800c41e:	b2cd      	uxtb	r5, r1
 800c420:	f023 0320 	bic.w	r3, r3, #32
 800c424:	8193      	strh	r3, [r2, #12]
 800c426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c428:	6852      	ldr	r2, [r2, #4]
 800c42a:	b18b      	cbz	r3, 800c450 <_sungetc_r+0x44>
 800c42c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c42e:	4293      	cmp	r3, r2
 800c430:	dd08      	ble.n	800c444 <_sungetc_r+0x38>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	1e5a      	subs	r2, r3, #1
 800c436:	6022      	str	r2, [r4, #0]
 800c438:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c43c:	6863      	ldr	r3, [r4, #4]
 800c43e:	3301      	adds	r3, #1
 800c440:	6063      	str	r3, [r4, #4]
 800c442:	e7e9      	b.n	800c418 <_sungetc_r+0xc>
 800c444:	4621      	mov	r1, r4
 800c446:	f000 fbe2 	bl	800cc0e <__submore>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d0f1      	beq.n	800c432 <_sungetc_r+0x26>
 800c44e:	e7e1      	b.n	800c414 <_sungetc_r+0x8>
 800c450:	6921      	ldr	r1, [r4, #16]
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	b151      	cbz	r1, 800c46c <_sungetc_r+0x60>
 800c456:	4299      	cmp	r1, r3
 800c458:	d208      	bcs.n	800c46c <_sungetc_r+0x60>
 800c45a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c45e:	42a9      	cmp	r1, r5
 800c460:	d104      	bne.n	800c46c <_sungetc_r+0x60>
 800c462:	3b01      	subs	r3, #1
 800c464:	3201      	adds	r2, #1
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	6062      	str	r2, [r4, #4]
 800c46a:	e7d5      	b.n	800c418 <_sungetc_r+0xc>
 800c46c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c474:	6363      	str	r3, [r4, #52]	; 0x34
 800c476:	2303      	movs	r3, #3
 800c478:	63a3      	str	r3, [r4, #56]	; 0x38
 800c47a:	4623      	mov	r3, r4
 800c47c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	2301      	movs	r3, #1
 800c484:	e7dc      	b.n	800c440 <_sungetc_r+0x34>

0800c486 <__ssrefill_r>:
 800c486:	b510      	push	{r4, lr}
 800c488:	460c      	mov	r4, r1
 800c48a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c48c:	b169      	cbz	r1, 800c4aa <__ssrefill_r+0x24>
 800c48e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c492:	4299      	cmp	r1, r3
 800c494:	d001      	beq.n	800c49a <__ssrefill_r+0x14>
 800c496:	f7fe fa2b 	bl	800a8f0 <_free_r>
 800c49a:	2000      	movs	r0, #0
 800c49c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c49e:	6360      	str	r0, [r4, #52]	; 0x34
 800c4a0:	6063      	str	r3, [r4, #4]
 800c4a2:	b113      	cbz	r3, 800c4aa <__ssrefill_r+0x24>
 800c4a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c4a6:	6023      	str	r3, [r4, #0]
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	6063      	str	r3, [r4, #4]
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	f043 0320 	orr.w	r3, r3, #32
 800c4bc:	81a3      	strh	r3, [r4, #12]
 800c4be:	e7f3      	b.n	800c4a8 <__ssrefill_r+0x22>

0800c4c0 <__ssvfiscanf_r>:
 800c4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c4ce:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c4d2:	49a6      	ldr	r1, [pc, #664]	; (800c76c <__ssvfiscanf_r+0x2ac>)
 800c4d4:	f10d 0804 	add.w	r8, sp, #4
 800c4d8:	91a0      	str	r1, [sp, #640]	; 0x280
 800c4da:	49a5      	ldr	r1, [pc, #660]	; (800c770 <__ssvfiscanf_r+0x2b0>)
 800c4dc:	4fa5      	ldr	r7, [pc, #660]	; (800c774 <__ssvfiscanf_r+0x2b4>)
 800c4de:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c778 <__ssvfiscanf_r+0x2b8>
 800c4e2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c4e6:	91a1      	str	r1, [sp, #644]	; 0x284
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	7813      	ldrb	r3, [r2, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 815a 	beq.w	800c7a6 <__ssvfiscanf_r+0x2e6>
 800c4f2:	5cf9      	ldrb	r1, [r7, r3]
 800c4f4:	1c55      	adds	r5, r2, #1
 800c4f6:	f011 0108 	ands.w	r1, r1, #8
 800c4fa:	d019      	beq.n	800c530 <__ssvfiscanf_r+0x70>
 800c4fc:	6863      	ldr	r3, [r4, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	dd0f      	ble.n	800c522 <__ssvfiscanf_r+0x62>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	781a      	ldrb	r2, [r3, #0]
 800c506:	5cba      	ldrb	r2, [r7, r2]
 800c508:	0712      	lsls	r2, r2, #28
 800c50a:	d401      	bmi.n	800c510 <__ssvfiscanf_r+0x50>
 800c50c:	462a      	mov	r2, r5
 800c50e:	e7ec      	b.n	800c4ea <__ssvfiscanf_r+0x2a>
 800c510:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c512:	3301      	adds	r3, #1
 800c514:	3201      	adds	r2, #1
 800c516:	9245      	str	r2, [sp, #276]	; 0x114
 800c518:	6862      	ldr	r2, [r4, #4]
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	3a01      	subs	r2, #1
 800c51e:	6062      	str	r2, [r4, #4]
 800c520:	e7ec      	b.n	800c4fc <__ssvfiscanf_r+0x3c>
 800c522:	4621      	mov	r1, r4
 800c524:	4630      	mov	r0, r6
 800c526:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c528:	4798      	blx	r3
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d0e9      	beq.n	800c502 <__ssvfiscanf_r+0x42>
 800c52e:	e7ed      	b.n	800c50c <__ssvfiscanf_r+0x4c>
 800c530:	2b25      	cmp	r3, #37	; 0x25
 800c532:	d012      	beq.n	800c55a <__ssvfiscanf_r+0x9a>
 800c534:	469a      	mov	sl, r3
 800c536:	6863      	ldr	r3, [r4, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f340 8092 	ble.w	800c662 <__ssvfiscanf_r+0x1a2>
 800c53e:	6822      	ldr	r2, [r4, #0]
 800c540:	7813      	ldrb	r3, [r2, #0]
 800c542:	4553      	cmp	r3, sl
 800c544:	f040 812f 	bne.w	800c7a6 <__ssvfiscanf_r+0x2e6>
 800c548:	6863      	ldr	r3, [r4, #4]
 800c54a:	3201      	adds	r2, #1
 800c54c:	3b01      	subs	r3, #1
 800c54e:	6063      	str	r3, [r4, #4]
 800c550:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c552:	6022      	str	r2, [r4, #0]
 800c554:	3301      	adds	r3, #1
 800c556:	9345      	str	r3, [sp, #276]	; 0x114
 800c558:	e7d8      	b.n	800c50c <__ssvfiscanf_r+0x4c>
 800c55a:	9141      	str	r1, [sp, #260]	; 0x104
 800c55c:	9143      	str	r1, [sp, #268]	; 0x10c
 800c55e:	7853      	ldrb	r3, [r2, #1]
 800c560:	2b2a      	cmp	r3, #42	; 0x2a
 800c562:	bf04      	itt	eq
 800c564:	2310      	moveq	r3, #16
 800c566:	1c95      	addeq	r5, r2, #2
 800c568:	f04f 020a 	mov.w	r2, #10
 800c56c:	bf08      	it	eq
 800c56e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c570:	46aa      	mov	sl, r5
 800c572:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c576:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c57a:	2b09      	cmp	r3, #9
 800c57c:	d91c      	bls.n	800c5b8 <__ssvfiscanf_r+0xf8>
 800c57e:	2203      	movs	r2, #3
 800c580:	487d      	ldr	r0, [pc, #500]	; (800c778 <__ssvfiscanf_r+0x2b8>)
 800c582:	f7fd fb26 	bl	8009bd2 <memchr>
 800c586:	b138      	cbz	r0, 800c598 <__ssvfiscanf_r+0xd8>
 800c588:	2301      	movs	r3, #1
 800c58a:	4655      	mov	r5, sl
 800c58c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c58e:	eba0 0009 	sub.w	r0, r0, r9
 800c592:	4083      	lsls	r3, r0
 800c594:	4313      	orrs	r3, r2
 800c596:	9341      	str	r3, [sp, #260]	; 0x104
 800c598:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c59c:	2b78      	cmp	r3, #120	; 0x78
 800c59e:	d806      	bhi.n	800c5ae <__ssvfiscanf_r+0xee>
 800c5a0:	2b57      	cmp	r3, #87	; 0x57
 800c5a2:	d810      	bhi.n	800c5c6 <__ssvfiscanf_r+0x106>
 800c5a4:	2b25      	cmp	r3, #37	; 0x25
 800c5a6:	d0c5      	beq.n	800c534 <__ssvfiscanf_r+0x74>
 800c5a8:	d856      	bhi.n	800c658 <__ssvfiscanf_r+0x198>
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d064      	beq.n	800c678 <__ssvfiscanf_r+0x1b8>
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	9347      	str	r3, [sp, #284]	; 0x11c
 800c5b2:	230a      	movs	r3, #10
 800c5b4:	9342      	str	r3, [sp, #264]	; 0x108
 800c5b6:	e075      	b.n	800c6a4 <__ssvfiscanf_r+0x1e4>
 800c5b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c5ba:	4655      	mov	r5, sl
 800c5bc:	fb02 1103 	mla	r1, r2, r3, r1
 800c5c0:	3930      	subs	r1, #48	; 0x30
 800c5c2:	9143      	str	r1, [sp, #268]	; 0x10c
 800c5c4:	e7d4      	b.n	800c570 <__ssvfiscanf_r+0xb0>
 800c5c6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c5ca:	2a20      	cmp	r2, #32
 800c5cc:	d8ef      	bhi.n	800c5ae <__ssvfiscanf_r+0xee>
 800c5ce:	a101      	add	r1, pc, #4	; (adr r1, 800c5d4 <__ssvfiscanf_r+0x114>)
 800c5d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c5d4:	0800c687 	.word	0x0800c687
 800c5d8:	0800c5af 	.word	0x0800c5af
 800c5dc:	0800c5af 	.word	0x0800c5af
 800c5e0:	0800c6e5 	.word	0x0800c6e5
 800c5e4:	0800c5af 	.word	0x0800c5af
 800c5e8:	0800c5af 	.word	0x0800c5af
 800c5ec:	0800c5af 	.word	0x0800c5af
 800c5f0:	0800c5af 	.word	0x0800c5af
 800c5f4:	0800c5af 	.word	0x0800c5af
 800c5f8:	0800c5af 	.word	0x0800c5af
 800c5fc:	0800c5af 	.word	0x0800c5af
 800c600:	0800c6fb 	.word	0x0800c6fb
 800c604:	0800c6e1 	.word	0x0800c6e1
 800c608:	0800c65f 	.word	0x0800c65f
 800c60c:	0800c65f 	.word	0x0800c65f
 800c610:	0800c65f 	.word	0x0800c65f
 800c614:	0800c5af 	.word	0x0800c5af
 800c618:	0800c69d 	.word	0x0800c69d
 800c61c:	0800c5af 	.word	0x0800c5af
 800c620:	0800c5af 	.word	0x0800c5af
 800c624:	0800c5af 	.word	0x0800c5af
 800c628:	0800c5af 	.word	0x0800c5af
 800c62c:	0800c70b 	.word	0x0800c70b
 800c630:	0800c6d9 	.word	0x0800c6d9
 800c634:	0800c67f 	.word	0x0800c67f
 800c638:	0800c5af 	.word	0x0800c5af
 800c63c:	0800c5af 	.word	0x0800c5af
 800c640:	0800c707 	.word	0x0800c707
 800c644:	0800c5af 	.word	0x0800c5af
 800c648:	0800c6e1 	.word	0x0800c6e1
 800c64c:	0800c5af 	.word	0x0800c5af
 800c650:	0800c5af 	.word	0x0800c5af
 800c654:	0800c687 	.word	0x0800c687
 800c658:	3b45      	subs	r3, #69	; 0x45
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d8a7      	bhi.n	800c5ae <__ssvfiscanf_r+0xee>
 800c65e:	2305      	movs	r3, #5
 800c660:	e01f      	b.n	800c6a2 <__ssvfiscanf_r+0x1e2>
 800c662:	4621      	mov	r1, r4
 800c664:	4630      	mov	r0, r6
 800c666:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c668:	4798      	blx	r3
 800c66a:	2800      	cmp	r0, #0
 800c66c:	f43f af67 	beq.w	800c53e <__ssvfiscanf_r+0x7e>
 800c670:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c672:	2800      	cmp	r0, #0
 800c674:	f040 808d 	bne.w	800c792 <__ssvfiscanf_r+0x2d2>
 800c678:	f04f 30ff 	mov.w	r0, #4294967295
 800c67c:	e08f      	b.n	800c79e <__ssvfiscanf_r+0x2de>
 800c67e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c680:	f042 0220 	orr.w	r2, r2, #32
 800c684:	9241      	str	r2, [sp, #260]	; 0x104
 800c686:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c68c:	9241      	str	r2, [sp, #260]	; 0x104
 800c68e:	2210      	movs	r2, #16
 800c690:	2b6f      	cmp	r3, #111	; 0x6f
 800c692:	bf34      	ite	cc
 800c694:	2303      	movcc	r3, #3
 800c696:	2304      	movcs	r3, #4
 800c698:	9242      	str	r2, [sp, #264]	; 0x108
 800c69a:	e002      	b.n	800c6a2 <__ssvfiscanf_r+0x1e2>
 800c69c:	2300      	movs	r3, #0
 800c69e:	9342      	str	r3, [sp, #264]	; 0x108
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	9347      	str	r3, [sp, #284]	; 0x11c
 800c6a4:	6863      	ldr	r3, [r4, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	dd3d      	ble.n	800c726 <__ssvfiscanf_r+0x266>
 800c6aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c6ac:	0659      	lsls	r1, r3, #25
 800c6ae:	d404      	bmi.n	800c6ba <__ssvfiscanf_r+0x1fa>
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	781a      	ldrb	r2, [r3, #0]
 800c6b4:	5cba      	ldrb	r2, [r7, r2]
 800c6b6:	0712      	lsls	r2, r2, #28
 800c6b8:	d43c      	bmi.n	800c734 <__ssvfiscanf_r+0x274>
 800c6ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	dc4b      	bgt.n	800c758 <__ssvfiscanf_r+0x298>
 800c6c0:	466b      	mov	r3, sp
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	a941      	add	r1, sp, #260	; 0x104
 800c6c8:	f000 f872 	bl	800c7b0 <_scanf_chars>
 800c6cc:	2801      	cmp	r0, #1
 800c6ce:	d06a      	beq.n	800c7a6 <__ssvfiscanf_r+0x2e6>
 800c6d0:	2802      	cmp	r0, #2
 800c6d2:	f47f af1b 	bne.w	800c50c <__ssvfiscanf_r+0x4c>
 800c6d6:	e7cb      	b.n	800c670 <__ssvfiscanf_r+0x1b0>
 800c6d8:	2308      	movs	r3, #8
 800c6da:	9342      	str	r3, [sp, #264]	; 0x108
 800c6dc:	2304      	movs	r3, #4
 800c6de:	e7e0      	b.n	800c6a2 <__ssvfiscanf_r+0x1e2>
 800c6e0:	220a      	movs	r2, #10
 800c6e2:	e7d5      	b.n	800c690 <__ssvfiscanf_r+0x1d0>
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	f000 fa58 	bl	800cb9c <__sccl>
 800c6ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6f4:	9341      	str	r3, [sp, #260]	; 0x104
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e7d3      	b.n	800c6a2 <__ssvfiscanf_r+0x1e2>
 800c6fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c700:	9341      	str	r3, [sp, #260]	; 0x104
 800c702:	2300      	movs	r3, #0
 800c704:	e7cd      	b.n	800c6a2 <__ssvfiscanf_r+0x1e2>
 800c706:	2302      	movs	r3, #2
 800c708:	e7cb      	b.n	800c6a2 <__ssvfiscanf_r+0x1e2>
 800c70a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c70c:	06c3      	lsls	r3, r0, #27
 800c70e:	f53f aefd 	bmi.w	800c50c <__ssvfiscanf_r+0x4c>
 800c712:	9b00      	ldr	r3, [sp, #0]
 800c714:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c716:	1d19      	adds	r1, r3, #4
 800c718:	9100      	str	r1, [sp, #0]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	07c0      	lsls	r0, r0, #31
 800c71e:	bf4c      	ite	mi
 800c720:	801a      	strhmi	r2, [r3, #0]
 800c722:	601a      	strpl	r2, [r3, #0]
 800c724:	e6f2      	b.n	800c50c <__ssvfiscanf_r+0x4c>
 800c726:	4621      	mov	r1, r4
 800c728:	4630      	mov	r0, r6
 800c72a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c72c:	4798      	blx	r3
 800c72e:	2800      	cmp	r0, #0
 800c730:	d0bb      	beq.n	800c6aa <__ssvfiscanf_r+0x1ea>
 800c732:	e79d      	b.n	800c670 <__ssvfiscanf_r+0x1b0>
 800c734:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c736:	3201      	adds	r2, #1
 800c738:	9245      	str	r2, [sp, #276]	; 0x114
 800c73a:	6862      	ldr	r2, [r4, #4]
 800c73c:	3a01      	subs	r2, #1
 800c73e:	2a00      	cmp	r2, #0
 800c740:	6062      	str	r2, [r4, #4]
 800c742:	dd02      	ble.n	800c74a <__ssvfiscanf_r+0x28a>
 800c744:	3301      	adds	r3, #1
 800c746:	6023      	str	r3, [r4, #0]
 800c748:	e7b2      	b.n	800c6b0 <__ssvfiscanf_r+0x1f0>
 800c74a:	4621      	mov	r1, r4
 800c74c:	4630      	mov	r0, r6
 800c74e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c750:	4798      	blx	r3
 800c752:	2800      	cmp	r0, #0
 800c754:	d0ac      	beq.n	800c6b0 <__ssvfiscanf_r+0x1f0>
 800c756:	e78b      	b.n	800c670 <__ssvfiscanf_r+0x1b0>
 800c758:	2b04      	cmp	r3, #4
 800c75a:	dc0f      	bgt.n	800c77c <__ssvfiscanf_r+0x2bc>
 800c75c:	466b      	mov	r3, sp
 800c75e:	4622      	mov	r2, r4
 800c760:	4630      	mov	r0, r6
 800c762:	a941      	add	r1, sp, #260	; 0x104
 800c764:	f000 f87e 	bl	800c864 <_scanf_i>
 800c768:	e7b0      	b.n	800c6cc <__ssvfiscanf_r+0x20c>
 800c76a:	bf00      	nop
 800c76c:	0800c40d 	.word	0x0800c40d
 800c770:	0800c487 	.word	0x0800c487
 800c774:	0800e121 	.word	0x0800e121
 800c778:	0800e227 	.word	0x0800e227
 800c77c:	4b0b      	ldr	r3, [pc, #44]	; (800c7ac <__ssvfiscanf_r+0x2ec>)
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f43f aec4 	beq.w	800c50c <__ssvfiscanf_r+0x4c>
 800c784:	466b      	mov	r3, sp
 800c786:	4622      	mov	r2, r4
 800c788:	4630      	mov	r0, r6
 800c78a:	a941      	add	r1, sp, #260	; 0x104
 800c78c:	f7fc fdfc 	bl	8009388 <_scanf_float>
 800c790:	e79c      	b.n	800c6cc <__ssvfiscanf_r+0x20c>
 800c792:	89a3      	ldrh	r3, [r4, #12]
 800c794:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c798:	bf18      	it	ne
 800c79a:	f04f 30ff 	movne.w	r0, #4294967295
 800c79e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c7a8:	e7f9      	b.n	800c79e <__ssvfiscanf_r+0x2de>
 800c7aa:	bf00      	nop
 800c7ac:	08009389 	.word	0x08009389

0800c7b0 <_scanf_chars>:
 800c7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7b4:	4615      	mov	r5, r2
 800c7b6:	688a      	ldr	r2, [r1, #8]
 800c7b8:	4680      	mov	r8, r0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	b932      	cbnz	r2, 800c7cc <_scanf_chars+0x1c>
 800c7be:	698a      	ldr	r2, [r1, #24]
 800c7c0:	2a00      	cmp	r2, #0
 800c7c2:	bf0c      	ite	eq
 800c7c4:	2201      	moveq	r2, #1
 800c7c6:	f04f 32ff 	movne.w	r2, #4294967295
 800c7ca:	608a      	str	r2, [r1, #8]
 800c7cc:	2700      	movs	r7, #0
 800c7ce:	6822      	ldr	r2, [r4, #0]
 800c7d0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c860 <_scanf_chars+0xb0>
 800c7d4:	06d1      	lsls	r1, r2, #27
 800c7d6:	bf5f      	itttt	pl
 800c7d8:	681a      	ldrpl	r2, [r3, #0]
 800c7da:	1d11      	addpl	r1, r2, #4
 800c7dc:	6019      	strpl	r1, [r3, #0]
 800c7de:	6816      	ldrpl	r6, [r2, #0]
 800c7e0:	69a0      	ldr	r0, [r4, #24]
 800c7e2:	b188      	cbz	r0, 800c808 <_scanf_chars+0x58>
 800c7e4:	2801      	cmp	r0, #1
 800c7e6:	d107      	bne.n	800c7f8 <_scanf_chars+0x48>
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	781a      	ldrb	r2, [r3, #0]
 800c7ec:	6963      	ldr	r3, [r4, #20]
 800c7ee:	5c9b      	ldrb	r3, [r3, r2]
 800c7f0:	b953      	cbnz	r3, 800c808 <_scanf_chars+0x58>
 800c7f2:	2f00      	cmp	r7, #0
 800c7f4:	d031      	beq.n	800c85a <_scanf_chars+0xaa>
 800c7f6:	e022      	b.n	800c83e <_scanf_chars+0x8e>
 800c7f8:	2802      	cmp	r0, #2
 800c7fa:	d120      	bne.n	800c83e <_scanf_chars+0x8e>
 800c7fc:	682b      	ldr	r3, [r5, #0]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c804:	071b      	lsls	r3, r3, #28
 800c806:	d41a      	bmi.n	800c83e <_scanf_chars+0x8e>
 800c808:	6823      	ldr	r3, [r4, #0]
 800c80a:	3701      	adds	r7, #1
 800c80c:	06da      	lsls	r2, r3, #27
 800c80e:	bf5e      	ittt	pl
 800c810:	682b      	ldrpl	r3, [r5, #0]
 800c812:	781b      	ldrbpl	r3, [r3, #0]
 800c814:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c818:	682a      	ldr	r2, [r5, #0]
 800c81a:	686b      	ldr	r3, [r5, #4]
 800c81c:	3201      	adds	r2, #1
 800c81e:	602a      	str	r2, [r5, #0]
 800c820:	68a2      	ldr	r2, [r4, #8]
 800c822:	3b01      	subs	r3, #1
 800c824:	3a01      	subs	r2, #1
 800c826:	606b      	str	r3, [r5, #4]
 800c828:	60a2      	str	r2, [r4, #8]
 800c82a:	b142      	cbz	r2, 800c83e <_scanf_chars+0x8e>
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	dcd7      	bgt.n	800c7e0 <_scanf_chars+0x30>
 800c830:	4629      	mov	r1, r5
 800c832:	4640      	mov	r0, r8
 800c834:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c838:	4798      	blx	r3
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d0d0      	beq.n	800c7e0 <_scanf_chars+0x30>
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	f013 0310 	ands.w	r3, r3, #16
 800c844:	d105      	bne.n	800c852 <_scanf_chars+0xa2>
 800c846:	68e2      	ldr	r2, [r4, #12]
 800c848:	3201      	adds	r2, #1
 800c84a:	60e2      	str	r2, [r4, #12]
 800c84c:	69a2      	ldr	r2, [r4, #24]
 800c84e:	b102      	cbz	r2, 800c852 <_scanf_chars+0xa2>
 800c850:	7033      	strb	r3, [r6, #0]
 800c852:	2000      	movs	r0, #0
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	443b      	add	r3, r7
 800c858:	6123      	str	r3, [r4, #16]
 800c85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c85e:	bf00      	nop
 800c860:	0800e121 	.word	0x0800e121

0800c864 <_scanf_i>:
 800c864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c868:	460c      	mov	r4, r1
 800c86a:	4698      	mov	r8, r3
 800c86c:	4b72      	ldr	r3, [pc, #456]	; (800ca38 <_scanf_i+0x1d4>)
 800c86e:	b087      	sub	sp, #28
 800c870:	4682      	mov	sl, r0
 800c872:	4616      	mov	r6, r2
 800c874:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c878:	ab03      	add	r3, sp, #12
 800c87a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c87e:	4b6f      	ldr	r3, [pc, #444]	; (800ca3c <_scanf_i+0x1d8>)
 800c880:	69a1      	ldr	r1, [r4, #24]
 800c882:	4a6f      	ldr	r2, [pc, #444]	; (800ca40 <_scanf_i+0x1dc>)
 800c884:	4627      	mov	r7, r4
 800c886:	2903      	cmp	r1, #3
 800c888:	bf18      	it	ne
 800c88a:	461a      	movne	r2, r3
 800c88c:	68a3      	ldr	r3, [r4, #8]
 800c88e:	9201      	str	r2, [sp, #4]
 800c890:	1e5a      	subs	r2, r3, #1
 800c892:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c896:	bf81      	itttt	hi
 800c898:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c89c:	eb03 0905 	addhi.w	r9, r3, r5
 800c8a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c8a4:	60a3      	strhi	r3, [r4, #8]
 800c8a6:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c8aa:	bf98      	it	ls
 800c8ac:	f04f 0900 	movls.w	r9, #0
 800c8b0:	463d      	mov	r5, r7
 800c8b2:	f04f 0b00 	mov.w	fp, #0
 800c8b6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c8ba:	6023      	str	r3, [r4, #0]
 800c8bc:	6831      	ldr	r1, [r6, #0]
 800c8be:	ab03      	add	r3, sp, #12
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	7809      	ldrb	r1, [r1, #0]
 800c8c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c8c8:	f7fd f983 	bl	8009bd2 <memchr>
 800c8cc:	b328      	cbz	r0, 800c91a <_scanf_i+0xb6>
 800c8ce:	f1bb 0f01 	cmp.w	fp, #1
 800c8d2:	d159      	bne.n	800c988 <_scanf_i+0x124>
 800c8d4:	6862      	ldr	r2, [r4, #4]
 800c8d6:	b92a      	cbnz	r2, 800c8e4 <_scanf_i+0x80>
 800c8d8:	2308      	movs	r3, #8
 800c8da:	6822      	ldr	r2, [r4, #0]
 800c8dc:	6063      	str	r3, [r4, #4]
 800c8de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8e2:	6022      	str	r2, [r4, #0]
 800c8e4:	6822      	ldr	r2, [r4, #0]
 800c8e6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c8ea:	6022      	str	r2, [r4, #0]
 800c8ec:	68a2      	ldr	r2, [r4, #8]
 800c8ee:	1e51      	subs	r1, r2, #1
 800c8f0:	60a1      	str	r1, [r4, #8]
 800c8f2:	b192      	cbz	r2, 800c91a <_scanf_i+0xb6>
 800c8f4:	6832      	ldr	r2, [r6, #0]
 800c8f6:	1c51      	adds	r1, r2, #1
 800c8f8:	6031      	str	r1, [r6, #0]
 800c8fa:	7812      	ldrb	r2, [r2, #0]
 800c8fc:	f805 2b01 	strb.w	r2, [r5], #1
 800c900:	6872      	ldr	r2, [r6, #4]
 800c902:	3a01      	subs	r2, #1
 800c904:	2a00      	cmp	r2, #0
 800c906:	6072      	str	r2, [r6, #4]
 800c908:	dc07      	bgt.n	800c91a <_scanf_i+0xb6>
 800c90a:	4631      	mov	r1, r6
 800c90c:	4650      	mov	r0, sl
 800c90e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c912:	4790      	blx	r2
 800c914:	2800      	cmp	r0, #0
 800c916:	f040 8085 	bne.w	800ca24 <_scanf_i+0x1c0>
 800c91a:	f10b 0b01 	add.w	fp, fp, #1
 800c91e:	f1bb 0f03 	cmp.w	fp, #3
 800c922:	d1cb      	bne.n	800c8bc <_scanf_i+0x58>
 800c924:	6863      	ldr	r3, [r4, #4]
 800c926:	b90b      	cbnz	r3, 800c92c <_scanf_i+0xc8>
 800c928:	230a      	movs	r3, #10
 800c92a:	6063      	str	r3, [r4, #4]
 800c92c:	6863      	ldr	r3, [r4, #4]
 800c92e:	4945      	ldr	r1, [pc, #276]	; (800ca44 <_scanf_i+0x1e0>)
 800c930:	6960      	ldr	r0, [r4, #20]
 800c932:	1ac9      	subs	r1, r1, r3
 800c934:	f000 f932 	bl	800cb9c <__sccl>
 800c938:	f04f 0b00 	mov.w	fp, #0
 800c93c:	68a3      	ldr	r3, [r4, #8]
 800c93e:	6822      	ldr	r2, [r4, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d03d      	beq.n	800c9c0 <_scanf_i+0x15c>
 800c944:	6831      	ldr	r1, [r6, #0]
 800c946:	6960      	ldr	r0, [r4, #20]
 800c948:	f891 c000 	ldrb.w	ip, [r1]
 800c94c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c950:	2800      	cmp	r0, #0
 800c952:	d035      	beq.n	800c9c0 <_scanf_i+0x15c>
 800c954:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c958:	d124      	bne.n	800c9a4 <_scanf_i+0x140>
 800c95a:	0510      	lsls	r0, r2, #20
 800c95c:	d522      	bpl.n	800c9a4 <_scanf_i+0x140>
 800c95e:	f10b 0b01 	add.w	fp, fp, #1
 800c962:	f1b9 0f00 	cmp.w	r9, #0
 800c966:	d003      	beq.n	800c970 <_scanf_i+0x10c>
 800c968:	3301      	adds	r3, #1
 800c96a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c96e:	60a3      	str	r3, [r4, #8]
 800c970:	6873      	ldr	r3, [r6, #4]
 800c972:	3b01      	subs	r3, #1
 800c974:	2b00      	cmp	r3, #0
 800c976:	6073      	str	r3, [r6, #4]
 800c978:	dd1b      	ble.n	800c9b2 <_scanf_i+0x14e>
 800c97a:	6833      	ldr	r3, [r6, #0]
 800c97c:	3301      	adds	r3, #1
 800c97e:	6033      	str	r3, [r6, #0]
 800c980:	68a3      	ldr	r3, [r4, #8]
 800c982:	3b01      	subs	r3, #1
 800c984:	60a3      	str	r3, [r4, #8]
 800c986:	e7d9      	b.n	800c93c <_scanf_i+0xd8>
 800c988:	f1bb 0f02 	cmp.w	fp, #2
 800c98c:	d1ae      	bne.n	800c8ec <_scanf_i+0x88>
 800c98e:	6822      	ldr	r2, [r4, #0]
 800c990:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c994:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c998:	d1bf      	bne.n	800c91a <_scanf_i+0xb6>
 800c99a:	2310      	movs	r3, #16
 800c99c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c9a0:	6063      	str	r3, [r4, #4]
 800c9a2:	e7a2      	b.n	800c8ea <_scanf_i+0x86>
 800c9a4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c9a8:	6022      	str	r2, [r4, #0]
 800c9aa:	780b      	ldrb	r3, [r1, #0]
 800c9ac:	f805 3b01 	strb.w	r3, [r5], #1
 800c9b0:	e7de      	b.n	800c970 <_scanf_i+0x10c>
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	4650      	mov	r0, sl
 800c9b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c9ba:	4798      	blx	r3
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d0df      	beq.n	800c980 <_scanf_i+0x11c>
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	05d9      	lsls	r1, r3, #23
 800c9c4:	d50d      	bpl.n	800c9e2 <_scanf_i+0x17e>
 800c9c6:	42bd      	cmp	r5, r7
 800c9c8:	d909      	bls.n	800c9de <_scanf_i+0x17a>
 800c9ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c9ce:	4632      	mov	r2, r6
 800c9d0:	4650      	mov	r0, sl
 800c9d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9d6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c9da:	4798      	blx	r3
 800c9dc:	464d      	mov	r5, r9
 800c9de:	42bd      	cmp	r5, r7
 800c9e0:	d028      	beq.n	800ca34 <_scanf_i+0x1d0>
 800c9e2:	6822      	ldr	r2, [r4, #0]
 800c9e4:	f012 0210 	ands.w	r2, r2, #16
 800c9e8:	d113      	bne.n	800ca12 <_scanf_i+0x1ae>
 800c9ea:	702a      	strb	r2, [r5, #0]
 800c9ec:	4639      	mov	r1, r7
 800c9ee:	6863      	ldr	r3, [r4, #4]
 800c9f0:	4650      	mov	r0, sl
 800c9f2:	9e01      	ldr	r6, [sp, #4]
 800c9f4:	47b0      	blx	r6
 800c9f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c9fa:	6821      	ldr	r1, [r4, #0]
 800c9fc:	1d1a      	adds	r2, r3, #4
 800c9fe:	f8c8 2000 	str.w	r2, [r8]
 800ca02:	f011 0f20 	tst.w	r1, #32
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	d00f      	beq.n	800ca2a <_scanf_i+0x1c6>
 800ca0a:	6018      	str	r0, [r3, #0]
 800ca0c:	68e3      	ldr	r3, [r4, #12]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	60e3      	str	r3, [r4, #12]
 800ca12:	2000      	movs	r0, #0
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	1bed      	subs	r5, r5, r7
 800ca18:	445d      	add	r5, fp
 800ca1a:	442b      	add	r3, r5
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	b007      	add	sp, #28
 800ca20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca24:	f04f 0b00 	mov.w	fp, #0
 800ca28:	e7ca      	b.n	800c9c0 <_scanf_i+0x15c>
 800ca2a:	07ca      	lsls	r2, r1, #31
 800ca2c:	bf4c      	ite	mi
 800ca2e:	8018      	strhmi	r0, [r3, #0]
 800ca30:	6018      	strpl	r0, [r3, #0]
 800ca32:	e7eb      	b.n	800ca0c <_scanf_i+0x1a8>
 800ca34:	2001      	movs	r0, #1
 800ca36:	e7f2      	b.n	800ca1e <_scanf_i+0x1ba>
 800ca38:	0800de78 	.word	0x0800de78
 800ca3c:	0800d55d 	.word	0x0800d55d
 800ca40:	0800c159 	.word	0x0800c159
 800ca44:	0800e242 	.word	0x0800e242

0800ca48 <__sflush_r>:
 800ca48:	898a      	ldrh	r2, [r1, #12]
 800ca4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	0710      	lsls	r0, r2, #28
 800ca50:	460c      	mov	r4, r1
 800ca52:	d457      	bmi.n	800cb04 <__sflush_r+0xbc>
 800ca54:	684b      	ldr	r3, [r1, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	dc04      	bgt.n	800ca64 <__sflush_r+0x1c>
 800ca5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	dc01      	bgt.n	800ca64 <__sflush_r+0x1c>
 800ca60:	2000      	movs	r0, #0
 800ca62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca66:	2e00      	cmp	r6, #0
 800ca68:	d0fa      	beq.n	800ca60 <__sflush_r+0x18>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca70:	682f      	ldr	r7, [r5, #0]
 800ca72:	6a21      	ldr	r1, [r4, #32]
 800ca74:	602b      	str	r3, [r5, #0]
 800ca76:	d032      	beq.n	800cade <__sflush_r+0x96>
 800ca78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	075a      	lsls	r2, r3, #29
 800ca7e:	d505      	bpl.n	800ca8c <__sflush_r+0x44>
 800ca80:	6863      	ldr	r3, [r4, #4]
 800ca82:	1ac0      	subs	r0, r0, r3
 800ca84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca86:	b10b      	cbz	r3, 800ca8c <__sflush_r+0x44>
 800ca88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca8a:	1ac0      	subs	r0, r0, r3
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	4602      	mov	r2, r0
 800ca90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca92:	4628      	mov	r0, r5
 800ca94:	6a21      	ldr	r1, [r4, #32]
 800ca96:	47b0      	blx	r6
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	d106      	bne.n	800caac <__sflush_r+0x64>
 800ca9e:	6829      	ldr	r1, [r5, #0]
 800caa0:	291d      	cmp	r1, #29
 800caa2:	d82b      	bhi.n	800cafc <__sflush_r+0xb4>
 800caa4:	4a28      	ldr	r2, [pc, #160]	; (800cb48 <__sflush_r+0x100>)
 800caa6:	410a      	asrs	r2, r1
 800caa8:	07d6      	lsls	r6, r2, #31
 800caaa:	d427      	bmi.n	800cafc <__sflush_r+0xb4>
 800caac:	2200      	movs	r2, #0
 800caae:	6062      	str	r2, [r4, #4]
 800cab0:	6922      	ldr	r2, [r4, #16]
 800cab2:	04d9      	lsls	r1, r3, #19
 800cab4:	6022      	str	r2, [r4, #0]
 800cab6:	d504      	bpl.n	800cac2 <__sflush_r+0x7a>
 800cab8:	1c42      	adds	r2, r0, #1
 800caba:	d101      	bne.n	800cac0 <__sflush_r+0x78>
 800cabc:	682b      	ldr	r3, [r5, #0]
 800cabe:	b903      	cbnz	r3, 800cac2 <__sflush_r+0x7a>
 800cac0:	6560      	str	r0, [r4, #84]	; 0x54
 800cac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cac4:	602f      	str	r7, [r5, #0]
 800cac6:	2900      	cmp	r1, #0
 800cac8:	d0ca      	beq.n	800ca60 <__sflush_r+0x18>
 800caca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cace:	4299      	cmp	r1, r3
 800cad0:	d002      	beq.n	800cad8 <__sflush_r+0x90>
 800cad2:	4628      	mov	r0, r5
 800cad4:	f7fd ff0c 	bl	800a8f0 <_free_r>
 800cad8:	2000      	movs	r0, #0
 800cada:	6360      	str	r0, [r4, #52]	; 0x34
 800cadc:	e7c1      	b.n	800ca62 <__sflush_r+0x1a>
 800cade:	2301      	movs	r3, #1
 800cae0:	4628      	mov	r0, r5
 800cae2:	47b0      	blx	r6
 800cae4:	1c41      	adds	r1, r0, #1
 800cae6:	d1c8      	bne.n	800ca7a <__sflush_r+0x32>
 800cae8:	682b      	ldr	r3, [r5, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0c5      	beq.n	800ca7a <__sflush_r+0x32>
 800caee:	2b1d      	cmp	r3, #29
 800caf0:	d001      	beq.n	800caf6 <__sflush_r+0xae>
 800caf2:	2b16      	cmp	r3, #22
 800caf4:	d101      	bne.n	800cafa <__sflush_r+0xb2>
 800caf6:	602f      	str	r7, [r5, #0]
 800caf8:	e7b2      	b.n	800ca60 <__sflush_r+0x18>
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb00:	81a3      	strh	r3, [r4, #12]
 800cb02:	e7ae      	b.n	800ca62 <__sflush_r+0x1a>
 800cb04:	690f      	ldr	r7, [r1, #16]
 800cb06:	2f00      	cmp	r7, #0
 800cb08:	d0aa      	beq.n	800ca60 <__sflush_r+0x18>
 800cb0a:	0793      	lsls	r3, r2, #30
 800cb0c:	bf18      	it	ne
 800cb0e:	2300      	movne	r3, #0
 800cb10:	680e      	ldr	r6, [r1, #0]
 800cb12:	bf08      	it	eq
 800cb14:	694b      	ldreq	r3, [r1, #20]
 800cb16:	1bf6      	subs	r6, r6, r7
 800cb18:	600f      	str	r7, [r1, #0]
 800cb1a:	608b      	str	r3, [r1, #8]
 800cb1c:	2e00      	cmp	r6, #0
 800cb1e:	dd9f      	ble.n	800ca60 <__sflush_r+0x18>
 800cb20:	4633      	mov	r3, r6
 800cb22:	463a      	mov	r2, r7
 800cb24:	4628      	mov	r0, r5
 800cb26:	6a21      	ldr	r1, [r4, #32]
 800cb28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cb2c:	47e0      	blx	ip
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	dc06      	bgt.n	800cb40 <__sflush_r+0xf8>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	f04f 30ff 	mov.w	r0, #4294967295
 800cb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	e790      	b.n	800ca62 <__sflush_r+0x1a>
 800cb40:	4407      	add	r7, r0
 800cb42:	1a36      	subs	r6, r6, r0
 800cb44:	e7ea      	b.n	800cb1c <__sflush_r+0xd4>
 800cb46:	bf00      	nop
 800cb48:	dfbffffe 	.word	0xdfbffffe

0800cb4c <_fflush_r>:
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	690b      	ldr	r3, [r1, #16]
 800cb50:	4605      	mov	r5, r0
 800cb52:	460c      	mov	r4, r1
 800cb54:	b913      	cbnz	r3, 800cb5c <_fflush_r+0x10>
 800cb56:	2500      	movs	r5, #0
 800cb58:	4628      	mov	r0, r5
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	b118      	cbz	r0, 800cb66 <_fflush_r+0x1a>
 800cb5e:	6a03      	ldr	r3, [r0, #32]
 800cb60:	b90b      	cbnz	r3, 800cb66 <_fflush_r+0x1a>
 800cb62:	f7fc feab 	bl	80098bc <__sinit>
 800cb66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0f3      	beq.n	800cb56 <_fflush_r+0xa>
 800cb6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb70:	07d0      	lsls	r0, r2, #31
 800cb72:	d404      	bmi.n	800cb7e <_fflush_r+0x32>
 800cb74:	0599      	lsls	r1, r3, #22
 800cb76:	d402      	bmi.n	800cb7e <_fflush_r+0x32>
 800cb78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb7a:	f7fd f828 	bl	8009bce <__retarget_lock_acquire_recursive>
 800cb7e:	4628      	mov	r0, r5
 800cb80:	4621      	mov	r1, r4
 800cb82:	f7ff ff61 	bl	800ca48 <__sflush_r>
 800cb86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb88:	4605      	mov	r5, r0
 800cb8a:	07da      	lsls	r2, r3, #31
 800cb8c:	d4e4      	bmi.n	800cb58 <_fflush_r+0xc>
 800cb8e:	89a3      	ldrh	r3, [r4, #12]
 800cb90:	059b      	lsls	r3, r3, #22
 800cb92:	d4e1      	bmi.n	800cb58 <_fflush_r+0xc>
 800cb94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb96:	f7fd f81b 	bl	8009bd0 <__retarget_lock_release_recursive>
 800cb9a:	e7dd      	b.n	800cb58 <_fflush_r+0xc>

0800cb9c <__sccl>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	780b      	ldrb	r3, [r1, #0]
 800cba0:	4604      	mov	r4, r0
 800cba2:	2b5e      	cmp	r3, #94	; 0x5e
 800cba4:	bf0b      	itete	eq
 800cba6:	784b      	ldrbeq	r3, [r1, #1]
 800cba8:	1c4a      	addne	r2, r1, #1
 800cbaa:	1c8a      	addeq	r2, r1, #2
 800cbac:	2100      	movne	r1, #0
 800cbae:	bf08      	it	eq
 800cbb0:	2101      	moveq	r1, #1
 800cbb2:	3801      	subs	r0, #1
 800cbb4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cbb8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cbbc:	42a8      	cmp	r0, r5
 800cbbe:	d1fb      	bne.n	800cbb8 <__sccl+0x1c>
 800cbc0:	b90b      	cbnz	r3, 800cbc6 <__sccl+0x2a>
 800cbc2:	1e50      	subs	r0, r2, #1
 800cbc4:	bd70      	pop	{r4, r5, r6, pc}
 800cbc6:	f081 0101 	eor.w	r1, r1, #1
 800cbca:	4610      	mov	r0, r2
 800cbcc:	54e1      	strb	r1, [r4, r3]
 800cbce:	4602      	mov	r2, r0
 800cbd0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cbd4:	2d2d      	cmp	r5, #45	; 0x2d
 800cbd6:	d005      	beq.n	800cbe4 <__sccl+0x48>
 800cbd8:	2d5d      	cmp	r5, #93	; 0x5d
 800cbda:	d016      	beq.n	800cc0a <__sccl+0x6e>
 800cbdc:	2d00      	cmp	r5, #0
 800cbde:	d0f1      	beq.n	800cbc4 <__sccl+0x28>
 800cbe0:	462b      	mov	r3, r5
 800cbe2:	e7f2      	b.n	800cbca <__sccl+0x2e>
 800cbe4:	7846      	ldrb	r6, [r0, #1]
 800cbe6:	2e5d      	cmp	r6, #93	; 0x5d
 800cbe8:	d0fa      	beq.n	800cbe0 <__sccl+0x44>
 800cbea:	42b3      	cmp	r3, r6
 800cbec:	dcf8      	bgt.n	800cbe0 <__sccl+0x44>
 800cbee:	461a      	mov	r2, r3
 800cbf0:	3002      	adds	r0, #2
 800cbf2:	3201      	adds	r2, #1
 800cbf4:	4296      	cmp	r6, r2
 800cbf6:	54a1      	strb	r1, [r4, r2]
 800cbf8:	dcfb      	bgt.n	800cbf2 <__sccl+0x56>
 800cbfa:	1af2      	subs	r2, r6, r3
 800cbfc:	3a01      	subs	r2, #1
 800cbfe:	42b3      	cmp	r3, r6
 800cc00:	bfa8      	it	ge
 800cc02:	2200      	movge	r2, #0
 800cc04:	1c5d      	adds	r5, r3, #1
 800cc06:	18ab      	adds	r3, r5, r2
 800cc08:	e7e1      	b.n	800cbce <__sccl+0x32>
 800cc0a:	4610      	mov	r0, r2
 800cc0c:	e7da      	b.n	800cbc4 <__sccl+0x28>

0800cc0e <__submore>:
 800cc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc12:	460c      	mov	r4, r1
 800cc14:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cc16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc1a:	4299      	cmp	r1, r3
 800cc1c:	d11b      	bne.n	800cc56 <__submore+0x48>
 800cc1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cc22:	f7fd fed5 	bl	800a9d0 <_malloc_r>
 800cc26:	b918      	cbnz	r0, 800cc30 <__submore+0x22>
 800cc28:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc34:	63a3      	str	r3, [r4, #56]	; 0x38
 800cc36:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cc3a:	6360      	str	r0, [r4, #52]	; 0x34
 800cc3c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cc40:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cc44:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cc48:	7043      	strb	r3, [r0, #1]
 800cc4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cc4e:	7003      	strb	r3, [r0, #0]
 800cc50:	6020      	str	r0, [r4, #0]
 800cc52:	2000      	movs	r0, #0
 800cc54:	e7ea      	b.n	800cc2c <__submore+0x1e>
 800cc56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cc58:	0077      	lsls	r7, r6, #1
 800cc5a:	463a      	mov	r2, r7
 800cc5c:	f000 fbdd 	bl	800d41a <_realloc_r>
 800cc60:	4605      	mov	r5, r0
 800cc62:	2800      	cmp	r0, #0
 800cc64:	d0e0      	beq.n	800cc28 <__submore+0x1a>
 800cc66:	eb00 0806 	add.w	r8, r0, r6
 800cc6a:	4601      	mov	r1, r0
 800cc6c:	4632      	mov	r2, r6
 800cc6e:	4640      	mov	r0, r8
 800cc70:	f7fc ffbd 	bl	8009bee <memcpy>
 800cc74:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cc78:	f8c4 8000 	str.w	r8, [r4]
 800cc7c:	e7e9      	b.n	800cc52 <__submore+0x44>

0800cc7e <memmove>:
 800cc7e:	4288      	cmp	r0, r1
 800cc80:	b510      	push	{r4, lr}
 800cc82:	eb01 0402 	add.w	r4, r1, r2
 800cc86:	d902      	bls.n	800cc8e <memmove+0x10>
 800cc88:	4284      	cmp	r4, r0
 800cc8a:	4623      	mov	r3, r4
 800cc8c:	d807      	bhi.n	800cc9e <memmove+0x20>
 800cc8e:	1e43      	subs	r3, r0, #1
 800cc90:	42a1      	cmp	r1, r4
 800cc92:	d008      	beq.n	800cca6 <memmove+0x28>
 800cc94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc98:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc9c:	e7f8      	b.n	800cc90 <memmove+0x12>
 800cc9e:	4601      	mov	r1, r0
 800cca0:	4402      	add	r2, r0
 800cca2:	428a      	cmp	r2, r1
 800cca4:	d100      	bne.n	800cca8 <memmove+0x2a>
 800cca6:	bd10      	pop	{r4, pc}
 800cca8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccb0:	e7f7      	b.n	800cca2 <memmove+0x24>
	...

0800ccb4 <_sbrk_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	4d05      	ldr	r5, [pc, #20]	; (800ccd0 <_sbrk_r+0x1c>)
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7f5 f800 	bl	8001cc4 <_sbrk>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_sbrk_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_sbrk_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	200020c0 	.word	0x200020c0

0800ccd4 <nan>:
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	4901      	ldr	r1, [pc, #4]	; (800ccdc <nan+0x8>)
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	7ff80000 	.word	0x7ff80000

0800cce0 <__assert_func>:
 800cce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cce2:	4614      	mov	r4, r2
 800cce4:	461a      	mov	r2, r3
 800cce6:	4b09      	ldr	r3, [pc, #36]	; (800cd0c <__assert_func+0x2c>)
 800cce8:	4605      	mov	r5, r0
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	68d8      	ldr	r0, [r3, #12]
 800ccee:	b14c      	cbz	r4, 800cd04 <__assert_func+0x24>
 800ccf0:	4b07      	ldr	r3, [pc, #28]	; (800cd10 <__assert_func+0x30>)
 800ccf2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ccf6:	9100      	str	r1, [sp, #0]
 800ccf8:	462b      	mov	r3, r5
 800ccfa:	4906      	ldr	r1, [pc, #24]	; (800cd14 <__assert_func+0x34>)
 800ccfc:	f000 fc3e 	bl	800d57c <fiprintf>
 800cd00:	f000 fc4e 	bl	800d5a0 <abort>
 800cd04:	4b04      	ldr	r3, [pc, #16]	; (800cd18 <__assert_func+0x38>)
 800cd06:	461c      	mov	r4, r3
 800cd08:	e7f3      	b.n	800ccf2 <__assert_func+0x12>
 800cd0a:	bf00      	nop
 800cd0c:	2000007c 	.word	0x2000007c
 800cd10:	0800e255 	.word	0x0800e255
 800cd14:	0800e262 	.word	0x0800e262
 800cd18:	0800e290 	.word	0x0800e290

0800cd1c <_calloc_r>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	fba1 5402 	umull	r5, r4, r1, r2
 800cd22:	b934      	cbnz	r4, 800cd32 <_calloc_r+0x16>
 800cd24:	4629      	mov	r1, r5
 800cd26:	f7fd fe53 	bl	800a9d0 <_malloc_r>
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	b928      	cbnz	r0, 800cd3a <_calloc_r+0x1e>
 800cd2e:	4630      	mov	r0, r6
 800cd30:	bd70      	pop	{r4, r5, r6, pc}
 800cd32:	220c      	movs	r2, #12
 800cd34:	2600      	movs	r6, #0
 800cd36:	6002      	str	r2, [r0, #0]
 800cd38:	e7f9      	b.n	800cd2e <_calloc_r+0x12>
 800cd3a:	462a      	mov	r2, r5
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	f7fc feb6 	bl	8009aae <memset>
 800cd42:	e7f4      	b.n	800cd2e <_calloc_r+0x12>

0800cd44 <rshift>:
 800cd44:	6903      	ldr	r3, [r0, #16]
 800cd46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd4e:	f100 0414 	add.w	r4, r0, #20
 800cd52:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd56:	dd46      	ble.n	800cde6 <rshift+0xa2>
 800cd58:	f011 011f 	ands.w	r1, r1, #31
 800cd5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd64:	d10c      	bne.n	800cd80 <rshift+0x3c>
 800cd66:	4629      	mov	r1, r5
 800cd68:	f100 0710 	add.w	r7, r0, #16
 800cd6c:	42b1      	cmp	r1, r6
 800cd6e:	d335      	bcc.n	800cddc <rshift+0x98>
 800cd70:	1a9b      	subs	r3, r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	1eea      	subs	r2, r5, #3
 800cd76:	4296      	cmp	r6, r2
 800cd78:	bf38      	it	cc
 800cd7a:	2300      	movcc	r3, #0
 800cd7c:	4423      	add	r3, r4
 800cd7e:	e015      	b.n	800cdac <rshift+0x68>
 800cd80:	46a1      	mov	r9, r4
 800cd82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cd86:	f1c1 0820 	rsb	r8, r1, #32
 800cd8a:	40cf      	lsrs	r7, r1
 800cd8c:	f105 0e04 	add.w	lr, r5, #4
 800cd90:	4576      	cmp	r6, lr
 800cd92:	46f4      	mov	ip, lr
 800cd94:	d816      	bhi.n	800cdc4 <rshift+0x80>
 800cd96:	1a9a      	subs	r2, r3, r2
 800cd98:	0092      	lsls	r2, r2, #2
 800cd9a:	3a04      	subs	r2, #4
 800cd9c:	3501      	adds	r5, #1
 800cd9e:	42ae      	cmp	r6, r5
 800cda0:	bf38      	it	cc
 800cda2:	2200      	movcc	r2, #0
 800cda4:	18a3      	adds	r3, r4, r2
 800cda6:	50a7      	str	r7, [r4, r2]
 800cda8:	b107      	cbz	r7, 800cdac <rshift+0x68>
 800cdaa:	3304      	adds	r3, #4
 800cdac:	42a3      	cmp	r3, r4
 800cdae:	eba3 0204 	sub.w	r2, r3, r4
 800cdb2:	bf08      	it	eq
 800cdb4:	2300      	moveq	r3, #0
 800cdb6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cdba:	6102      	str	r2, [r0, #16]
 800cdbc:	bf08      	it	eq
 800cdbe:	6143      	streq	r3, [r0, #20]
 800cdc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdc4:	f8dc c000 	ldr.w	ip, [ip]
 800cdc8:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdcc:	ea4c 0707 	orr.w	r7, ip, r7
 800cdd0:	f849 7b04 	str.w	r7, [r9], #4
 800cdd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cdd8:	40cf      	lsrs	r7, r1
 800cdda:	e7d9      	b.n	800cd90 <rshift+0x4c>
 800cddc:	f851 cb04 	ldr.w	ip, [r1], #4
 800cde0:	f847 cf04 	str.w	ip, [r7, #4]!
 800cde4:	e7c2      	b.n	800cd6c <rshift+0x28>
 800cde6:	4623      	mov	r3, r4
 800cde8:	e7e0      	b.n	800cdac <rshift+0x68>

0800cdea <__hexdig_fun>:
 800cdea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cdee:	2b09      	cmp	r3, #9
 800cdf0:	d802      	bhi.n	800cdf8 <__hexdig_fun+0xe>
 800cdf2:	3820      	subs	r0, #32
 800cdf4:	b2c0      	uxtb	r0, r0
 800cdf6:	4770      	bx	lr
 800cdf8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cdfc:	2b05      	cmp	r3, #5
 800cdfe:	d801      	bhi.n	800ce04 <__hexdig_fun+0x1a>
 800ce00:	3847      	subs	r0, #71	; 0x47
 800ce02:	e7f7      	b.n	800cdf4 <__hexdig_fun+0xa>
 800ce04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce08:	2b05      	cmp	r3, #5
 800ce0a:	d801      	bhi.n	800ce10 <__hexdig_fun+0x26>
 800ce0c:	3827      	subs	r0, #39	; 0x27
 800ce0e:	e7f1      	b.n	800cdf4 <__hexdig_fun+0xa>
 800ce10:	2000      	movs	r0, #0
 800ce12:	4770      	bx	lr

0800ce14 <__gethex>:
 800ce14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce18:	4681      	mov	r9, r0
 800ce1a:	468a      	mov	sl, r1
 800ce1c:	4617      	mov	r7, r2
 800ce1e:	680a      	ldr	r2, [r1, #0]
 800ce20:	b085      	sub	sp, #20
 800ce22:	f102 0b02 	add.w	fp, r2, #2
 800ce26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce2e:	9302      	str	r3, [sp, #8]
 800ce30:	32fe      	adds	r2, #254	; 0xfe
 800ce32:	eb02 030b 	add.w	r3, r2, fp
 800ce36:	46d8      	mov	r8, fp
 800ce38:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ce3c:	9301      	str	r3, [sp, #4]
 800ce3e:	2830      	cmp	r0, #48	; 0x30
 800ce40:	d0f7      	beq.n	800ce32 <__gethex+0x1e>
 800ce42:	f7ff ffd2 	bl	800cdea <__hexdig_fun>
 800ce46:	4604      	mov	r4, r0
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d138      	bne.n	800cebe <__gethex+0xaa>
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	4640      	mov	r0, r8
 800ce50:	49a7      	ldr	r1, [pc, #668]	; (800d0f0 <__gethex+0x2dc>)
 800ce52:	f7fc fe34 	bl	8009abe <strncmp>
 800ce56:	4606      	mov	r6, r0
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d169      	bne.n	800cf30 <__gethex+0x11c>
 800ce5c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ce60:	465d      	mov	r5, fp
 800ce62:	f7ff ffc2 	bl	800cdea <__hexdig_fun>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d064      	beq.n	800cf34 <__gethex+0x120>
 800ce6a:	465a      	mov	r2, fp
 800ce6c:	7810      	ldrb	r0, [r2, #0]
 800ce6e:	4690      	mov	r8, r2
 800ce70:	2830      	cmp	r0, #48	; 0x30
 800ce72:	f102 0201 	add.w	r2, r2, #1
 800ce76:	d0f9      	beq.n	800ce6c <__gethex+0x58>
 800ce78:	f7ff ffb7 	bl	800cdea <__hexdig_fun>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	fab0 f480 	clz	r4, r0
 800ce82:	465e      	mov	r6, fp
 800ce84:	0964      	lsrs	r4, r4, #5
 800ce86:	9301      	str	r3, [sp, #4]
 800ce88:	4642      	mov	r2, r8
 800ce8a:	4615      	mov	r5, r2
 800ce8c:	7828      	ldrb	r0, [r5, #0]
 800ce8e:	3201      	adds	r2, #1
 800ce90:	f7ff ffab 	bl	800cdea <__hexdig_fun>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d1f8      	bne.n	800ce8a <__gethex+0x76>
 800ce98:	2201      	movs	r2, #1
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	4994      	ldr	r1, [pc, #592]	; (800d0f0 <__gethex+0x2dc>)
 800ce9e:	f7fc fe0e 	bl	8009abe <strncmp>
 800cea2:	b978      	cbnz	r0, 800cec4 <__gethex+0xb0>
 800cea4:	b946      	cbnz	r6, 800ceb8 <__gethex+0xa4>
 800cea6:	1c6e      	adds	r6, r5, #1
 800cea8:	4632      	mov	r2, r6
 800ceaa:	4615      	mov	r5, r2
 800ceac:	7828      	ldrb	r0, [r5, #0]
 800ceae:	3201      	adds	r2, #1
 800ceb0:	f7ff ff9b 	bl	800cdea <__hexdig_fun>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d1f8      	bne.n	800ceaa <__gethex+0x96>
 800ceb8:	1b73      	subs	r3, r6, r5
 800ceba:	009e      	lsls	r6, r3, #2
 800cebc:	e004      	b.n	800cec8 <__gethex+0xb4>
 800cebe:	2400      	movs	r4, #0
 800cec0:	4626      	mov	r6, r4
 800cec2:	e7e1      	b.n	800ce88 <__gethex+0x74>
 800cec4:	2e00      	cmp	r6, #0
 800cec6:	d1f7      	bne.n	800ceb8 <__gethex+0xa4>
 800cec8:	782b      	ldrb	r3, [r5, #0]
 800ceca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cece:	2b50      	cmp	r3, #80	; 0x50
 800ced0:	d13d      	bne.n	800cf4e <__gethex+0x13a>
 800ced2:	786b      	ldrb	r3, [r5, #1]
 800ced4:	2b2b      	cmp	r3, #43	; 0x2b
 800ced6:	d02f      	beq.n	800cf38 <__gethex+0x124>
 800ced8:	2b2d      	cmp	r3, #45	; 0x2d
 800ceda:	d031      	beq.n	800cf40 <__gethex+0x12c>
 800cedc:	f04f 0b00 	mov.w	fp, #0
 800cee0:	1c69      	adds	r1, r5, #1
 800cee2:	7808      	ldrb	r0, [r1, #0]
 800cee4:	f7ff ff81 	bl	800cdea <__hexdig_fun>
 800cee8:	1e42      	subs	r2, r0, #1
 800ceea:	b2d2      	uxtb	r2, r2
 800ceec:	2a18      	cmp	r2, #24
 800ceee:	d82e      	bhi.n	800cf4e <__gethex+0x13a>
 800cef0:	f1a0 0210 	sub.w	r2, r0, #16
 800cef4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cef8:	f7ff ff77 	bl	800cdea <__hexdig_fun>
 800cefc:	f100 3cff 	add.w	ip, r0, #4294967295
 800cf00:	fa5f fc8c 	uxtb.w	ip, ip
 800cf04:	f1bc 0f18 	cmp.w	ip, #24
 800cf08:	d91d      	bls.n	800cf46 <__gethex+0x132>
 800cf0a:	f1bb 0f00 	cmp.w	fp, #0
 800cf0e:	d000      	beq.n	800cf12 <__gethex+0xfe>
 800cf10:	4252      	negs	r2, r2
 800cf12:	4416      	add	r6, r2
 800cf14:	f8ca 1000 	str.w	r1, [sl]
 800cf18:	b1dc      	cbz	r4, 800cf52 <__gethex+0x13e>
 800cf1a:	9b01      	ldr	r3, [sp, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	bf14      	ite	ne
 800cf20:	f04f 0800 	movne.w	r8, #0
 800cf24:	f04f 0806 	moveq.w	r8, #6
 800cf28:	4640      	mov	r0, r8
 800cf2a:	b005      	add	sp, #20
 800cf2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf30:	4645      	mov	r5, r8
 800cf32:	4626      	mov	r6, r4
 800cf34:	2401      	movs	r4, #1
 800cf36:	e7c7      	b.n	800cec8 <__gethex+0xb4>
 800cf38:	f04f 0b00 	mov.w	fp, #0
 800cf3c:	1ca9      	adds	r1, r5, #2
 800cf3e:	e7d0      	b.n	800cee2 <__gethex+0xce>
 800cf40:	f04f 0b01 	mov.w	fp, #1
 800cf44:	e7fa      	b.n	800cf3c <__gethex+0x128>
 800cf46:	230a      	movs	r3, #10
 800cf48:	fb03 0002 	mla	r0, r3, r2, r0
 800cf4c:	e7d0      	b.n	800cef0 <__gethex+0xdc>
 800cf4e:	4629      	mov	r1, r5
 800cf50:	e7e0      	b.n	800cf14 <__gethex+0x100>
 800cf52:	4621      	mov	r1, r4
 800cf54:	eba5 0308 	sub.w	r3, r5, r8
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	2b07      	cmp	r3, #7
 800cf5c:	dc0a      	bgt.n	800cf74 <__gethex+0x160>
 800cf5e:	4648      	mov	r0, r9
 800cf60:	f7fd fdc2 	bl	800aae8 <_Balloc>
 800cf64:	4604      	mov	r4, r0
 800cf66:	b940      	cbnz	r0, 800cf7a <__gethex+0x166>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	21e4      	movs	r1, #228	; 0xe4
 800cf6c:	4b61      	ldr	r3, [pc, #388]	; (800d0f4 <__gethex+0x2e0>)
 800cf6e:	4862      	ldr	r0, [pc, #392]	; (800d0f8 <__gethex+0x2e4>)
 800cf70:	f7ff feb6 	bl	800cce0 <__assert_func>
 800cf74:	3101      	adds	r1, #1
 800cf76:	105b      	asrs	r3, r3, #1
 800cf78:	e7ef      	b.n	800cf5a <__gethex+0x146>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	469b      	mov	fp, r3
 800cf7e:	f100 0a14 	add.w	sl, r0, #20
 800cf82:	f8cd a004 	str.w	sl, [sp, #4]
 800cf86:	45a8      	cmp	r8, r5
 800cf88:	d344      	bcc.n	800d014 <__gethex+0x200>
 800cf8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf8e:	4658      	mov	r0, fp
 800cf90:	f848 bb04 	str.w	fp, [r8], #4
 800cf94:	eba8 080a 	sub.w	r8, r8, sl
 800cf98:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800cf9c:	6122      	str	r2, [r4, #16]
 800cf9e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800cfa2:	f7fd fe93 	bl	800accc <__hi0bits>
 800cfa6:	683d      	ldr	r5, [r7, #0]
 800cfa8:	eba8 0800 	sub.w	r8, r8, r0
 800cfac:	45a8      	cmp	r8, r5
 800cfae:	dd59      	ble.n	800d064 <__gethex+0x250>
 800cfb0:	eba8 0805 	sub.w	r8, r8, r5
 800cfb4:	4641      	mov	r1, r8
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f7fe fa11 	bl	800b3de <__any_on>
 800cfbc:	4683      	mov	fp, r0
 800cfbe:	b1b8      	cbz	r0, 800cff0 <__gethex+0x1dc>
 800cfc0:	f04f 0b01 	mov.w	fp, #1
 800cfc4:	f108 33ff 	add.w	r3, r8, #4294967295
 800cfc8:	1159      	asrs	r1, r3, #5
 800cfca:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cfce:	f003 021f 	and.w	r2, r3, #31
 800cfd2:	fa0b f202 	lsl.w	r2, fp, r2
 800cfd6:	420a      	tst	r2, r1
 800cfd8:	d00a      	beq.n	800cff0 <__gethex+0x1dc>
 800cfda:	455b      	cmp	r3, fp
 800cfdc:	dd06      	ble.n	800cfec <__gethex+0x1d8>
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f1a8 0102 	sub.w	r1, r8, #2
 800cfe4:	f7fe f9fb 	bl	800b3de <__any_on>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	d138      	bne.n	800d05e <__gethex+0x24a>
 800cfec:	f04f 0b02 	mov.w	fp, #2
 800cff0:	4641      	mov	r1, r8
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7ff fea6 	bl	800cd44 <rshift>
 800cff8:	4446      	add	r6, r8
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	42b3      	cmp	r3, r6
 800cffe:	da41      	bge.n	800d084 <__gethex+0x270>
 800d000:	4621      	mov	r1, r4
 800d002:	4648      	mov	r0, r9
 800d004:	f7fd fdb0 	bl	800ab68 <_Bfree>
 800d008:	2300      	movs	r3, #0
 800d00a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d00c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d010:	6013      	str	r3, [r2, #0]
 800d012:	e789      	b.n	800cf28 <__gethex+0x114>
 800d014:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d018:	2a2e      	cmp	r2, #46	; 0x2e
 800d01a:	d014      	beq.n	800d046 <__gethex+0x232>
 800d01c:	2b20      	cmp	r3, #32
 800d01e:	d106      	bne.n	800d02e <__gethex+0x21a>
 800d020:	9b01      	ldr	r3, [sp, #4]
 800d022:	f843 bb04 	str.w	fp, [r3], #4
 800d026:	f04f 0b00 	mov.w	fp, #0
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	465b      	mov	r3, fp
 800d02e:	7828      	ldrb	r0, [r5, #0]
 800d030:	9303      	str	r3, [sp, #12]
 800d032:	f7ff feda 	bl	800cdea <__hexdig_fun>
 800d036:	9b03      	ldr	r3, [sp, #12]
 800d038:	f000 000f 	and.w	r0, r0, #15
 800d03c:	4098      	lsls	r0, r3
 800d03e:	ea4b 0b00 	orr.w	fp, fp, r0
 800d042:	3304      	adds	r3, #4
 800d044:	e79f      	b.n	800cf86 <__gethex+0x172>
 800d046:	45a8      	cmp	r8, r5
 800d048:	d8e8      	bhi.n	800d01c <__gethex+0x208>
 800d04a:	2201      	movs	r2, #1
 800d04c:	4628      	mov	r0, r5
 800d04e:	4928      	ldr	r1, [pc, #160]	; (800d0f0 <__gethex+0x2dc>)
 800d050:	9303      	str	r3, [sp, #12]
 800d052:	f7fc fd34 	bl	8009abe <strncmp>
 800d056:	9b03      	ldr	r3, [sp, #12]
 800d058:	2800      	cmp	r0, #0
 800d05a:	d1df      	bne.n	800d01c <__gethex+0x208>
 800d05c:	e793      	b.n	800cf86 <__gethex+0x172>
 800d05e:	f04f 0b03 	mov.w	fp, #3
 800d062:	e7c5      	b.n	800cff0 <__gethex+0x1dc>
 800d064:	da0b      	bge.n	800d07e <__gethex+0x26a>
 800d066:	eba5 0808 	sub.w	r8, r5, r8
 800d06a:	4621      	mov	r1, r4
 800d06c:	4642      	mov	r2, r8
 800d06e:	4648      	mov	r0, r9
 800d070:	f7fd ff92 	bl	800af98 <__lshift>
 800d074:	4604      	mov	r4, r0
 800d076:	eba6 0608 	sub.w	r6, r6, r8
 800d07a:	f100 0a14 	add.w	sl, r0, #20
 800d07e:	f04f 0b00 	mov.w	fp, #0
 800d082:	e7ba      	b.n	800cffa <__gethex+0x1e6>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	42b3      	cmp	r3, r6
 800d088:	dd74      	ble.n	800d174 <__gethex+0x360>
 800d08a:	1b9e      	subs	r6, r3, r6
 800d08c:	42b5      	cmp	r5, r6
 800d08e:	dc35      	bgt.n	800d0fc <__gethex+0x2e8>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2b02      	cmp	r3, #2
 800d094:	d023      	beq.n	800d0de <__gethex+0x2ca>
 800d096:	2b03      	cmp	r3, #3
 800d098:	d025      	beq.n	800d0e6 <__gethex+0x2d2>
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d115      	bne.n	800d0ca <__gethex+0x2b6>
 800d09e:	42b5      	cmp	r5, r6
 800d0a0:	d113      	bne.n	800d0ca <__gethex+0x2b6>
 800d0a2:	2d01      	cmp	r5, #1
 800d0a4:	d10b      	bne.n	800d0be <__gethex+0x2aa>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	9a02      	ldr	r2, [sp, #8]
 800d0aa:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	6123      	str	r3, [r4, #16]
 800d0b4:	f8ca 3000 	str.w	r3, [sl]
 800d0b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0ba:	601c      	str	r4, [r3, #0]
 800d0bc:	e734      	b.n	800cf28 <__gethex+0x114>
 800d0be:	4620      	mov	r0, r4
 800d0c0:	1e69      	subs	r1, r5, #1
 800d0c2:	f7fe f98c 	bl	800b3de <__any_on>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d1ed      	bne.n	800d0a6 <__gethex+0x292>
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	4648      	mov	r0, r9
 800d0ce:	f7fd fd4b 	bl	800ab68 <_Bfree>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0d6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d0da:	6013      	str	r3, [r2, #0]
 800d0dc:	e724      	b.n	800cf28 <__gethex+0x114>
 800d0de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1f2      	bne.n	800d0ca <__gethex+0x2b6>
 800d0e4:	e7df      	b.n	800d0a6 <__gethex+0x292>
 800d0e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1dc      	bne.n	800d0a6 <__gethex+0x292>
 800d0ec:	e7ed      	b.n	800d0ca <__gethex+0x2b6>
 800d0ee:	bf00      	nop
 800d0f0:	0800e0cc 	.word	0x0800e0cc
 800d0f4:	0800df61 	.word	0x0800df61
 800d0f8:	0800e291 	.word	0x0800e291
 800d0fc:	f106 38ff 	add.w	r8, r6, #4294967295
 800d100:	f1bb 0f00 	cmp.w	fp, #0
 800d104:	d133      	bne.n	800d16e <__gethex+0x35a>
 800d106:	f1b8 0f00 	cmp.w	r8, #0
 800d10a:	d004      	beq.n	800d116 <__gethex+0x302>
 800d10c:	4641      	mov	r1, r8
 800d10e:	4620      	mov	r0, r4
 800d110:	f7fe f965 	bl	800b3de <__any_on>
 800d114:	4683      	mov	fp, r0
 800d116:	2301      	movs	r3, #1
 800d118:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d11c:	f008 081f 	and.w	r8, r8, #31
 800d120:	fa03 f308 	lsl.w	r3, r3, r8
 800d124:	f04f 0802 	mov.w	r8, #2
 800d128:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d12c:	4631      	mov	r1, r6
 800d12e:	4213      	tst	r3, r2
 800d130:	4620      	mov	r0, r4
 800d132:	bf18      	it	ne
 800d134:	f04b 0b02 	orrne.w	fp, fp, #2
 800d138:	1bad      	subs	r5, r5, r6
 800d13a:	f7ff fe03 	bl	800cd44 <rshift>
 800d13e:	687e      	ldr	r6, [r7, #4]
 800d140:	f1bb 0f00 	cmp.w	fp, #0
 800d144:	d04a      	beq.n	800d1dc <__gethex+0x3c8>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d016      	beq.n	800d17a <__gethex+0x366>
 800d14c:	2b03      	cmp	r3, #3
 800d14e:	d018      	beq.n	800d182 <__gethex+0x36e>
 800d150:	2b01      	cmp	r3, #1
 800d152:	d109      	bne.n	800d168 <__gethex+0x354>
 800d154:	f01b 0f02 	tst.w	fp, #2
 800d158:	d006      	beq.n	800d168 <__gethex+0x354>
 800d15a:	f8da 3000 	ldr.w	r3, [sl]
 800d15e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d162:	f01b 0f01 	tst.w	fp, #1
 800d166:	d10f      	bne.n	800d188 <__gethex+0x374>
 800d168:	f048 0810 	orr.w	r8, r8, #16
 800d16c:	e036      	b.n	800d1dc <__gethex+0x3c8>
 800d16e:	f04f 0b01 	mov.w	fp, #1
 800d172:	e7d0      	b.n	800d116 <__gethex+0x302>
 800d174:	f04f 0801 	mov.w	r8, #1
 800d178:	e7e2      	b.n	800d140 <__gethex+0x32c>
 800d17a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d17c:	f1c3 0301 	rsb	r3, r3, #1
 800d180:	930f      	str	r3, [sp, #60]	; 0x3c
 800d182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d184:	2b00      	cmp	r3, #0
 800d186:	d0ef      	beq.n	800d168 <__gethex+0x354>
 800d188:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d18c:	f104 0214 	add.w	r2, r4, #20
 800d190:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d194:	9301      	str	r3, [sp, #4]
 800d196:	2300      	movs	r3, #0
 800d198:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d19c:	4694      	mov	ip, r2
 800d19e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d1a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d1a6:	d01e      	beq.n	800d1e6 <__gethex+0x3d2>
 800d1a8:	3101      	adds	r1, #1
 800d1aa:	f8cc 1000 	str.w	r1, [ip]
 800d1ae:	f1b8 0f02 	cmp.w	r8, #2
 800d1b2:	f104 0214 	add.w	r2, r4, #20
 800d1b6:	d13d      	bne.n	800d234 <__gethex+0x420>
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	42ab      	cmp	r3, r5
 800d1be:	d10b      	bne.n	800d1d8 <__gethex+0x3c4>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	1169      	asrs	r1, r5, #5
 800d1c4:	f005 051f 	and.w	r5, r5, #31
 800d1c8:	fa03 f505 	lsl.w	r5, r3, r5
 800d1cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1d0:	421d      	tst	r5, r3
 800d1d2:	bf18      	it	ne
 800d1d4:	f04f 0801 	movne.w	r8, #1
 800d1d8:	f048 0820 	orr.w	r8, r8, #32
 800d1dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1de:	601c      	str	r4, [r3, #0]
 800d1e0:	9b02      	ldr	r3, [sp, #8]
 800d1e2:	601e      	str	r6, [r3, #0]
 800d1e4:	e6a0      	b.n	800cf28 <__gethex+0x114>
 800d1e6:	4290      	cmp	r0, r2
 800d1e8:	f842 3c04 	str.w	r3, [r2, #-4]
 800d1ec:	d8d6      	bhi.n	800d19c <__gethex+0x388>
 800d1ee:	68a2      	ldr	r2, [r4, #8]
 800d1f0:	4593      	cmp	fp, r2
 800d1f2:	db17      	blt.n	800d224 <__gethex+0x410>
 800d1f4:	6861      	ldr	r1, [r4, #4]
 800d1f6:	4648      	mov	r0, r9
 800d1f8:	3101      	adds	r1, #1
 800d1fa:	f7fd fc75 	bl	800aae8 <_Balloc>
 800d1fe:	4682      	mov	sl, r0
 800d200:	b918      	cbnz	r0, 800d20a <__gethex+0x3f6>
 800d202:	4602      	mov	r2, r0
 800d204:	2184      	movs	r1, #132	; 0x84
 800d206:	4b1a      	ldr	r3, [pc, #104]	; (800d270 <__gethex+0x45c>)
 800d208:	e6b1      	b.n	800cf6e <__gethex+0x15a>
 800d20a:	6922      	ldr	r2, [r4, #16]
 800d20c:	f104 010c 	add.w	r1, r4, #12
 800d210:	3202      	adds	r2, #2
 800d212:	0092      	lsls	r2, r2, #2
 800d214:	300c      	adds	r0, #12
 800d216:	f7fc fcea 	bl	8009bee <memcpy>
 800d21a:	4621      	mov	r1, r4
 800d21c:	4648      	mov	r0, r9
 800d21e:	f7fd fca3 	bl	800ab68 <_Bfree>
 800d222:	4654      	mov	r4, sl
 800d224:	6922      	ldr	r2, [r4, #16]
 800d226:	1c51      	adds	r1, r2, #1
 800d228:	6121      	str	r1, [r4, #16]
 800d22a:	2101      	movs	r1, #1
 800d22c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d230:	6151      	str	r1, [r2, #20]
 800d232:	e7bc      	b.n	800d1ae <__gethex+0x39a>
 800d234:	6921      	ldr	r1, [r4, #16]
 800d236:	4559      	cmp	r1, fp
 800d238:	dd0b      	ble.n	800d252 <__gethex+0x43e>
 800d23a:	2101      	movs	r1, #1
 800d23c:	4620      	mov	r0, r4
 800d23e:	f7ff fd81 	bl	800cd44 <rshift>
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	3601      	adds	r6, #1
 800d246:	42b3      	cmp	r3, r6
 800d248:	f6ff aeda 	blt.w	800d000 <__gethex+0x1ec>
 800d24c:	f04f 0801 	mov.w	r8, #1
 800d250:	e7c2      	b.n	800d1d8 <__gethex+0x3c4>
 800d252:	f015 051f 	ands.w	r5, r5, #31
 800d256:	d0f9      	beq.n	800d24c <__gethex+0x438>
 800d258:	9b01      	ldr	r3, [sp, #4]
 800d25a:	f1c5 0520 	rsb	r5, r5, #32
 800d25e:	441a      	add	r2, r3
 800d260:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d264:	f7fd fd32 	bl	800accc <__hi0bits>
 800d268:	42a8      	cmp	r0, r5
 800d26a:	dbe6      	blt.n	800d23a <__gethex+0x426>
 800d26c:	e7ee      	b.n	800d24c <__gethex+0x438>
 800d26e:	bf00      	nop
 800d270:	0800df61 	.word	0x0800df61

0800d274 <L_shift>:
 800d274:	f1c2 0208 	rsb	r2, r2, #8
 800d278:	0092      	lsls	r2, r2, #2
 800d27a:	b570      	push	{r4, r5, r6, lr}
 800d27c:	f1c2 0620 	rsb	r6, r2, #32
 800d280:	6843      	ldr	r3, [r0, #4]
 800d282:	6804      	ldr	r4, [r0, #0]
 800d284:	fa03 f506 	lsl.w	r5, r3, r6
 800d288:	432c      	orrs	r4, r5
 800d28a:	40d3      	lsrs	r3, r2
 800d28c:	6004      	str	r4, [r0, #0]
 800d28e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d292:	4288      	cmp	r0, r1
 800d294:	d3f4      	bcc.n	800d280 <L_shift+0xc>
 800d296:	bd70      	pop	{r4, r5, r6, pc}

0800d298 <__match>:
 800d298:	b530      	push	{r4, r5, lr}
 800d29a:	6803      	ldr	r3, [r0, #0]
 800d29c:	3301      	adds	r3, #1
 800d29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2a2:	b914      	cbnz	r4, 800d2aa <__match+0x12>
 800d2a4:	6003      	str	r3, [r0, #0]
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	bd30      	pop	{r4, r5, pc}
 800d2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2b2:	2d19      	cmp	r5, #25
 800d2b4:	bf98      	it	ls
 800d2b6:	3220      	addls	r2, #32
 800d2b8:	42a2      	cmp	r2, r4
 800d2ba:	d0f0      	beq.n	800d29e <__match+0x6>
 800d2bc:	2000      	movs	r0, #0
 800d2be:	e7f3      	b.n	800d2a8 <__match+0x10>

0800d2c0 <__hexnan>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	2500      	movs	r5, #0
 800d2c6:	680b      	ldr	r3, [r1, #0]
 800d2c8:	4682      	mov	sl, r0
 800d2ca:	115e      	asrs	r6, r3, #5
 800d2cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2d0:	f013 031f 	ands.w	r3, r3, #31
 800d2d4:	bf18      	it	ne
 800d2d6:	3604      	addne	r6, #4
 800d2d8:	1f37      	subs	r7, r6, #4
 800d2da:	4690      	mov	r8, r2
 800d2dc:	46b9      	mov	r9, r7
 800d2de:	463c      	mov	r4, r7
 800d2e0:	46ab      	mov	fp, r5
 800d2e2:	b087      	sub	sp, #28
 800d2e4:	6801      	ldr	r1, [r0, #0]
 800d2e6:	9301      	str	r3, [sp, #4]
 800d2e8:	f846 5c04 	str.w	r5, [r6, #-4]
 800d2ec:	9502      	str	r5, [sp, #8]
 800d2ee:	784a      	ldrb	r2, [r1, #1]
 800d2f0:	1c4b      	adds	r3, r1, #1
 800d2f2:	9303      	str	r3, [sp, #12]
 800d2f4:	b342      	cbz	r2, 800d348 <__hexnan+0x88>
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	9105      	str	r1, [sp, #20]
 800d2fa:	9204      	str	r2, [sp, #16]
 800d2fc:	f7ff fd75 	bl	800cdea <__hexdig_fun>
 800d300:	2800      	cmp	r0, #0
 800d302:	d14f      	bne.n	800d3a4 <__hexnan+0xe4>
 800d304:	9a04      	ldr	r2, [sp, #16]
 800d306:	9905      	ldr	r1, [sp, #20]
 800d308:	2a20      	cmp	r2, #32
 800d30a:	d818      	bhi.n	800d33e <__hexnan+0x7e>
 800d30c:	9b02      	ldr	r3, [sp, #8]
 800d30e:	459b      	cmp	fp, r3
 800d310:	dd13      	ble.n	800d33a <__hexnan+0x7a>
 800d312:	454c      	cmp	r4, r9
 800d314:	d206      	bcs.n	800d324 <__hexnan+0x64>
 800d316:	2d07      	cmp	r5, #7
 800d318:	dc04      	bgt.n	800d324 <__hexnan+0x64>
 800d31a:	462a      	mov	r2, r5
 800d31c:	4649      	mov	r1, r9
 800d31e:	4620      	mov	r0, r4
 800d320:	f7ff ffa8 	bl	800d274 <L_shift>
 800d324:	4544      	cmp	r4, r8
 800d326:	d950      	bls.n	800d3ca <__hexnan+0x10a>
 800d328:	2300      	movs	r3, #0
 800d32a:	f1a4 0904 	sub.w	r9, r4, #4
 800d32e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d332:	461d      	mov	r5, r3
 800d334:	464c      	mov	r4, r9
 800d336:	f8cd b008 	str.w	fp, [sp, #8]
 800d33a:	9903      	ldr	r1, [sp, #12]
 800d33c:	e7d7      	b.n	800d2ee <__hexnan+0x2e>
 800d33e:	2a29      	cmp	r2, #41	; 0x29
 800d340:	d155      	bne.n	800d3ee <__hexnan+0x12e>
 800d342:	3102      	adds	r1, #2
 800d344:	f8ca 1000 	str.w	r1, [sl]
 800d348:	f1bb 0f00 	cmp.w	fp, #0
 800d34c:	d04f      	beq.n	800d3ee <__hexnan+0x12e>
 800d34e:	454c      	cmp	r4, r9
 800d350:	d206      	bcs.n	800d360 <__hexnan+0xa0>
 800d352:	2d07      	cmp	r5, #7
 800d354:	dc04      	bgt.n	800d360 <__hexnan+0xa0>
 800d356:	462a      	mov	r2, r5
 800d358:	4649      	mov	r1, r9
 800d35a:	4620      	mov	r0, r4
 800d35c:	f7ff ff8a 	bl	800d274 <L_shift>
 800d360:	4544      	cmp	r4, r8
 800d362:	d934      	bls.n	800d3ce <__hexnan+0x10e>
 800d364:	4623      	mov	r3, r4
 800d366:	f1a8 0204 	sub.w	r2, r8, #4
 800d36a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d36e:	429f      	cmp	r7, r3
 800d370:	f842 1f04 	str.w	r1, [r2, #4]!
 800d374:	d2f9      	bcs.n	800d36a <__hexnan+0xaa>
 800d376:	1b3b      	subs	r3, r7, r4
 800d378:	f023 0303 	bic.w	r3, r3, #3
 800d37c:	3304      	adds	r3, #4
 800d37e:	3e03      	subs	r6, #3
 800d380:	3401      	adds	r4, #1
 800d382:	42a6      	cmp	r6, r4
 800d384:	bf38      	it	cc
 800d386:	2304      	movcc	r3, #4
 800d388:	2200      	movs	r2, #0
 800d38a:	4443      	add	r3, r8
 800d38c:	f843 2b04 	str.w	r2, [r3], #4
 800d390:	429f      	cmp	r7, r3
 800d392:	d2fb      	bcs.n	800d38c <__hexnan+0xcc>
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	b91b      	cbnz	r3, 800d3a0 <__hexnan+0xe0>
 800d398:	4547      	cmp	r7, r8
 800d39a:	d126      	bne.n	800d3ea <__hexnan+0x12a>
 800d39c:	2301      	movs	r3, #1
 800d39e:	603b      	str	r3, [r7, #0]
 800d3a0:	2005      	movs	r0, #5
 800d3a2:	e025      	b.n	800d3f0 <__hexnan+0x130>
 800d3a4:	3501      	adds	r5, #1
 800d3a6:	2d08      	cmp	r5, #8
 800d3a8:	f10b 0b01 	add.w	fp, fp, #1
 800d3ac:	dd06      	ble.n	800d3bc <__hexnan+0xfc>
 800d3ae:	4544      	cmp	r4, r8
 800d3b0:	d9c3      	bls.n	800d33a <__hexnan+0x7a>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	2501      	movs	r5, #1
 800d3b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3ba:	3c04      	subs	r4, #4
 800d3bc:	6822      	ldr	r2, [r4, #0]
 800d3be:	f000 000f 	and.w	r0, r0, #15
 800d3c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3c6:	6020      	str	r0, [r4, #0]
 800d3c8:	e7b7      	b.n	800d33a <__hexnan+0x7a>
 800d3ca:	2508      	movs	r5, #8
 800d3cc:	e7b5      	b.n	800d33a <__hexnan+0x7a>
 800d3ce:	9b01      	ldr	r3, [sp, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d0df      	beq.n	800d394 <__hexnan+0xd4>
 800d3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d8:	f1c3 0320 	rsb	r3, r3, #32
 800d3dc:	40da      	lsrs	r2, r3
 800d3de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800d3e8:	e7d4      	b.n	800d394 <__hexnan+0xd4>
 800d3ea:	3f04      	subs	r7, #4
 800d3ec:	e7d2      	b.n	800d394 <__hexnan+0xd4>
 800d3ee:	2004      	movs	r0, #4
 800d3f0:	b007      	add	sp, #28
 800d3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3f6 <__ascii_mbtowc>:
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	b901      	cbnz	r1, 800d3fc <__ascii_mbtowc+0x6>
 800d3fa:	a901      	add	r1, sp, #4
 800d3fc:	b142      	cbz	r2, 800d410 <__ascii_mbtowc+0x1a>
 800d3fe:	b14b      	cbz	r3, 800d414 <__ascii_mbtowc+0x1e>
 800d400:	7813      	ldrb	r3, [r2, #0]
 800d402:	600b      	str	r3, [r1, #0]
 800d404:	7812      	ldrb	r2, [r2, #0]
 800d406:	1e10      	subs	r0, r2, #0
 800d408:	bf18      	it	ne
 800d40a:	2001      	movne	r0, #1
 800d40c:	b002      	add	sp, #8
 800d40e:	4770      	bx	lr
 800d410:	4610      	mov	r0, r2
 800d412:	e7fb      	b.n	800d40c <__ascii_mbtowc+0x16>
 800d414:	f06f 0001 	mvn.w	r0, #1
 800d418:	e7f8      	b.n	800d40c <__ascii_mbtowc+0x16>

0800d41a <_realloc_r>:
 800d41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d41e:	4680      	mov	r8, r0
 800d420:	4614      	mov	r4, r2
 800d422:	460e      	mov	r6, r1
 800d424:	b921      	cbnz	r1, 800d430 <_realloc_r+0x16>
 800d426:	4611      	mov	r1, r2
 800d428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d42c:	f7fd bad0 	b.w	800a9d0 <_malloc_r>
 800d430:	b92a      	cbnz	r2, 800d43e <_realloc_r+0x24>
 800d432:	f7fd fa5d 	bl	800a8f0 <_free_r>
 800d436:	4625      	mov	r5, r4
 800d438:	4628      	mov	r0, r5
 800d43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d43e:	f000 f8b6 	bl	800d5ae <_malloc_usable_size_r>
 800d442:	4284      	cmp	r4, r0
 800d444:	4607      	mov	r7, r0
 800d446:	d802      	bhi.n	800d44e <_realloc_r+0x34>
 800d448:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d44c:	d812      	bhi.n	800d474 <_realloc_r+0x5a>
 800d44e:	4621      	mov	r1, r4
 800d450:	4640      	mov	r0, r8
 800d452:	f7fd fabd 	bl	800a9d0 <_malloc_r>
 800d456:	4605      	mov	r5, r0
 800d458:	2800      	cmp	r0, #0
 800d45a:	d0ed      	beq.n	800d438 <_realloc_r+0x1e>
 800d45c:	42bc      	cmp	r4, r7
 800d45e:	4622      	mov	r2, r4
 800d460:	4631      	mov	r1, r6
 800d462:	bf28      	it	cs
 800d464:	463a      	movcs	r2, r7
 800d466:	f7fc fbc2 	bl	8009bee <memcpy>
 800d46a:	4631      	mov	r1, r6
 800d46c:	4640      	mov	r0, r8
 800d46e:	f7fd fa3f 	bl	800a8f0 <_free_r>
 800d472:	e7e1      	b.n	800d438 <_realloc_r+0x1e>
 800d474:	4635      	mov	r5, r6
 800d476:	e7df      	b.n	800d438 <_realloc_r+0x1e>

0800d478 <_strtoul_l.constprop.0>:
 800d478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d47c:	4686      	mov	lr, r0
 800d47e:	460d      	mov	r5, r1
 800d480:	4f35      	ldr	r7, [pc, #212]	; (800d558 <_strtoul_l.constprop.0+0xe0>)
 800d482:	4628      	mov	r0, r5
 800d484:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d488:	5d3e      	ldrb	r6, [r7, r4]
 800d48a:	f016 0608 	ands.w	r6, r6, #8
 800d48e:	d1f8      	bne.n	800d482 <_strtoul_l.constprop.0+0xa>
 800d490:	2c2d      	cmp	r4, #45	; 0x2d
 800d492:	d130      	bne.n	800d4f6 <_strtoul_l.constprop.0+0x7e>
 800d494:	2601      	movs	r6, #1
 800d496:	782c      	ldrb	r4, [r5, #0]
 800d498:	1c85      	adds	r5, r0, #2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d057      	beq.n	800d54e <_strtoul_l.constprop.0+0xd6>
 800d49e:	2b10      	cmp	r3, #16
 800d4a0:	d109      	bne.n	800d4b6 <_strtoul_l.constprop.0+0x3e>
 800d4a2:	2c30      	cmp	r4, #48	; 0x30
 800d4a4:	d107      	bne.n	800d4b6 <_strtoul_l.constprop.0+0x3e>
 800d4a6:	7828      	ldrb	r0, [r5, #0]
 800d4a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d4ac:	2858      	cmp	r0, #88	; 0x58
 800d4ae:	d149      	bne.n	800d544 <_strtoul_l.constprop.0+0xcc>
 800d4b0:	2310      	movs	r3, #16
 800d4b2:	786c      	ldrb	r4, [r5, #1]
 800d4b4:	3502      	adds	r5, #2
 800d4b6:	f04f 38ff 	mov.w	r8, #4294967295
 800d4ba:	fbb8 f8f3 	udiv	r8, r8, r3
 800d4be:	2700      	movs	r7, #0
 800d4c0:	fb03 f908 	mul.w	r9, r3, r8
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	ea6f 0909 	mvn.w	r9, r9
 800d4ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d4ce:	f1bc 0f09 	cmp.w	ip, #9
 800d4d2:	d815      	bhi.n	800d500 <_strtoul_l.constprop.0+0x88>
 800d4d4:	4664      	mov	r4, ip
 800d4d6:	42a3      	cmp	r3, r4
 800d4d8:	dd23      	ble.n	800d522 <_strtoul_l.constprop.0+0xaa>
 800d4da:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d4de:	d007      	beq.n	800d4f0 <_strtoul_l.constprop.0+0x78>
 800d4e0:	4580      	cmp	r8, r0
 800d4e2:	d31b      	bcc.n	800d51c <_strtoul_l.constprop.0+0xa4>
 800d4e4:	d101      	bne.n	800d4ea <_strtoul_l.constprop.0+0x72>
 800d4e6:	45a1      	cmp	r9, r4
 800d4e8:	db18      	blt.n	800d51c <_strtoul_l.constprop.0+0xa4>
 800d4ea:	2701      	movs	r7, #1
 800d4ec:	fb00 4003 	mla	r0, r0, r3, r4
 800d4f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4f4:	e7e9      	b.n	800d4ca <_strtoul_l.constprop.0+0x52>
 800d4f6:	2c2b      	cmp	r4, #43	; 0x2b
 800d4f8:	bf04      	itt	eq
 800d4fa:	782c      	ldrbeq	r4, [r5, #0]
 800d4fc:	1c85      	addeq	r5, r0, #2
 800d4fe:	e7cc      	b.n	800d49a <_strtoul_l.constprop.0+0x22>
 800d500:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d504:	f1bc 0f19 	cmp.w	ip, #25
 800d508:	d801      	bhi.n	800d50e <_strtoul_l.constprop.0+0x96>
 800d50a:	3c37      	subs	r4, #55	; 0x37
 800d50c:	e7e3      	b.n	800d4d6 <_strtoul_l.constprop.0+0x5e>
 800d50e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d512:	f1bc 0f19 	cmp.w	ip, #25
 800d516:	d804      	bhi.n	800d522 <_strtoul_l.constprop.0+0xaa>
 800d518:	3c57      	subs	r4, #87	; 0x57
 800d51a:	e7dc      	b.n	800d4d6 <_strtoul_l.constprop.0+0x5e>
 800d51c:	f04f 37ff 	mov.w	r7, #4294967295
 800d520:	e7e6      	b.n	800d4f0 <_strtoul_l.constprop.0+0x78>
 800d522:	1c7b      	adds	r3, r7, #1
 800d524:	d106      	bne.n	800d534 <_strtoul_l.constprop.0+0xbc>
 800d526:	2322      	movs	r3, #34	; 0x22
 800d528:	4638      	mov	r0, r7
 800d52a:	f8ce 3000 	str.w	r3, [lr]
 800d52e:	b932      	cbnz	r2, 800d53e <_strtoul_l.constprop.0+0xc6>
 800d530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d534:	b106      	cbz	r6, 800d538 <_strtoul_l.constprop.0+0xc0>
 800d536:	4240      	negs	r0, r0
 800d538:	2a00      	cmp	r2, #0
 800d53a:	d0f9      	beq.n	800d530 <_strtoul_l.constprop.0+0xb8>
 800d53c:	b107      	cbz	r7, 800d540 <_strtoul_l.constprop.0+0xc8>
 800d53e:	1e69      	subs	r1, r5, #1
 800d540:	6011      	str	r1, [r2, #0]
 800d542:	e7f5      	b.n	800d530 <_strtoul_l.constprop.0+0xb8>
 800d544:	2430      	movs	r4, #48	; 0x30
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1b5      	bne.n	800d4b6 <_strtoul_l.constprop.0+0x3e>
 800d54a:	2308      	movs	r3, #8
 800d54c:	e7b3      	b.n	800d4b6 <_strtoul_l.constprop.0+0x3e>
 800d54e:	2c30      	cmp	r4, #48	; 0x30
 800d550:	d0a9      	beq.n	800d4a6 <_strtoul_l.constprop.0+0x2e>
 800d552:	230a      	movs	r3, #10
 800d554:	e7af      	b.n	800d4b6 <_strtoul_l.constprop.0+0x3e>
 800d556:	bf00      	nop
 800d558:	0800e121 	.word	0x0800e121

0800d55c <_strtoul_r>:
 800d55c:	f7ff bf8c 	b.w	800d478 <_strtoul_l.constprop.0>

0800d560 <__ascii_wctomb>:
 800d560:	4603      	mov	r3, r0
 800d562:	4608      	mov	r0, r1
 800d564:	b141      	cbz	r1, 800d578 <__ascii_wctomb+0x18>
 800d566:	2aff      	cmp	r2, #255	; 0xff
 800d568:	d904      	bls.n	800d574 <__ascii_wctomb+0x14>
 800d56a:	228a      	movs	r2, #138	; 0x8a
 800d56c:	f04f 30ff 	mov.w	r0, #4294967295
 800d570:	601a      	str	r2, [r3, #0]
 800d572:	4770      	bx	lr
 800d574:	2001      	movs	r0, #1
 800d576:	700a      	strb	r2, [r1, #0]
 800d578:	4770      	bx	lr
	...

0800d57c <fiprintf>:
 800d57c:	b40e      	push	{r1, r2, r3}
 800d57e:	b503      	push	{r0, r1, lr}
 800d580:	4601      	mov	r1, r0
 800d582:	ab03      	add	r3, sp, #12
 800d584:	4805      	ldr	r0, [pc, #20]	; (800d59c <fiprintf+0x20>)
 800d586:	f853 2b04 	ldr.w	r2, [r3], #4
 800d58a:	6800      	ldr	r0, [r0, #0]
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	f000 f83d 	bl	800d60c <_vfiprintf_r>
 800d592:	b002      	add	sp, #8
 800d594:	f85d eb04 	ldr.w	lr, [sp], #4
 800d598:	b003      	add	sp, #12
 800d59a:	4770      	bx	lr
 800d59c:	2000007c 	.word	0x2000007c

0800d5a0 <abort>:
 800d5a0:	2006      	movs	r0, #6
 800d5a2:	b508      	push	{r3, lr}
 800d5a4:	f000 fa0a 	bl	800d9bc <raise>
 800d5a8:	2001      	movs	r0, #1
 800d5aa:	f7f4 fb18 	bl	8001bde <_exit>

0800d5ae <_malloc_usable_size_r>:
 800d5ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5b2:	1f18      	subs	r0, r3, #4
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	bfbc      	itt	lt
 800d5b8:	580b      	ldrlt	r3, [r1, r0]
 800d5ba:	18c0      	addlt	r0, r0, r3
 800d5bc:	4770      	bx	lr

0800d5be <__sfputc_r>:
 800d5be:	6893      	ldr	r3, [r2, #8]
 800d5c0:	b410      	push	{r4}
 800d5c2:	3b01      	subs	r3, #1
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	6093      	str	r3, [r2, #8]
 800d5c8:	da07      	bge.n	800d5da <__sfputc_r+0x1c>
 800d5ca:	6994      	ldr	r4, [r2, #24]
 800d5cc:	42a3      	cmp	r3, r4
 800d5ce:	db01      	blt.n	800d5d4 <__sfputc_r+0x16>
 800d5d0:	290a      	cmp	r1, #10
 800d5d2:	d102      	bne.n	800d5da <__sfputc_r+0x1c>
 800d5d4:	bc10      	pop	{r4}
 800d5d6:	f000 b933 	b.w	800d840 <__swbuf_r>
 800d5da:	6813      	ldr	r3, [r2, #0]
 800d5dc:	1c58      	adds	r0, r3, #1
 800d5de:	6010      	str	r0, [r2, #0]
 800d5e0:	7019      	strb	r1, [r3, #0]
 800d5e2:	4608      	mov	r0, r1
 800d5e4:	bc10      	pop	{r4}
 800d5e6:	4770      	bx	lr

0800d5e8 <__sfputs_r>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	4614      	mov	r4, r2
 800d5f0:	18d5      	adds	r5, r2, r3
 800d5f2:	42ac      	cmp	r4, r5
 800d5f4:	d101      	bne.n	800d5fa <__sfputs_r+0x12>
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	e007      	b.n	800d60a <__sfputs_r+0x22>
 800d5fa:	463a      	mov	r2, r7
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d602:	f7ff ffdc 	bl	800d5be <__sfputc_r>
 800d606:	1c43      	adds	r3, r0, #1
 800d608:	d1f3      	bne.n	800d5f2 <__sfputs_r+0xa>
 800d60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d60c <_vfiprintf_r>:
 800d60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d610:	460d      	mov	r5, r1
 800d612:	4614      	mov	r4, r2
 800d614:	4698      	mov	r8, r3
 800d616:	4606      	mov	r6, r0
 800d618:	b09d      	sub	sp, #116	; 0x74
 800d61a:	b118      	cbz	r0, 800d624 <_vfiprintf_r+0x18>
 800d61c:	6a03      	ldr	r3, [r0, #32]
 800d61e:	b90b      	cbnz	r3, 800d624 <_vfiprintf_r+0x18>
 800d620:	f7fc f94c 	bl	80098bc <__sinit>
 800d624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d626:	07d9      	lsls	r1, r3, #31
 800d628:	d405      	bmi.n	800d636 <_vfiprintf_r+0x2a>
 800d62a:	89ab      	ldrh	r3, [r5, #12]
 800d62c:	059a      	lsls	r2, r3, #22
 800d62e:	d402      	bmi.n	800d636 <_vfiprintf_r+0x2a>
 800d630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d632:	f7fc facc 	bl	8009bce <__retarget_lock_acquire_recursive>
 800d636:	89ab      	ldrh	r3, [r5, #12]
 800d638:	071b      	lsls	r3, r3, #28
 800d63a:	d501      	bpl.n	800d640 <_vfiprintf_r+0x34>
 800d63c:	692b      	ldr	r3, [r5, #16]
 800d63e:	b99b      	cbnz	r3, 800d668 <_vfiprintf_r+0x5c>
 800d640:	4629      	mov	r1, r5
 800d642:	4630      	mov	r0, r6
 800d644:	f000 f93a 	bl	800d8bc <__swsetup_r>
 800d648:	b170      	cbz	r0, 800d668 <_vfiprintf_r+0x5c>
 800d64a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d64c:	07dc      	lsls	r4, r3, #31
 800d64e:	d504      	bpl.n	800d65a <_vfiprintf_r+0x4e>
 800d650:	f04f 30ff 	mov.w	r0, #4294967295
 800d654:	b01d      	add	sp, #116	; 0x74
 800d656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65a:	89ab      	ldrh	r3, [r5, #12]
 800d65c:	0598      	lsls	r0, r3, #22
 800d65e:	d4f7      	bmi.n	800d650 <_vfiprintf_r+0x44>
 800d660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d662:	f7fc fab5 	bl	8009bd0 <__retarget_lock_release_recursive>
 800d666:	e7f3      	b.n	800d650 <_vfiprintf_r+0x44>
 800d668:	2300      	movs	r3, #0
 800d66a:	9309      	str	r3, [sp, #36]	; 0x24
 800d66c:	2320      	movs	r3, #32
 800d66e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d672:	2330      	movs	r3, #48	; 0x30
 800d674:	f04f 0901 	mov.w	r9, #1
 800d678:	f8cd 800c 	str.w	r8, [sp, #12]
 800d67c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d82c <_vfiprintf_r+0x220>
 800d680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d684:	4623      	mov	r3, r4
 800d686:	469a      	mov	sl, r3
 800d688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d68c:	b10a      	cbz	r2, 800d692 <_vfiprintf_r+0x86>
 800d68e:	2a25      	cmp	r2, #37	; 0x25
 800d690:	d1f9      	bne.n	800d686 <_vfiprintf_r+0x7a>
 800d692:	ebba 0b04 	subs.w	fp, sl, r4
 800d696:	d00b      	beq.n	800d6b0 <_vfiprintf_r+0xa4>
 800d698:	465b      	mov	r3, fp
 800d69a:	4622      	mov	r2, r4
 800d69c:	4629      	mov	r1, r5
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7ff ffa2 	bl	800d5e8 <__sfputs_r>
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	f000 80a9 	beq.w	800d7fc <_vfiprintf_r+0x1f0>
 800d6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6ac:	445a      	add	r2, fp
 800d6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800d6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 80a1 	beq.w	800d7fc <_vfiprintf_r+0x1f0>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6c4:	f10a 0a01 	add.w	sl, sl, #1
 800d6c8:	9304      	str	r3, [sp, #16]
 800d6ca:	9307      	str	r3, [sp, #28]
 800d6cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6d0:	931a      	str	r3, [sp, #104]	; 0x68
 800d6d2:	4654      	mov	r4, sl
 800d6d4:	2205      	movs	r2, #5
 800d6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6da:	4854      	ldr	r0, [pc, #336]	; (800d82c <_vfiprintf_r+0x220>)
 800d6dc:	f7fc fa79 	bl	8009bd2 <memchr>
 800d6e0:	9a04      	ldr	r2, [sp, #16]
 800d6e2:	b9d8      	cbnz	r0, 800d71c <_vfiprintf_r+0x110>
 800d6e4:	06d1      	lsls	r1, r2, #27
 800d6e6:	bf44      	itt	mi
 800d6e8:	2320      	movmi	r3, #32
 800d6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6ee:	0713      	lsls	r3, r2, #28
 800d6f0:	bf44      	itt	mi
 800d6f2:	232b      	movmi	r3, #43	; 0x2b
 800d6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d6fc:	2b2a      	cmp	r3, #42	; 0x2a
 800d6fe:	d015      	beq.n	800d72c <_vfiprintf_r+0x120>
 800d700:	4654      	mov	r4, sl
 800d702:	2000      	movs	r0, #0
 800d704:	f04f 0c0a 	mov.w	ip, #10
 800d708:	9a07      	ldr	r2, [sp, #28]
 800d70a:	4621      	mov	r1, r4
 800d70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d710:	3b30      	subs	r3, #48	; 0x30
 800d712:	2b09      	cmp	r3, #9
 800d714:	d94d      	bls.n	800d7b2 <_vfiprintf_r+0x1a6>
 800d716:	b1b0      	cbz	r0, 800d746 <_vfiprintf_r+0x13a>
 800d718:	9207      	str	r2, [sp, #28]
 800d71a:	e014      	b.n	800d746 <_vfiprintf_r+0x13a>
 800d71c:	eba0 0308 	sub.w	r3, r0, r8
 800d720:	fa09 f303 	lsl.w	r3, r9, r3
 800d724:	4313      	orrs	r3, r2
 800d726:	46a2      	mov	sl, r4
 800d728:	9304      	str	r3, [sp, #16]
 800d72a:	e7d2      	b.n	800d6d2 <_vfiprintf_r+0xc6>
 800d72c:	9b03      	ldr	r3, [sp, #12]
 800d72e:	1d19      	adds	r1, r3, #4
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	9103      	str	r1, [sp, #12]
 800d734:	2b00      	cmp	r3, #0
 800d736:	bfbb      	ittet	lt
 800d738:	425b      	neglt	r3, r3
 800d73a:	f042 0202 	orrlt.w	r2, r2, #2
 800d73e:	9307      	strge	r3, [sp, #28]
 800d740:	9307      	strlt	r3, [sp, #28]
 800d742:	bfb8      	it	lt
 800d744:	9204      	strlt	r2, [sp, #16]
 800d746:	7823      	ldrb	r3, [r4, #0]
 800d748:	2b2e      	cmp	r3, #46	; 0x2e
 800d74a:	d10c      	bne.n	800d766 <_vfiprintf_r+0x15a>
 800d74c:	7863      	ldrb	r3, [r4, #1]
 800d74e:	2b2a      	cmp	r3, #42	; 0x2a
 800d750:	d134      	bne.n	800d7bc <_vfiprintf_r+0x1b0>
 800d752:	9b03      	ldr	r3, [sp, #12]
 800d754:	3402      	adds	r4, #2
 800d756:	1d1a      	adds	r2, r3, #4
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	9203      	str	r2, [sp, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	bfb8      	it	lt
 800d760:	f04f 33ff 	movlt.w	r3, #4294967295
 800d764:	9305      	str	r3, [sp, #20]
 800d766:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d830 <_vfiprintf_r+0x224>
 800d76a:	2203      	movs	r2, #3
 800d76c:	4650      	mov	r0, sl
 800d76e:	7821      	ldrb	r1, [r4, #0]
 800d770:	f7fc fa2f 	bl	8009bd2 <memchr>
 800d774:	b138      	cbz	r0, 800d786 <_vfiprintf_r+0x17a>
 800d776:	2240      	movs	r2, #64	; 0x40
 800d778:	9b04      	ldr	r3, [sp, #16]
 800d77a:	eba0 000a 	sub.w	r0, r0, sl
 800d77e:	4082      	lsls	r2, r0
 800d780:	4313      	orrs	r3, r2
 800d782:	3401      	adds	r4, #1
 800d784:	9304      	str	r3, [sp, #16]
 800d786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78a:	2206      	movs	r2, #6
 800d78c:	4829      	ldr	r0, [pc, #164]	; (800d834 <_vfiprintf_r+0x228>)
 800d78e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d792:	f7fc fa1e 	bl	8009bd2 <memchr>
 800d796:	2800      	cmp	r0, #0
 800d798:	d03f      	beq.n	800d81a <_vfiprintf_r+0x20e>
 800d79a:	4b27      	ldr	r3, [pc, #156]	; (800d838 <_vfiprintf_r+0x22c>)
 800d79c:	bb1b      	cbnz	r3, 800d7e6 <_vfiprintf_r+0x1da>
 800d79e:	9b03      	ldr	r3, [sp, #12]
 800d7a0:	3307      	adds	r3, #7
 800d7a2:	f023 0307 	bic.w	r3, r3, #7
 800d7a6:	3308      	adds	r3, #8
 800d7a8:	9303      	str	r3, [sp, #12]
 800d7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ac:	443b      	add	r3, r7
 800d7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b0:	e768      	b.n	800d684 <_vfiprintf_r+0x78>
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	2001      	movs	r0, #1
 800d7b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7ba:	e7a6      	b.n	800d70a <_vfiprintf_r+0xfe>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f04f 0c0a 	mov.w	ip, #10
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	3401      	adds	r4, #1
 800d7c6:	9305      	str	r3, [sp, #20]
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7ce:	3a30      	subs	r2, #48	; 0x30
 800d7d0:	2a09      	cmp	r2, #9
 800d7d2:	d903      	bls.n	800d7dc <_vfiprintf_r+0x1d0>
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d0c6      	beq.n	800d766 <_vfiprintf_r+0x15a>
 800d7d8:	9105      	str	r1, [sp, #20]
 800d7da:	e7c4      	b.n	800d766 <_vfiprintf_r+0x15a>
 800d7dc:	4604      	mov	r4, r0
 800d7de:	2301      	movs	r3, #1
 800d7e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7e4:	e7f0      	b.n	800d7c8 <_vfiprintf_r+0x1bc>
 800d7e6:	ab03      	add	r3, sp, #12
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	462a      	mov	r2, r5
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	4b13      	ldr	r3, [pc, #76]	; (800d83c <_vfiprintf_r+0x230>)
 800d7f0:	a904      	add	r1, sp, #16
 800d7f2:	f7fb fa07 	bl	8008c04 <_printf_float>
 800d7f6:	4607      	mov	r7, r0
 800d7f8:	1c78      	adds	r0, r7, #1
 800d7fa:	d1d6      	bne.n	800d7aa <_vfiprintf_r+0x19e>
 800d7fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7fe:	07d9      	lsls	r1, r3, #31
 800d800:	d405      	bmi.n	800d80e <_vfiprintf_r+0x202>
 800d802:	89ab      	ldrh	r3, [r5, #12]
 800d804:	059a      	lsls	r2, r3, #22
 800d806:	d402      	bmi.n	800d80e <_vfiprintf_r+0x202>
 800d808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d80a:	f7fc f9e1 	bl	8009bd0 <__retarget_lock_release_recursive>
 800d80e:	89ab      	ldrh	r3, [r5, #12]
 800d810:	065b      	lsls	r3, r3, #25
 800d812:	f53f af1d 	bmi.w	800d650 <_vfiprintf_r+0x44>
 800d816:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d818:	e71c      	b.n	800d654 <_vfiprintf_r+0x48>
 800d81a:	ab03      	add	r3, sp, #12
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	462a      	mov	r2, r5
 800d820:	4630      	mov	r0, r6
 800d822:	4b06      	ldr	r3, [pc, #24]	; (800d83c <_vfiprintf_r+0x230>)
 800d824:	a904      	add	r1, sp, #16
 800d826:	f7fb fc8d 	bl	8009144 <_printf_i>
 800d82a:	e7e4      	b.n	800d7f6 <_vfiprintf_r+0x1ea>
 800d82c:	0800e221 	.word	0x0800e221
 800d830:	0800e227 	.word	0x0800e227
 800d834:	0800e22b 	.word	0x0800e22b
 800d838:	08008c05 	.word	0x08008c05
 800d83c:	0800d5e9 	.word	0x0800d5e9

0800d840 <__swbuf_r>:
 800d840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d842:	460e      	mov	r6, r1
 800d844:	4614      	mov	r4, r2
 800d846:	4605      	mov	r5, r0
 800d848:	b118      	cbz	r0, 800d852 <__swbuf_r+0x12>
 800d84a:	6a03      	ldr	r3, [r0, #32]
 800d84c:	b90b      	cbnz	r3, 800d852 <__swbuf_r+0x12>
 800d84e:	f7fc f835 	bl	80098bc <__sinit>
 800d852:	69a3      	ldr	r3, [r4, #24]
 800d854:	60a3      	str	r3, [r4, #8]
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	071a      	lsls	r2, r3, #28
 800d85a:	d525      	bpl.n	800d8a8 <__swbuf_r+0x68>
 800d85c:	6923      	ldr	r3, [r4, #16]
 800d85e:	b31b      	cbz	r3, 800d8a8 <__swbuf_r+0x68>
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	6922      	ldr	r2, [r4, #16]
 800d864:	b2f6      	uxtb	r6, r6
 800d866:	1a98      	subs	r0, r3, r2
 800d868:	6963      	ldr	r3, [r4, #20]
 800d86a:	4637      	mov	r7, r6
 800d86c:	4283      	cmp	r3, r0
 800d86e:	dc04      	bgt.n	800d87a <__swbuf_r+0x3a>
 800d870:	4621      	mov	r1, r4
 800d872:	4628      	mov	r0, r5
 800d874:	f7ff f96a 	bl	800cb4c <_fflush_r>
 800d878:	b9e0      	cbnz	r0, 800d8b4 <__swbuf_r+0x74>
 800d87a:	68a3      	ldr	r3, [r4, #8]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	60a3      	str	r3, [r4, #8]
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	1c5a      	adds	r2, r3, #1
 800d884:	6022      	str	r2, [r4, #0]
 800d886:	701e      	strb	r6, [r3, #0]
 800d888:	6962      	ldr	r2, [r4, #20]
 800d88a:	1c43      	adds	r3, r0, #1
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d004      	beq.n	800d89a <__swbuf_r+0x5a>
 800d890:	89a3      	ldrh	r3, [r4, #12]
 800d892:	07db      	lsls	r3, r3, #31
 800d894:	d506      	bpl.n	800d8a4 <__swbuf_r+0x64>
 800d896:	2e0a      	cmp	r6, #10
 800d898:	d104      	bne.n	800d8a4 <__swbuf_r+0x64>
 800d89a:	4621      	mov	r1, r4
 800d89c:	4628      	mov	r0, r5
 800d89e:	f7ff f955 	bl	800cb4c <_fflush_r>
 800d8a2:	b938      	cbnz	r0, 800d8b4 <__swbuf_r+0x74>
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	f000 f806 	bl	800d8bc <__swsetup_r>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d0d5      	beq.n	800d860 <__swbuf_r+0x20>
 800d8b4:	f04f 37ff 	mov.w	r7, #4294967295
 800d8b8:	e7f4      	b.n	800d8a4 <__swbuf_r+0x64>
	...

0800d8bc <__swsetup_r>:
 800d8bc:	b538      	push	{r3, r4, r5, lr}
 800d8be:	4b2a      	ldr	r3, [pc, #168]	; (800d968 <__swsetup_r+0xac>)
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	6818      	ldr	r0, [r3, #0]
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	b118      	cbz	r0, 800d8d0 <__swsetup_r+0x14>
 800d8c8:	6a03      	ldr	r3, [r0, #32]
 800d8ca:	b90b      	cbnz	r3, 800d8d0 <__swsetup_r+0x14>
 800d8cc:	f7fb fff6 	bl	80098bc <__sinit>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8d6:	0718      	lsls	r0, r3, #28
 800d8d8:	d422      	bmi.n	800d920 <__swsetup_r+0x64>
 800d8da:	06d9      	lsls	r1, r3, #27
 800d8dc:	d407      	bmi.n	800d8ee <__swsetup_r+0x32>
 800d8de:	2309      	movs	r3, #9
 800d8e0:	602b      	str	r3, [r5, #0]
 800d8e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ea:	81a3      	strh	r3, [r4, #12]
 800d8ec:	e034      	b.n	800d958 <__swsetup_r+0x9c>
 800d8ee:	0758      	lsls	r0, r3, #29
 800d8f0:	d512      	bpl.n	800d918 <__swsetup_r+0x5c>
 800d8f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8f4:	b141      	cbz	r1, 800d908 <__swsetup_r+0x4c>
 800d8f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8fa:	4299      	cmp	r1, r3
 800d8fc:	d002      	beq.n	800d904 <__swsetup_r+0x48>
 800d8fe:	4628      	mov	r0, r5
 800d900:	f7fc fff6 	bl	800a8f0 <_free_r>
 800d904:	2300      	movs	r3, #0
 800d906:	6363      	str	r3, [r4, #52]	; 0x34
 800d908:	89a3      	ldrh	r3, [r4, #12]
 800d90a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d90e:	81a3      	strh	r3, [r4, #12]
 800d910:	2300      	movs	r3, #0
 800d912:	6063      	str	r3, [r4, #4]
 800d914:	6923      	ldr	r3, [r4, #16]
 800d916:	6023      	str	r3, [r4, #0]
 800d918:	89a3      	ldrh	r3, [r4, #12]
 800d91a:	f043 0308 	orr.w	r3, r3, #8
 800d91e:	81a3      	strh	r3, [r4, #12]
 800d920:	6923      	ldr	r3, [r4, #16]
 800d922:	b94b      	cbnz	r3, 800d938 <__swsetup_r+0x7c>
 800d924:	89a3      	ldrh	r3, [r4, #12]
 800d926:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d92a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d92e:	d003      	beq.n	800d938 <__swsetup_r+0x7c>
 800d930:	4621      	mov	r1, r4
 800d932:	4628      	mov	r0, r5
 800d934:	f000 f883 	bl	800da3e <__smakebuf_r>
 800d938:	89a0      	ldrh	r0, [r4, #12]
 800d93a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d93e:	f010 0301 	ands.w	r3, r0, #1
 800d942:	d00a      	beq.n	800d95a <__swsetup_r+0x9e>
 800d944:	2300      	movs	r3, #0
 800d946:	60a3      	str	r3, [r4, #8]
 800d948:	6963      	ldr	r3, [r4, #20]
 800d94a:	425b      	negs	r3, r3
 800d94c:	61a3      	str	r3, [r4, #24]
 800d94e:	6923      	ldr	r3, [r4, #16]
 800d950:	b943      	cbnz	r3, 800d964 <__swsetup_r+0xa8>
 800d952:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d956:	d1c4      	bne.n	800d8e2 <__swsetup_r+0x26>
 800d958:	bd38      	pop	{r3, r4, r5, pc}
 800d95a:	0781      	lsls	r1, r0, #30
 800d95c:	bf58      	it	pl
 800d95e:	6963      	ldrpl	r3, [r4, #20]
 800d960:	60a3      	str	r3, [r4, #8]
 800d962:	e7f4      	b.n	800d94e <__swsetup_r+0x92>
 800d964:	2000      	movs	r0, #0
 800d966:	e7f7      	b.n	800d958 <__swsetup_r+0x9c>
 800d968:	2000007c 	.word	0x2000007c

0800d96c <_raise_r>:
 800d96c:	291f      	cmp	r1, #31
 800d96e:	b538      	push	{r3, r4, r5, lr}
 800d970:	4604      	mov	r4, r0
 800d972:	460d      	mov	r5, r1
 800d974:	d904      	bls.n	800d980 <_raise_r+0x14>
 800d976:	2316      	movs	r3, #22
 800d978:	6003      	str	r3, [r0, #0]
 800d97a:	f04f 30ff 	mov.w	r0, #4294967295
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d982:	b112      	cbz	r2, 800d98a <_raise_r+0x1e>
 800d984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d988:	b94b      	cbnz	r3, 800d99e <_raise_r+0x32>
 800d98a:	4620      	mov	r0, r4
 800d98c:	f000 f830 	bl	800d9f0 <_getpid_r>
 800d990:	462a      	mov	r2, r5
 800d992:	4601      	mov	r1, r0
 800d994:	4620      	mov	r0, r4
 800d996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d99a:	f000 b817 	b.w	800d9cc <_kill_r>
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d00a      	beq.n	800d9b8 <_raise_r+0x4c>
 800d9a2:	1c59      	adds	r1, r3, #1
 800d9a4:	d103      	bne.n	800d9ae <_raise_r+0x42>
 800d9a6:	2316      	movs	r3, #22
 800d9a8:	6003      	str	r3, [r0, #0]
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	e7e7      	b.n	800d97e <_raise_r+0x12>
 800d9ae:	2400      	movs	r4, #0
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9b6:	4798      	blx	r3
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	e7e0      	b.n	800d97e <_raise_r+0x12>

0800d9bc <raise>:
 800d9bc:	4b02      	ldr	r3, [pc, #8]	; (800d9c8 <raise+0xc>)
 800d9be:	4601      	mov	r1, r0
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	f7ff bfd3 	b.w	800d96c <_raise_r>
 800d9c6:	bf00      	nop
 800d9c8:	2000007c 	.word	0x2000007c

0800d9cc <_kill_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	4d06      	ldr	r5, [pc, #24]	; (800d9ec <_kill_r+0x20>)
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	f7f4 f8f0 	bl	8001bbe <_kill>
 800d9de:	1c43      	adds	r3, r0, #1
 800d9e0:	d102      	bne.n	800d9e8 <_kill_r+0x1c>
 800d9e2:	682b      	ldr	r3, [r5, #0]
 800d9e4:	b103      	cbz	r3, 800d9e8 <_kill_r+0x1c>
 800d9e6:	6023      	str	r3, [r4, #0]
 800d9e8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ea:	bf00      	nop
 800d9ec:	200020c0 	.word	0x200020c0

0800d9f0 <_getpid_r>:
 800d9f0:	f7f4 b8de 	b.w	8001bb0 <_getpid>

0800d9f4 <__swhatbuf_r>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	460c      	mov	r4, r1
 800d9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fc:	4615      	mov	r5, r2
 800d9fe:	2900      	cmp	r1, #0
 800da00:	461e      	mov	r6, r3
 800da02:	b096      	sub	sp, #88	; 0x58
 800da04:	da0c      	bge.n	800da20 <__swhatbuf_r+0x2c>
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	2100      	movs	r1, #0
 800da0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800da0e:	bf0c      	ite	eq
 800da10:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800da14:	2340      	movne	r3, #64	; 0x40
 800da16:	2000      	movs	r0, #0
 800da18:	6031      	str	r1, [r6, #0]
 800da1a:	602b      	str	r3, [r5, #0]
 800da1c:	b016      	add	sp, #88	; 0x58
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
 800da20:	466a      	mov	r2, sp
 800da22:	f000 f849 	bl	800dab8 <_fstat_r>
 800da26:	2800      	cmp	r0, #0
 800da28:	dbed      	blt.n	800da06 <__swhatbuf_r+0x12>
 800da2a:	9901      	ldr	r1, [sp, #4]
 800da2c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800da30:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800da34:	4259      	negs	r1, r3
 800da36:	4159      	adcs	r1, r3
 800da38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da3c:	e7eb      	b.n	800da16 <__swhatbuf_r+0x22>

0800da3e <__smakebuf_r>:
 800da3e:	898b      	ldrh	r3, [r1, #12]
 800da40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da42:	079d      	lsls	r5, r3, #30
 800da44:	4606      	mov	r6, r0
 800da46:	460c      	mov	r4, r1
 800da48:	d507      	bpl.n	800da5a <__smakebuf_r+0x1c>
 800da4a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da4e:	6023      	str	r3, [r4, #0]
 800da50:	6123      	str	r3, [r4, #16]
 800da52:	2301      	movs	r3, #1
 800da54:	6163      	str	r3, [r4, #20]
 800da56:	b002      	add	sp, #8
 800da58:	bd70      	pop	{r4, r5, r6, pc}
 800da5a:	466a      	mov	r2, sp
 800da5c:	ab01      	add	r3, sp, #4
 800da5e:	f7ff ffc9 	bl	800d9f4 <__swhatbuf_r>
 800da62:	9900      	ldr	r1, [sp, #0]
 800da64:	4605      	mov	r5, r0
 800da66:	4630      	mov	r0, r6
 800da68:	f7fc ffb2 	bl	800a9d0 <_malloc_r>
 800da6c:	b948      	cbnz	r0, 800da82 <__smakebuf_r+0x44>
 800da6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da72:	059a      	lsls	r2, r3, #22
 800da74:	d4ef      	bmi.n	800da56 <__smakebuf_r+0x18>
 800da76:	f023 0303 	bic.w	r3, r3, #3
 800da7a:	f043 0302 	orr.w	r3, r3, #2
 800da7e:	81a3      	strh	r3, [r4, #12]
 800da80:	e7e3      	b.n	800da4a <__smakebuf_r+0xc>
 800da82:	89a3      	ldrh	r3, [r4, #12]
 800da84:	6020      	str	r0, [r4, #0]
 800da86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da8a:	81a3      	strh	r3, [r4, #12]
 800da8c:	9b00      	ldr	r3, [sp, #0]
 800da8e:	6120      	str	r0, [r4, #16]
 800da90:	6163      	str	r3, [r4, #20]
 800da92:	9b01      	ldr	r3, [sp, #4]
 800da94:	b15b      	cbz	r3, 800daae <__smakebuf_r+0x70>
 800da96:	4630      	mov	r0, r6
 800da98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da9c:	f000 f81e 	bl	800dadc <_isatty_r>
 800daa0:	b128      	cbz	r0, 800daae <__smakebuf_r+0x70>
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	f023 0303 	bic.w	r3, r3, #3
 800daa8:	f043 0301 	orr.w	r3, r3, #1
 800daac:	81a3      	strh	r3, [r4, #12]
 800daae:	89a3      	ldrh	r3, [r4, #12]
 800dab0:	431d      	orrs	r5, r3
 800dab2:	81a5      	strh	r5, [r4, #12]
 800dab4:	e7cf      	b.n	800da56 <__smakebuf_r+0x18>
	...

0800dab8 <_fstat_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	2300      	movs	r3, #0
 800dabc:	4d06      	ldr	r5, [pc, #24]	; (800dad8 <_fstat_r+0x20>)
 800dabe:	4604      	mov	r4, r0
 800dac0:	4608      	mov	r0, r1
 800dac2:	4611      	mov	r1, r2
 800dac4:	602b      	str	r3, [r5, #0]
 800dac6:	f7f4 f8d8 	bl	8001c7a <_fstat>
 800daca:	1c43      	adds	r3, r0, #1
 800dacc:	d102      	bne.n	800dad4 <_fstat_r+0x1c>
 800dace:	682b      	ldr	r3, [r5, #0]
 800dad0:	b103      	cbz	r3, 800dad4 <_fstat_r+0x1c>
 800dad2:	6023      	str	r3, [r4, #0]
 800dad4:	bd38      	pop	{r3, r4, r5, pc}
 800dad6:	bf00      	nop
 800dad8:	200020c0 	.word	0x200020c0

0800dadc <_isatty_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	2300      	movs	r3, #0
 800dae0:	4d05      	ldr	r5, [pc, #20]	; (800daf8 <_isatty_r+0x1c>)
 800dae2:	4604      	mov	r4, r0
 800dae4:	4608      	mov	r0, r1
 800dae6:	602b      	str	r3, [r5, #0]
 800dae8:	f7f4 f8d6 	bl	8001c98 <_isatty>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_isatty_r+0x1a>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_isatty_r+0x1a>
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	200020c0 	.word	0x200020c0

0800dafc <_init>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	bf00      	nop
 800db00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db02:	bc08      	pop	{r3}
 800db04:	469e      	mov	lr, r3
 800db06:	4770      	bx	lr

0800db08 <_fini>:
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	bf00      	nop
 800db0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db0e:	bc08      	pop	{r3}
 800db10:	469e      	mov	lr, r3
 800db12:	4770      	bx	lr
